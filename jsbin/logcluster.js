// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 28208;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // some webservers (azure) does not support subprotocol header
              if (runtimeConfig && null === Module['websocket']['subprotocol']) {
                subProtocols = 'null';
                opts = undefined;
              }
  
              // If node we use the ws library.
              var WebSocketConstructor;
              if (ENVIRONMENT_IS_NODE) {
                WebSocketConstructor = require('ws');
              } else if (ENVIRONMENT_IS_WEB) {
                WebSocketConstructor = window['WebSocket'];
              } else {
                WebSocketConstructor = WebSocket;
              }
              ws = new WebSocketConstructor(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
  
            // An empty ArrayBuffer will emit a pseudo disconnect event
            // as recv/recvmsg will return zero which indicates that a socket
            // has performed a shutdown although the connection has not been disconnected yet.
            if (data.byteLength == 0) {
              return;
            }
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          if (ArrayBuffer.isView(buffer)) {
            offset += buffer.byteOffset;
            buffer = buffer.buffer;
          }
  
          var data;
            data = buffer.slice(offset, offset + length);
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  
  var _htons=undefined;function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res !== null) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res !== null) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }
  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall102(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = SYSCALLS.getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport);
          assert(!res.errno);
          return 0;
        }
        case 7: { // getpeername
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          if (!sock.daddr) {
            return -ERRNO_CODES.ENOTCONN; // The socket is not connected.
          }
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = SYSCALLS.getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = SYSCALLS.getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = SYSCALLS.getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/kripken/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        stringToUTF8(name, dirp + pos + 11, 256);
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function ___wait() {}

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=STATICTOP; STATICTOP += 16;;
  
  var _daylight=STATICTOP; STATICTOP += 16;;
  
  var _timezone=STATICTOP; STATICTOP += 16;;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by getTimezoneOffset().
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((_timezone)>>2)]=(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }
  
  
  var ___tm_formatted=STATICTOP; STATICTOP += 48;;
  
  function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        // Attention: some regions don't have DST at all.
        HEAP32[(((tmPtr)+(32))>>2)]=Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
  
      // asctime_r is specced to behave in an undefined manner if the algorithm would attempt
      // to write out more than 26 bytes (including the null terminator).
      // See http://pubs.opengroup.org/onlinepubs/9699919799/functions/asctime.html
      // Our undefined behavior is to truncate the write to at most 26 bytes, including null terminator.
      stringToUTF8(s, buf, 26);
      return buf;
    }function _ctime_r(time, buf) {
      var stack = stackSave();
      var rv = _asctime_r(_localtime_r(time, stackAlloc(44)), buf);
      stackRestore(stack);
      return rv;
    }function _ctime(timer) {
      return _ctime_r(timer, ___tm_current);
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }



   

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_setcancelstate() { return 0; }

   

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall102": ___syscall102, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall195": ___syscall195, "___syscall20": ___syscall20, "___syscall220": ___syscall220, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "___wait": ___wait, "__addDays": __addDays, "__arraySum": __arraySum, "__exit": __exit, "__inet_ntop4_raw": __inet_ntop4_raw, "__inet_ntop6_raw": __inet_ntop6_raw, "__inet_pton4_raw": __inet_pton4_raw, "__inet_pton6_raw": __inet_pton6_raw, "__isLeapYear": __isLeapYear, "__read_sockaddr": __read_sockaddr, "__write_sockaddr": __write_sockaddr, "_abort": _abort, "_asctime_r": _asctime_r, "_ctime": _ctime, "_ctime_r": _ctime_r, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_exit": _exit, "_gmtime_r": _gmtime_r, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_localtime_r": _localtime_r, "_mktime": _mktime, "_pthread_setcancelstate": _pthread_setcancelstate, "_strftime": _strftime, "_time": _time, "_tzset": _tzset, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall102=env.___syscall102;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall195=env.___syscall195;
  var ___syscall20=env.___syscall20;
  var ___syscall220=env.___syscall220;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var ___wait=env.___wait;
  var __addDays=env.__addDays;
  var __arraySum=env.__arraySum;
  var __exit=env.__exit;
  var __inet_ntop4_raw=env.__inet_ntop4_raw;
  var __inet_ntop6_raw=env.__inet_ntop6_raw;
  var __inet_pton4_raw=env.__inet_pton4_raw;
  var __inet_pton6_raw=env.__inet_pton6_raw;
  var __isLeapYear=env.__isLeapYear;
  var __read_sockaddr=env.__read_sockaddr;
  var __write_sockaddr=env.__write_sockaddr;
  var _abort=env._abort;
  var _asctime_r=env._asctime_r;
  var _ctime=env._ctime;
  var _ctime_r=env._ctime_r;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _exit=env._exit;
  var _gmtime_r=env._gmtime_r;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var _localtime_r=env._localtime_r;
  var _mktime=env._mktime;
  var _pthread_setcancelstate=env._pthread_setcancelstate;
  var _strftime=env._strftime;
  var _time=env._time;
  var _tzset=env._tzset;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _step_2_aggregate_supports($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 _log_msg(2332,5,$3);
 $4 = $1;
 $5 = ((($4)) + 2268|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6*3)|0;
 $8 = $1;
 $9 = ((($8)) + 2296|0);
 HEAP32[$9>>2] = $7;
 $10 = $1;
 $11 = ((($10)) + 2268|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12*3)|0;
 $14 = $1;
 $15 = ((($14)) + 2300|0);
 HEAP32[$15>>2] = $13;
 $16 = $1;
 $17 = (_build_prefix_trie($16)|0);
 $2 = $17;
 $18 = $1;
 _aggregate_candidates($18);
 STACKTOP = sp;return;
}
function _build_prefix_trie($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $5 = (_malloc(32)|0);
 $4 = $5;
 $6 = $4;
 $7 = ($6|0)!=(0|0);
 $8 = $1;
 if (!($7)) {
  _log_msg(2364,3,$8);
  _exit(1);
  // unreachable;
 }
 $9 = ((($8)) + 2272|0);
 HEAP32[$9>>2] = 1;
 $10 = $1;
 $11 = ((($10)) + 2300|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 1)|0;
 $14 = $4;
 $15 = ((($14)) + 28|0);
 HEAP32[$15>>2] = $13;
 $16 = $4;
 HEAP32[$16>>2] = 0;
 $17 = $4;
 $18 = ((($17)) + 8|0);
 HEAP32[$18>>2] = 0;
 $19 = $4;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = $4;
 $22 = ((($21)) + 16|0);
 HEAP32[$22>>2] = 0;
 $23 = $4;
 $24 = ((($23)) + 20|0);
 HEAP32[$24>>2] = 0;
 $25 = $4;
 $26 = ((($25)) + 24|0);
 HEAP32[$26>>2] = 0;
 $27 = $4;
 $28 = ((($27)) + 12|0);
 HEAP32[$28>>2] = 0;
 $2 = 1;
 while(1) {
  $29 = $2;
  $30 = $1;
  $31 = ((($30)) + 96|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<=($32|0);
  if (!($33)) {
   break;
  }
  $34 = $1;
  $35 = ((($34)) + 172|0);
  $36 = $2;
  $37 = (($35) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $3 = $38;
  while(1) {
   $39 = $3;
   $40 = ($39|0)!=(0|0);
   if (!($40)) {
    break;
   }
   $41 = $4;
   $42 = $3;
   $43 = $1;
   _insert_cluster_into_trie($41,$42,$43);
   $44 = $3;
   $45 = ((($44)) + 28|0);
   $46 = HEAP32[$45>>2]|0;
   $3 = $46;
  }
  $47 = $2;
  $48 = (($47) + 1)|0;
  $2 = $48;
 }
 $49 = $4;
 $50 = $1;
 $51 = ((($50)) + 2288|0);
 HEAP32[$51>>2] = $49;
 $52 = $4;
 STACKTOP = sp;return ($52|0);
}
function _aggregate_candidates($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 1;
 while(1) {
  $4 = $2;
  $5 = $1;
  $6 = ((($5)) + 96|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4|0)<=($7|0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = ((($9)) + 172|0);
  $11 = $2;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $3 = $13;
  while(1) {
   $14 = $3;
   $15 = ($14|0)!=(0|0);
   if (!($15)) {
    break;
   }
   $16 = $3;
   $17 = (_get_first_wildcard_location($16)|0);
   $18 = ($17|0)>=(0);
   if ($18) {
    $19 = $3;
    $20 = $1;
    _aggregate_candidate($19,$20);
   }
   $21 = $3;
   $22 = ((($21)) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $3 = $23;
  }
  $24 = $2;
  $25 = (($24) + 1)|0;
  $2 = $25;
 }
 $2 = 1;
 while(1) {
  $26 = $2;
  $27 = $1;
  $28 = ((($27)) + 96|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)<=($29|0);
  if (!($30)) {
   break;
  }
  $31 = $1;
  $32 = ((($31)) + 172|0);
  $33 = $2;
  $34 = (($32) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $3 = $35;
  while(1) {
   $36 = $3;
   $37 = ($36|0)!=(0|0);
   if (!($37)) {
    break;
   }
   $38 = $3;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $3;
   $44 = ((($43)) + 4|0);
   HEAP32[$44>>2] = $42;
   $45 = $3;
   $46 = ((($45)) + 28|0);
   $47 = HEAP32[$46>>2]|0;
   $3 = $47;
  }
  $48 = $2;
  $49 = (($48) + 1)|0;
  $2 = $49;
 }
 STACKTOP = sp;return;
}
function _insert_cluster_into_trie($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $9 = $10;
 $6 = 1;
 while(1) {
  $11 = $6;
  $12 = $4;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)<=($13|0);
  $15 = $4;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  if (!($14)) {
   break;
  }
  $18 = $6;
  $19 = $18<<1;
  $20 = (($19) + 1)|0;
  $21 = (($17) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0);
  do {
   if ($23) {
    $24 = $4;
    $25 = ((($24)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $6;
    $28 = $27<<1;
    $29 = (($26) + ($28<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $7 = $30;
    $31 = $4;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $6;
    $35 = $34<<1;
    $36 = (($35) + 1)|0;
    $37 = (($33) + ($36<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $8 = $38;
    $39 = $9;
    $40 = $7;
    $41 = $8;
    $42 = $5;
    $43 = (_insert_cluster_into_trie_wildcard($39,$40,$41,$42)|0);
    $44 = ($43|0)!=(0);
    if ($44) {
     $45 = $5;
     $46 = ((($45)) + 2284|0);
     $47 = HEAP32[$46>>2]|0;
     $9 = $47;
    } else {
     $48 = $7;
     $49 = $5;
     $50 = ((($49)) + 2280|0);
     HEAP32[$50>>2] = $48;
     $51 = $8;
     $52 = $5;
     $53 = ((($52)) + 2276|0);
     HEAP32[$53>>2] = $51;
     $54 = $9;
     $55 = $5;
     $56 = ((($55)) + 2284|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $5;
     $59 = (_create_trie_node(0,$54,$57,$58)|0);
     $9 = $59;
    }
    $60 = $9;
    $61 = $4;
    $62 = ((($61)) + 16|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $6;
    $65 = (($63) + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $5;
    $68 = (_insert_cluster_into_trie_word($60,$66,$67)|0);
    $69 = ($68|0)!=(0);
    if ($69) {
     $70 = $5;
     $71 = ((($70)) + 2284|0);
     $72 = HEAP32[$71>>2]|0;
     $9 = $72;
     break;
    } else {
     $73 = $4;
     $74 = ((($73)) + 16|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $6;
     $77 = (($75) + ($76<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $9;
     $80 = $5;
     $81 = ((($80)) + 2284|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $5;
     $84 = (_create_trie_node($78,$79,$82,$83)|0);
     $9 = $84;
     break;
    }
   } else {
    $85 = $9;
    $86 = $4;
    $87 = ((($86)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $6;
    $90 = (($88) + ($89<<2)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $5;
    $93 = (_insert_cluster_into_trie_word($85,$91,$92)|0);
    $94 = ($93|0)!=(0);
    if ($94) {
     $95 = $5;
     $96 = ((($95)) + 2284|0);
     $97 = HEAP32[$96>>2]|0;
     $9 = $97;
     break;
    } else {
     $98 = $4;
     $99 = ((($98)) + 16|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $6;
     $102 = (($100) + ($101<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $9;
     $105 = $5;
     $106 = ((($105)) + 2284|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $5;
     $109 = (_create_trie_node($103,$104,$107,$108)|0);
     $9 = $109;
     break;
    }
   }
  } while(0);
  $110 = $6;
  $111 = (($110) + 1)|0;
  $6 = $111;
 }
 $112 = ((($17)) + 4|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0);
 if (!($114)) {
  $145 = $4;
  $146 = $9;
  $147 = ((($146)) + 12|0);
  HEAP32[$147>>2] = $145;
  $148 = $9;
  $149 = $4;
  $150 = ((($149)) + 20|0);
  HEAP32[$150>>2] = $148;
  STACKTOP = sp;return;
 }
 $115 = $4;
 $116 = ((($115)) + 8|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = HEAP32[$117>>2]|0;
 $7 = $118;
 $119 = $4;
 $120 = ((($119)) + 8|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ((($121)) + 4|0);
 $123 = HEAP32[$122>>2]|0;
 $8 = $123;
 $124 = $9;
 $125 = $7;
 $126 = $8;
 $127 = $5;
 $128 = (_insert_cluster_into_trie_wildcard($124,$125,$126,$127)|0);
 $129 = ($128|0)!=(0);
 if ($129) {
  $130 = $5;
  $131 = ((($130)) + 2284|0);
  $132 = HEAP32[$131>>2]|0;
  $9 = $132;
  $145 = $4;
  $146 = $9;
  $147 = ((($146)) + 12|0);
  HEAP32[$147>>2] = $145;
  $148 = $9;
  $149 = $4;
  $150 = ((($149)) + 20|0);
  HEAP32[$150>>2] = $148;
  STACKTOP = sp;return;
 } else {
  $133 = $7;
  $134 = $5;
  $135 = ((($134)) + 2280|0);
  HEAP32[$135>>2] = $133;
  $136 = $8;
  $137 = $5;
  $138 = ((($137)) + 2276|0);
  HEAP32[$138>>2] = $136;
  $139 = $9;
  $140 = $5;
  $141 = ((($140)) + 2284|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $5;
  $144 = (_create_trie_node(0,$139,$142,$143)|0);
  $9 = $144;
  $145 = $4;
  $146 = $9;
  $147 = ((($146)) + 12|0);
  HEAP32[$147>>2] = $145;
  $148 = $9;
  $149 = $4;
  $150 = ((($149)) + 20|0);
  HEAP32[$150>>2] = $148;
  STACKTOP = sp;return;
 }
}
function _insert_cluster_into_trie_wildcard($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $9 = $12;
 while(1) {
  $13 = $9;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 9;
   break;
  }
  $15 = $9;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $8;
  $19 = ((($18)) + 2300|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)==($20|0);
  if (!($21)) {
   label = 8;
   break;
  }
  $22 = $9;
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $6;
  $26 = ($24|0)==($25|0);
  if ($26) {
   $27 = $9;
   $28 = ((($27)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $7;
   $31 = ($29|0)==($30|0);
   if ($31) {
    label = 6;
    break;
   }
  }
  $35 = $9;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $9 = $37;
 }
 if ((label|0) == 6) {
  $32 = $9;
  $33 = $8;
  $34 = ((($33)) + 2284|0);
  HEAP32[$34>>2] = $32;
  $4 = 1;
  $42 = $4;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 8) {
  $38 = $8;
  $39 = ((($38)) + 2284|0);
  HEAP32[$39>>2] = 0;
  $4 = 0;
  $42 = $4;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 9) {
  $40 = $8;
  $41 = ((($40)) + 2284|0);
  HEAP32[$41>>2] = 0;
  $4 = 0;
  $42 = $4;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _create_trie_node($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = (_malloc(32)|0);
 $8 = $9;
 $10 = $8;
 $11 = ($10|0)!=(0|0);
 $12 = $7;
 if (!($11)) {
  _log_msg(2412,3,$12);
  _exit(1);
  // unreachable;
 }
 $13 = ((($12)) + 2272|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$13>>2] = $15;
 $16 = $4;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $7;
  $19 = ((($18)) + 2300|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $8;
  $22 = ((($21)) + 28|0);
  HEAP32[$22>>2] = $20;
  $23 = $7;
  $24 = ((($23)) + 2280|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $8;
  $27 = ((($26)) + 20|0);
  HEAP32[$27>>2] = $25;
  $28 = $7;
  $29 = ((($28)) + 2276|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $8;
  $$sink = $30;$$sink2 = $31;
 } else {
  $32 = $4;
  $33 = HEAP32[$32>>2]|0;
  $34 = $7;
  $35 = ((($34)) + 2296|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $7;
  $38 = ((($37)) + 2292|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_str2hash($33,$36,$39)|0);
  $41 = $8;
  $42 = ((($41)) + 28|0);
  HEAP32[$42>>2] = $40;
  $43 = $8;
  $44 = ((($43)) + 20|0);
  HEAP32[$44>>2] = 0;
  $45 = $8;
  $$sink = 0;$$sink2 = $45;
 }
 $46 = ((($$sink2)) + 24|0);
 HEAP32[$46>>2] = $$sink;
 $47 = $4;
 $48 = $8;
 $49 = ((($48)) + 16|0);
 HEAP32[$49>>2] = $47;
 $50 = $5;
 $51 = $8;
 HEAP32[$51>>2] = $50;
 $52 = $8;
 $53 = ((($52)) + 8|0);
 HEAP32[$53>>2] = 0;
 $54 = $6;
 $55 = ($54|0)!=(0|0);
 if ($55) {
  $56 = $6;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $8;
  $60 = ((($59)) + 4|0);
  HEAP32[$60>>2] = $58;
  $61 = $8;
  $62 = $6;
  $63 = ((($62)) + 4|0);
  HEAP32[$63>>2] = $61;
  $72 = $8;
  $73 = ((($72)) + 12|0);
  HEAP32[$73>>2] = 0;
  $74 = $8;
  STACKTOP = sp;return ($74|0);
 } else {
  $64 = $5;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $8;
  $68 = ((($67)) + 4|0);
  HEAP32[$68>>2] = $66;
  $69 = $8;
  $70 = $5;
  $71 = ((($70)) + 8|0);
  HEAP32[$71>>2] = $69;
  $72 = $8;
  $73 = ((($72)) + 12|0);
  HEAP32[$73>>2] = 0;
  $74 = $8;
  STACKTOP = sp;return ($74|0);
 }
 return (0)|0;
}
function _insert_cluster_into_trie_word($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $11 = HEAP32[$10>>2]|0;
 $12 = $6;
 $13 = ((($12)) + 2296|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $6;
 $16 = ((($15)) + 2292|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_str2hash($11,$14,$17)|0);
 $7 = $18;
 $19 = $4;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $8 = $21;
 $9 = 0;
 while(1) {
  $22 = $8;
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   label = 11;
   break;
  }
  $24 = $8;
  $25 = ((($24)) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $7;
  $28 = ($26>>>0)>($27>>>0);
  $29 = $8;
  if ($28) {
   $9 = $29;
   $30 = $8;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $8 = $32;
   continue;
  }
  $33 = ((($29)) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $7;
  $36 = ($34|0)==($35|0);
  $37 = $8;
  if (!($36)) {
   $51 = ((($37)) + 28|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $7;
   $54 = ($52>>>0)<($53>>>0);
   if ($54) {
    label = 10;
    break;
   } else {
    continue;
   }
  }
  $38 = ((($37)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $41 = $5;
  $42 = HEAP32[$41>>2]|0;
  $43 = (_strcmp($40,$42)|0);
  $44 = ($43|0)!=(0);
  $45 = $8;
  if (!($44)) {
   label = 7;
   break;
  }
  $9 = $45;
  $48 = $8;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $8 = $50;
 }
 if ((label|0) == 7) {
  $46 = $6;
  $47 = ((($46)) + 2284|0);
  HEAP32[$47>>2] = $45;
  $3 = 1;
  $61 = $3;
  STACKTOP = sp;return ($61|0);
 }
 else if ((label|0) == 10) {
  $55 = $9;
  $56 = $6;
  $57 = ((($56)) + 2284|0);
  HEAP32[$57>>2] = $55;
  $3 = 0;
  $61 = $3;
  STACKTOP = sp;return ($61|0);
 }
 else if ((label|0) == 11) {
  $58 = $9;
  $59 = $6;
  $60 = ((($59)) + 2284|0);
  HEAP32[$60>>2] = $58;
  $3 = 0;
  $61 = $3;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _get_first_wildcard_location($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 1;
 while(1) {
  $4 = $3;
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)<=($6|0);
  $8 = $2;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  if (!($7)) {
   break;
  }
  $11 = $3;
  $12 = $11<<1;
  $13 = (($12) + 1)|0;
  $14 = (($10) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  $17 = $3;
  if ($16) {
   label = 4;
   break;
  }
  $18 = (($17) + 1)|0;
  $3 = $18;
 }
 if ((label|0) == 4) {
  $1 = $17;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 $19 = ((($10)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $1 = 0;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 } else {
  $1 = -1;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _aggregate_candidate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = (_get_first_wildcard_location($7)|0);
 $5 = $8;
 $6 = 0;
 $9 = $5;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $5;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $3;
  $19 = ((($18)) + 2296|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $3;
  $22 = ((($21)) + 2292|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_str2hash($17,$20,$23)|0);
  $6 = $24;
 }
 $25 = $2;
 $26 = (_get_common_parent($25)|0);
 $4 = $26;
 $27 = $4;
 $28 = $2;
 $29 = $5;
 $30 = $6;
 $31 = $3;
 (_find_more_specific($27,$28,$29,0,0,$30,$31)|0);
 STACKTOP = sp;return;
}
function _get_common_parent($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = (_get_first_wildcard_reverse_depth($5)|0);
 $3 = $6;
 $7 = $1;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $2 = $9;
 $4 = 1;
 while(1) {
  $10 = $4;
  $11 = $3;
  $12 = ($10|0)<=($11|0);
  $13 = $2;
  if (!($12)) {
   break;
  }
  $14 = HEAP32[$13>>2]|0;
  $2 = $14;
  $15 = $4;
  $16 = (($15) + 1)|0;
  $4 = $16;
 }
 STACKTOP = sp;return ($13|0);
}
function _find_more_specific($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $17 = $10;
 $18 = ($17|0)==(0);
 $19 = $8;
 if ($18) {
  $20 = $9;
  $21 = $11;
  $22 = $12;
  (_find_more_specific_tail($19,$20,$21,$22)|0);
  $7 = 0;
  $292 = $7;
  STACKTOP = sp;return ($292|0);
 }
 $23 = ((($19)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $15 = $24;
 while(1) {
  $25 = $15;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $15;
  $28 = ((($27)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = $11;
   $32 = (($31) + 1)|0;
   $11 = $32;
   $33 = $12;
   $34 = (($33) + 1)|0;
   $12 = $34;
  } else {
   $35 = $15;
   $36 = ((($35)) + 20|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $11;
   $39 = (($38) + ($37))|0;
   $11 = $39;
   $40 = $15;
   $41 = ((($40)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $12;
   $44 = (($43) + ($42))|0;
   $12 = $44;
  }
  $45 = $11;
  $46 = (($45) - 1)|0;
  $47 = $9;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $10;
  $51 = $50<<1;
  $52 = (($49) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($46|0)<($53|0);
  do {
   if ($54) {
    $55 = $15;
    $56 = $9;
    $57 = $10;
    $58 = $11;
    $59 = $12;
    $60 = $13;
    $61 = $14;
    (_find_more_specific($55,$56,$57,$58,$59,$60,$61)|0);
    $62 = $15;
    $63 = ((($62)) + 24|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = $11;
     $67 = (($66) - 1)|0;
     $11 = $67;
     $68 = $12;
     $69 = (($68) - 1)|0;
     $12 = $69;
     break;
    } else {
     $70 = $15;
     $71 = ((($70)) + 20|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $11;
     $74 = (($73) - ($72))|0;
     $11 = $74;
     $75 = $15;
     $76 = ((($75)) + 24|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $12;
     $79 = (($78) - ($77))|0;
     $12 = $79;
     break;
    }
   } else {
    $80 = $12;
    $81 = (($80) - 1)|0;
    $82 = $9;
    $83 = ((($82)) + 8|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $10;
    $86 = $85<<1;
    $87 = (($86) + 1)|0;
    $88 = (($84) + ($87<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($81|0)>($89|0);
    $91 = $15;
    if ($90) {
     $92 = ((($91)) + 24|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ($93|0)==(0);
     if ($94) {
      $95 = $11;
      $96 = (($95) - 1)|0;
      $11 = $96;
      $97 = $12;
      $98 = (($97) - 1)|0;
      $12 = $98;
      break;
     } else {
      $99 = $15;
      $100 = ((($99)) + 20|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = $11;
      $103 = (($102) - ($101))|0;
      $11 = $103;
      $104 = $15;
      $105 = ((($104)) + 24|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = $12;
      $108 = (($107) - ($106))|0;
      $12 = $108;
      break;
     }
    }
    $109 = ((($91)) + 28|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $13;
    $112 = ($110|0)==($111|0);
    if ($112) {
     $113 = $15;
     $114 = ((($113)) + 16|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = HEAP32[$115>>2]|0;
     $117 = $9;
     $118 = ((($117)) + 16|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = $10;
     $121 = (($119) + ($120<<2)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = HEAP32[$122>>2]|0;
     $124 = (_strcmp($116,$123)|0);
     $125 = ($124|0)!=(0);
     if (!($125)) {
      $126 = $10;
      $127 = $9;
      $128 = HEAP32[$127>>2]|0;
      $129 = ($126|0)<($128|0);
      if ($129) {
       $130 = $9;
       $131 = ((($130)) + 16|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = $10;
       $134 = (($133) + 1)|0;
       $135 = (($132) + ($134<<2)|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = HEAP32[$136>>2]|0;
       $138 = $14;
       $139 = ((($138)) + 2296|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = $14;
       $142 = ((($141)) + 2292|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (_str2hash($137,$140,$143)|0);
       $16 = $144;
       $145 = $15;
       $146 = $9;
       $147 = $10;
       $148 = (($147) + 1)|0;
       $149 = $16;
       $150 = $14;
       (_find_more_specific($145,$146,$148,0,0,$149,$150)|0);
       $151 = $15;
       $152 = ((($151)) + 24|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0);
       if ($154) {
        $155 = $11;
        $156 = (($155) - 1)|0;
        $11 = $156;
        $157 = $12;
        $158 = (($157) - 1)|0;
        $12 = $158;
        break;
       } else {
        $159 = $15;
        $160 = ((($159)) + 20|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = $11;
        $163 = (($162) - ($161))|0;
        $11 = $163;
        $164 = $15;
        $165 = ((($164)) + 24|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = $12;
        $168 = (($167) - ($166))|0;
        $12 = $168;
        break;
       }
      }
      $169 = $10;
      $170 = $9;
      $171 = HEAP32[$170>>2]|0;
      $172 = ($169|0)==($171|0);
      if (!($172)) {
       break;
      }
      $173 = $9;
      $174 = ((($173)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ((($175)) + 4|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==(0);
      if ($178) {
       $179 = $15;
       $180 = ((($179)) + 12|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)!=(0|0);
       if ($182) {
        $183 = $15;
        $184 = ((($183)) + 12|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = $9;
        $187 = ($185|0)!=($186|0);
        if ($187) {
         $188 = $15;
         $189 = ((($188)) + 12|0);
         $190 = HEAP32[$189>>2]|0;
         $191 = ((($190)) + 4|0);
         $192 = HEAP32[$191>>2]|0;
         $193 = $9;
         $194 = ((($193)) + 12|0);
         $195 = HEAP32[$194>>2]|0;
         $196 = ((($195)) + 4|0);
         $197 = HEAP32[$196>>2]|0;
         $198 = (($197) + ($192))|0;
         HEAP32[$196>>2] = $198;
        }
       }
       $199 = $15;
       $200 = ((($199)) + 24|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0);
       if ($202) {
        $203 = $11;
        $204 = (($203) - 1)|0;
        $11 = $204;
        $205 = $12;
        $206 = (($205) - 1)|0;
        $12 = $206;
        break;
       } else {
        $207 = $15;
        $208 = ((($207)) + 20|0);
        $209 = HEAP32[$208>>2]|0;
        $210 = $11;
        $211 = (($210) - ($209))|0;
        $11 = $211;
        $212 = $15;
        $213 = ((($212)) + 24|0);
        $214 = HEAP32[$213>>2]|0;
        $215 = $12;
        $216 = (($215) - ($214))|0;
        $12 = $216;
        break;
       }
      }
      $217 = $9;
      $218 = ((($217)) + 8|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = HEAP32[$219>>2]|0;
      $221 = ($220|0)==(0);
      if ($221) {
       $222 = $15;
       $223 = ((($222)) + 12|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($224|0)!=(0|0);
       if ($225) {
        $226 = $15;
        $227 = ((($226)) + 12|0);
        $228 = HEAP32[$227>>2]|0;
        $229 = $9;
        $230 = ($228|0)!=($229|0);
        if ($230) {
         $231 = $15;
         $232 = ((($231)) + 12|0);
         $233 = HEAP32[$232>>2]|0;
         $234 = ((($233)) + 4|0);
         $235 = HEAP32[$234>>2]|0;
         $236 = $9;
         $237 = ((($236)) + 12|0);
         $238 = HEAP32[$237>>2]|0;
         $239 = ((($238)) + 4|0);
         $240 = HEAP32[$239>>2]|0;
         $241 = (($240) + ($235))|0;
         HEAP32[$239>>2] = $241;
        }
       }
      }
      $242 = $15;
      $243 = $9;
      $244 = $13;
      $245 = $14;
      (_find_more_specific($242,$243,0,0,0,$244,$245)|0);
      $246 = $15;
      $247 = ((($246)) + 24|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = ($248|0)==(0);
      if ($249) {
       $250 = $11;
       $251 = (($250) - 1)|0;
       $11 = $251;
       $252 = $12;
       $253 = (($252) - 1)|0;
       $12 = $253;
       break;
      } else {
       $254 = $15;
       $255 = ((($254)) + 20|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = $11;
       $258 = (($257) - ($256))|0;
       $11 = $258;
       $259 = $15;
       $260 = ((($259)) + 24|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = $12;
       $263 = (($262) - ($261))|0;
       $12 = $263;
       break;
      }
     }
    }
    $264 = $15;
    $265 = $9;
    $266 = $10;
    $267 = $11;
    $268 = $12;
    $269 = $13;
    $270 = $14;
    (_find_more_specific($264,$265,$266,$267,$268,$269,$270)|0);
    $271 = $15;
    $272 = ((($271)) + 24|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = ($273|0)==(0);
    if ($274) {
     $275 = $11;
     $276 = (($275) - 1)|0;
     $11 = $276;
     $277 = $12;
     $278 = (($277) - 1)|0;
     $12 = $278;
     break;
    } else {
     $279 = $15;
     $280 = ((($279)) + 20|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = $11;
     $283 = (($282) - ($281))|0;
     $11 = $283;
     $284 = $15;
     $285 = ((($284)) + 24|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = $12;
     $288 = (($287) - ($286))|0;
     $12 = $288;
     break;
    }
   }
  } while(0);
  $289 = $15;
  $290 = ((($289)) + 4|0);
  $291 = HEAP32[$290>>2]|0;
  $15 = $291;
 }
 $7 = 0;
 $292 = $7;
 STACKTOP = sp;return ($292|0);
}
function _get_first_wildcard_reverse_depth($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = (_get_first_wildcard_location($6)|0);
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)==(-1);
 if ($9) {
  $1 = 0;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 }
 $10 = $3;
 $11 = ($10|0)==(0);
 if ($11) {
  $1 = 1;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 }
 $5 = 0;
 $12 = $3;
 $4 = $12;
 while(1) {
  $13 = $4;
  $14 = $2;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($13|0)<=($15|0);
  $17 = $2;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  if (!($16)) {
   break;
  }
  $20 = $4;
  $21 = $20<<1;
  $22 = (($21) + 1)|0;
  $23 = (($19) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $5;
   $27 = (($26) + 1)|0;
   $5 = $27;
  }
  $28 = $5;
  $29 = (($28) + 1)|0;
  $5 = $29;
  $30 = $4;
  $31 = (($30) + 1)|0;
  $4 = $31;
 }
 $32 = ((($19)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $5;
  $36 = (($35) + 1)|0;
  $5 = $36;
 }
 $37 = $5;
 $1 = $37;
 $38 = $1;
 STACKTOP = sp;return ($38|0);
}
function _find_more_specific_tail($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $8 = $11;
 while(1) {
  $12 = $8;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   break;
  }
  $14 = $8;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   $18 = $6;
   $19 = (($18) + 1)|0;
   $6 = $19;
   $20 = $7;
   $21 = (($20) + 1)|0;
   $7 = $21;
  } else {
   $22 = $8;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $6;
   $26 = (($25) + ($24))|0;
   $6 = $26;
   $27 = $8;
   $28 = ((($27)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $7;
   $31 = (($30) + ($29))|0;
   $7 = $31;
  }
  $32 = $6;
  $33 = $5;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($32|0)<($36|0);
  do {
   if ($37) {
    $38 = $8;
    $39 = $5;
    $40 = $6;
    $41 = $7;
    (_find_more_specific_tail($38,$39,$40,$41)|0);
    $42 = $8;
    $43 = ((($42)) + 24|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(0);
    if ($45) {
     $46 = $6;
     $47 = (($46) - 1)|0;
     $6 = $47;
     $48 = $7;
     $49 = (($48) - 1)|0;
     $7 = $49;
     break;
    } else {
     $50 = $8;
     $51 = ((($50)) + 20|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $6;
     $54 = (($53) - ($52))|0;
     $6 = $54;
     $55 = $8;
     $56 = ((($55)) + 24|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $7;
     $59 = (($58) - ($57))|0;
     $7 = $59;
     break;
    }
   } else {
    $60 = $7;
    $61 = $5;
    $62 = ((($61)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($63)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($60|0)>($65|0);
    $67 = $8;
    if ($66) {
     $68 = ((($67)) + 24|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(0);
     if ($70) {
      $71 = $6;
      $72 = (($71) - 1)|0;
      $6 = $72;
      $73 = $7;
      $74 = (($73) - 1)|0;
      $7 = $74;
      break;
     } else {
      $75 = $8;
      $76 = ((($75)) + 20|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = $6;
      $79 = (($78) - ($77))|0;
      $6 = $79;
      $80 = $8;
      $81 = ((($80)) + 24|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = $7;
      $84 = (($83) - ($82))|0;
      $7 = $84;
      break;
     }
    }
    $85 = ((($67)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)!=(0|0);
    if ($87) {
     $88 = $8;
     $89 = ((($88)) + 12|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $5;
     $92 = ($90|0)!=($91|0);
     if ($92) {
      $93 = $8;
      $94 = ((($93)) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ((($95)) + 4|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $5;
      $99 = ((($98)) + 12|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ((($100)) + 4|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (($102) + ($97))|0;
      HEAP32[$101>>2] = $103;
     }
    }
    $104 = $8;
    $105 = $5;
    $106 = $6;
    $107 = $7;
    (_find_more_specific_tail($104,$105,$106,$107)|0);
    $108 = $8;
    $109 = ((($108)) + 24|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110|0)==(0);
    if ($111) {
     $112 = $6;
     $113 = (($112) - 1)|0;
     $6 = $113;
     $114 = $7;
     $115 = (($114) - 1)|0;
     $7 = $115;
     break;
    } else {
     $116 = $8;
     $117 = ((($116)) + 20|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = $6;
     $120 = (($119) - ($118))|0;
     $6 = $120;
     $121 = $8;
     $122 = ((($121)) + 24|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $7;
     $125 = (($124) - ($123))|0;
     $7 = $125;
     break;
    }
   }
  } while(0);
  $126 = $8;
  $127 = ((($126)) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  $8 = $128;
 }
 STACKTOP = sp;return 0;
}
function _step_3_find_clusters_from_candidates($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0;
 $6 = 1;
 while(1) {
  $7 = $6;
  $8 = $1;
  $9 = ((($8)) + 96|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<=($10|0);
  if (!($11)) {
   break;
  }
  $12 = $1;
  $13 = ((($12)) + 172|0);
  $14 = $6;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $3 = $16;
  $5 = 0;
  while(1) {
   $17 = $3;
   $18 = ($17|0)!=(0|0);
   if (!($18)) {
    break;
   }
   $19 = $3;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $1;
   $23 = ((($22)) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($21>>>0)>=($24>>>0);
   if ($25) {
    $26 = $2;
    $27 = (($26) + 1)|0;
    $2 = $27;
    $28 = $3;
    $5 = $28;
    $29 = $3;
    $30 = ((($29)) + 28|0);
    $31 = HEAP32[$30>>2]|0;
    $3 = $31;
    continue;
   }
   $32 = $5;
   $33 = ($32|0)!=(0|0);
   $34 = $3;
   $35 = ((($34)) + 28|0);
   $36 = HEAP32[$35>>2]|0;
   if ($33) {
    $37 = $5;
    $38 = ((($37)) + 28|0);
    $$sink = $38;
   } else {
    $39 = $1;
    $40 = ((($39)) + 172|0);
    $41 = $6;
    $42 = (($40) + ($41<<2)|0);
    $$sink = $42;
   }
   HEAP32[$$sink>>2] = $36;
   $43 = $3;
   $44 = ((($43)) + 28|0);
   $45 = HEAP32[$44>>2]|0;
   $4 = $45;
   $46 = $3;
   $47 = ((($46)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   _free($48);
   $49 = $3;
   $50 = ((($49)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   _free($51);
   $52 = $3;
   _free($52);
   $53 = $4;
   $3 = $53;
  }
  $54 = $6;
  $55 = (($54) + 1)|0;
  $6 = $55;
 }
 $56 = $2;
 STACKTOP = sp;return ($56|0);
}
function _step_2_create_cluster_candidate_sketch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer = sp;
 $3 = sp + 48|0;
 $4 = sp + 16|0;
 $1 = $0;
 $5 = $1;
 _log_msg(2459,5,$5);
 $6 = $1;
 $7 = ((($6)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8<<2;
 $10 = (_malloc($9)|0);
 $11 = $1;
 $12 = ((($11)) + 2232|0);
 HEAP32[$12>>2] = $10;
 $13 = $1;
 $14 = ((($13)) + 2232|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 $17 = $1;
 if (!($16)) {
  _log_msg(2490,3,$17);
  _exit(1);
  // unreachable;
 }
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 $21 = $1;
 if ($20) {
  $23 = (_create_cluster_candidate_sketch_with_wfilter($21)|0);
  $2 = $23;
 } else {
  $22 = (_create_cluster_candidate_sketch($21)|0);
  $2 = $22;
 }
 $24 = $2;
 (_str_format_int_grouped($4,$24)|0);
 HEAP32[$vararg_buffer>>2] = $4;
 (_sprintf($3,2549,$vararg_buffer)|0);
 $25 = $1;
 _log_msg($3,6,$25);
 STACKTOP = sp;return;
}
function _create_cluster_candidate_sketch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5278000|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5278000|0);
 $vararg_buffer = sp;
 $7 = sp + 5277744|0;
 $8 = sp + 5267504|0;
 $9 = sp + 20528|0;
 $10 = sp + 48|0;
 $1 = $0;
 $4 = 0;
 while(1) {
  $16 = $4;
  $17 = $1;
  $18 = ((($17)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16>>>0)<($19>>>0);
  $21 = $1;
  if (!($20)) {
   break;
  }
  $22 = ((($21)) + 2232|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $4;
  $25 = (($23) + ($24<<2)|0);
  HEAP32[$25>>2] = 0;
  $26 = $4;
  $27 = (($26) + 1)|0;
  $4 = $27;
 }
 $28 = ((($21)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $3 = $29;
 while(1) {
  $30 = $3;
  $31 = ($30|0)!=(0|0);
  if (!($31)) {
   break;
  }
  $32 = $3;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_fopen($33,4411)|0);
  $2 = $34;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   while(1) {
    $39 = $2;
    $40 = (_fgets($8,10240,$39)|0);
    $41 = ($40|0)!=(0|0);
    if (!($41)) {
     break;
    }
    $42 = (_strlen($8)|0);
    $11 = $42;
    $43 = $11;
    $44 = (($43) - 1)|0;
    $45 = (($8) + ($44)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 << 24 >> 24;
    $48 = ($47|0)==(10);
    if ($48) {
     $49 = $11;
     $50 = (($49) - 1)|0;
     $51 = (($8) + ($50)|0);
     HEAP8[$51>>0] = 0;
    }
    $52 = $1;
    $53 = (_find_words($8,$9,$52)|0);
    $12 = $53;
    $13 = 0;
    HEAP8[$10>>0] = 0;
    $14 = 0;
    while(1) {
     $54 = $14;
     $55 = $12;
     $56 = ($54|0)<($55|0);
     if (!($56)) {
      break;
     }
     $57 = $14;
     $58 = (($9) + (($57*10248)|0)|0);
     $59 = $1;
     $60 = ((($59)) + 2228|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $1;
     $63 = ((($62)) + 84|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $1;
     $66 = ((($65)) + 2256|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (_find_elem($58,$61,$64,$67)|0);
     $15 = $68;
     $69 = $14;
     $70 = (($9) + (($69*10248)|0)|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71 << 24 >> 24;
     $73 = ($72|0)!=(0);
     $74 = $15;
     $75 = ($74|0)!=(0|0);
     $or$cond = $73 & $75;
     if ($or$cond) {
      $76 = $14;
      $77 = (($9) + (($76*10248)|0)|0);
      (_strcat($10,$77)|0);
      $78 = (_strlen($10)|0);
      $11 = $78;
      $79 = $11;
      $80 = (($10) + ($79)|0);
      HEAP8[$80>>0] = 10;
      $81 = $11;
      $82 = (($81) + 1)|0;
      $83 = (($10) + ($82)|0);
      HEAP8[$83>>0] = 0;
      $84 = $14;
      $85 = (($84) + 1)|0;
      $13 = $85;
     }
     $86 = $14;
     $87 = (($86) + 1)|0;
     $14 = $87;
    }
    $88 = $13;
    $89 = ($88|0)!=(0);
    if (!($89)) {
     continue;
    }
    $90 = $1;
    $91 = ((($90)) + 76|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $1;
    $94 = ((($93)) + 2240|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (_str2hash($10,$92,$95)|0);
    $5 = $96;
    $97 = $1;
    $98 = ((($97)) + 2232|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $5;
    $101 = (($99) + ($100<<2)|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + 1)|0;
    HEAP32[$101>>2] = $103;
   }
   $104 = $2;
   (_fclose($104)|0);
  } else {
   $36 = $3;
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$vararg_buffer>>2] = $37;
   (_sprintf($7,4413,$vararg_buffer)|0);
   $38 = $1;
   _log_msg($7,3,$38);
  }
  $105 = $3;
  $106 = ((($105)) + 8|0);
  $107 = HEAP32[$106>>2]|0;
  $3 = $107;
 }
 $6 = 0;
 $4 = 0;
 while(1) {
  $108 = $4;
  $109 = $1;
  $110 = ((($109)) + 76|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($108>>>0)<($111>>>0);
  if (!($112)) {
   break;
  }
  $113 = $1;
  $114 = ((($113)) + 2232|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $4;
  $117 = (($115) + ($116<<2)|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $1;
  $120 = ((($119)) + 72|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($118>>>0)>=($121>>>0);
  if ($122) {
   $123 = $6;
   $124 = (($123) + 1)|0;
   $6 = $124;
  }
  $125 = $4;
  $126 = (($125) + 1)|0;
  $4 = $126;
 }
 $127 = $6;
 STACKTOP = sp;return ($127|0);
}
function _create_cluster_candidate_sketch_with_wfilter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5288256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5288256|0);
 $vararg_buffer = sp;
 $7 = sp + 5287992|0;
 $8 = sp + 5277752|0;
 $9 = sp + 30776|0;
 $10 = sp + 10296|0;
 $16 = sp + 48|0;
 $1 = $0;
 HEAP8[$16>>0] = 0;
 $4 = 0;
 while(1) {
  $17 = $4;
  $18 = $1;
  $19 = ((($18)) + 76|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17>>>0)<($20>>>0);
  $22 = $1;
  if (!($21)) {
   break;
  }
  $23 = ((($22)) + 2232|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $4;
  $26 = (($24) + ($25<<2)|0);
  HEAP32[$26>>2] = 0;
  $27 = $4;
  $28 = (($27) + 1)|0;
  $4 = $28;
 }
 $29 = ((($22)) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 $3 = $30;
 while(1) {
  $31 = $3;
  $32 = ($31|0)!=(0|0);
  if (!($32)) {
   break;
  }
  $33 = $3;
  $34 = HEAP32[$33>>2]|0;
  $35 = (_fopen($34,4411)|0);
  $2 = $35;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   while(1) {
    $40 = $2;
    $41 = (_fgets($8,10240,$40)|0);
    $42 = ($41|0)!=(0|0);
    if (!($42)) {
     break;
    }
    $43 = (_strlen($8)|0);
    $11 = $43;
    $44 = $11;
    $45 = (($44) - 1)|0;
    $46 = (($8) + ($45)|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47 << 24 >> 24;
    $49 = ($48|0)==(10);
    if ($49) {
     $50 = $11;
     $51 = (($50) - 1)|0;
     $52 = (($8) + ($51)|0);
     HEAP8[$52>>0] = 0;
    }
    $53 = $1;
    $54 = (_find_words($8,$9,$53)|0);
    $12 = $54;
    $13 = 0;
    HEAP8[$10>>0] = 0;
    $14 = 0;
    while(1) {
     $55 = $14;
     $56 = $12;
     $57 = ($55|0)<($56|0);
     if (!($57)) {
      break;
     }
     $58 = $14;
     $59 = (($9) + (($58*10248)|0)|0);
     $60 = $1;
     $61 = ((($60)) + 2228|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $1;
     $64 = ((($63)) + 84|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $1;
     $67 = ((($66)) + 2256|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (_find_elem($59,$62,$65,$68)|0);
     $15 = $69;
     $70 = $14;
     $71 = (($9) + (($70*10248)|0)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72 << 24 >> 24;
     $74 = ($73|0)!=(0);
     $75 = $15;
     $76 = ($75|0)!=(0|0);
     $or$cond = $74 & $76;
     if ($or$cond) {
      $77 = $14;
      $78 = (($9) + (($77*10248)|0)|0);
      (_strcat($10,$78)|0);
      $79 = (_strlen($10)|0);
      $11 = $79;
      $80 = $11;
      $81 = (($10) + ($80)|0);
      HEAP8[$81>>0] = 10;
      $82 = $11;
      $83 = (($82) + 1)|0;
      $84 = (($10) + ($83)|0);
      HEAP8[$84>>0] = 0;
      $85 = $14;
      $86 = (($85) + 1)|0;
      $13 = $86;
     } else {
      $87 = $14;
      $88 = (($9) + (($87*10248)|0)|0);
      $89 = $1;
      $90 = (_is_word_filtered($88,$89)|0);
      $91 = ($90|0)!=(0);
      if ($91) {
       $92 = $14;
       $93 = (($9) + (($92*10248)|0)|0);
       $94 = $1;
       $95 = (_word_search_replace($93,$94)|0);
       (_strcpy($16,$95)|0);
       $96 = $1;
       $97 = ((($96)) + 2228|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = $1;
       $100 = ((($99)) + 84|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = $1;
       $103 = ((($102)) + 2256|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = (_find_elem($16,$98,$101,$104)|0);
       $15 = $105;
       $106 = $14;
       $107 = (($9) + (($106*10248)|0)|0);
       $108 = HEAP8[$107>>0]|0;
       $109 = $108 << 24 >> 24;
       $110 = ($109|0)!=(0);
       $111 = $15;
       $112 = ($111|0)!=(0|0);
       $or$cond3 = $110 & $112;
       if ($or$cond3) {
        (_strcat($10,$16)|0);
        $113 = (_strlen($10)|0);
        $11 = $113;
        $114 = $11;
        $115 = (($10) + ($114)|0);
        HEAP8[$115>>0] = 10;
        $116 = $11;
        $117 = (($116) + 1)|0;
        $118 = (($10) + ($117)|0);
        HEAP8[$118>>0] = 0;
        $119 = $14;
        $120 = (($119) + 1)|0;
        $13 = $120;
       }
      }
     }
     $121 = $14;
     $122 = (($121) + 1)|0;
     $14 = $122;
    }
    $123 = $13;
    $124 = ($123|0)!=(0);
    if (!($124)) {
     continue;
    }
    $125 = $1;
    $126 = ((($125)) + 76|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $1;
    $129 = ((($128)) + 2240|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (_str2hash($10,$127,$130)|0);
    $5 = $131;
    $132 = $1;
    $133 = ((($132)) + 2232|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $5;
    $136 = (($134) + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($137) + 1)|0;
    HEAP32[$136>>2] = $138;
   }
   $139 = $2;
   (_fclose($139)|0);
  } else {
   $37 = $3;
   $38 = HEAP32[$37>>2]|0;
   HEAP32[$vararg_buffer>>2] = $38;
   (_sprintf($7,4413,$vararg_buffer)|0);
   $39 = $1;
   _log_msg($7,3,$39);
  }
  $140 = $3;
  $141 = ((($140)) + 8|0);
  $142 = HEAP32[$141>>2]|0;
  $3 = $142;
 }
 $6 = 0;
 $4 = 0;
 while(1) {
  $143 = $4;
  $144 = $1;
  $145 = ((($144)) + 76|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($143>>>0)<($146>>>0);
  if (!($147)) {
   break;
  }
  $148 = $1;
  $149 = ((($148)) + 2232|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $4;
  $152 = (($150) + ($151<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $1;
  $155 = ((($154)) + 72|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ($153>>>0)>=($156>>>0);
  if ($157) {
   $158 = $6;
   $159 = (($158) + 1)|0;
   $6 = $159;
  }
  $160 = $4;
  $161 = (($160) + 1)|0;
  $4 = $161;
 }
 $162 = $6;
 STACKTOP = sp;return ($162|0);
}
function _step_2_find_cluster_candidates($0) {
 $0 = $0|0;
 var $$sink3$sink = 0, $$sink5$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer = sp;
 $2 = sp + 48|0;
 $3 = sp + 16|0;
 $1 = $0;
 $5 = $1;
 _log_msg(2602,5,$5);
 $6 = $1;
 $7 = ((($6)) + 2248|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $10 = $1;
  $11 = ((($10)) + 2268|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12*100)|0;
  $14 = $1;
  $15 = ((($14)) + 2248|0);
  HEAP32[$15>>2] = $13;
 }
 $16 = $1;
 $17 = ((($16)) + 2248|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18<<2;
 $20 = (_malloc($19)|0);
 $21 = $1;
 $22 = ((($21)) + 2224|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $24 = ((($23)) + 2224|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 $27 = $1;
 if (!($26)) {
  _log_msg(2632,3,$27);
  _exit(1);
  // unreachable;
 }
 $28 = ((($27)) + 40|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 != 0.0;
 $31 = $1;
 do {
  if ($30) {
   $32 = ((($31)) + 2268|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 1)|0;
   $35 = $1;
   $36 = ((($35)) + 4892|0);
   HEAP32[$36>>2] = $34;
   $37 = $1;
   $38 = ((($37)) + 4892|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39<<2;
   $41 = $1;
   $42 = ((($41)) + 4892|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = Math_imul($40, $43)|0;
   $45 = (_malloc($44)|0);
   $46 = $1;
   $47 = ((($46)) + 6948|0);
   HEAP32[$47>>2] = $45;
   $48 = $1;
   $49 = ((($48)) + 6948|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)!=(0|0);
   if (!($51)) {
    $52 = $1;
    _log_msg(2632,3,$52);
    _exit(1);
    // unreachable;
   }
   $4 = 0;
   while(1) {
    $53 = $4;
    $54 = $1;
    $55 = ((($54)) + 4892|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $1;
    $58 = ((($57)) + 4892|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = Math_imul($56, $59)|0;
    $61 = ($53>>>0)<($60>>>0);
    $62 = $1;
    if (!($61)) {
     break;
    }
    $63 = ((($62)) + 6948|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $4;
    $66 = (($64) + ($65<<2)|0);
    HEAP32[$66>>2] = 0;
    $67 = $4;
    $68 = (($67) + 1)|0;
    $4 = $68;
   }
   $69 = ((($62)) + 20|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)!=(0|0);
   $72 = $1;
   if ($71) {
    $75 = (_create_cluster_candidates_word_dep_with_filter($72)|0);
    $76 = $1;
    $$sink3$sink = $75;$$sink5$sink = $76;
    break;
   } else {
    $73 = (_create_cluster_candidates_word_dep($72)|0);
    $74 = $1;
    $$sink3$sink = $73;$$sink5$sink = $74;
    break;
   }
  } else {
   $77 = ((($31)) + 20|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)!=(0|0);
   $80 = $1;
   if ($79) {
    $83 = (_create_cluster_candidates_with_wfilter($80)|0);
    $84 = $1;
    $$sink3$sink = $83;$$sink5$sink = $84;
    break;
   } else {
    $81 = (_create_cluster_candidates($80)|0);
    $82 = $1;
    $$sink3$sink = $81;$$sink5$sink = $82;
    break;
   }
  }
 } while(0);
 $85 = ((($$sink5$sink)) + 2260|0);
 HEAP32[$85>>2] = $$sink3$sink;
 $86 = $1;
 $87 = ((($86)) + 2260|0);
 $88 = HEAP32[$87>>2]|0;
 (_str_format_int_grouped($3,$88)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 (_sprintf($2,2693,$vararg_buffer)|0);
 $89 = $1;
 _log_msg($2,6,$89);
 STACKTOP = sp;return;
}
function _create_cluster_candidates_word_dep($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5282128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5282128|0);
 $vararg_buffer = sp;
 $6 = sp + 5281872|0;
 $7 = sp + 5271632|0;
 $8 = sp + 24656|0;
 $9 = sp + 4176|0;
 $10 = sp + 2100|0;
 $18 = sp + 20|0;
 $1 = $0;
 $4 = 0;
 while(1) {
  $23 = $4;
  $24 = $1;
  $25 = ((($24)) + 2248|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $1;
  $29 = ((($28)) + 2224|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $4;
  $32 = (($30) + ($31<<2)|0);
  HEAP32[$32>>2] = 0;
  $33 = $4;
  $34 = (($33) + 1)|0;
  $4 = $34;
 }
 $20 = 0;
 while(1) {
  $35 = $20;
  $36 = $1;
  $37 = ((($36)) + 4892|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $21 = 0;
  while(1) {
   $40 = $21;
   $41 = $1;
   $42 = ((($41)) + 4892|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($40>>>0)<($43>>>0);
   if (!($44)) {
    break;
   }
   $45 = $1;
   $46 = ((($45)) + 6948|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $20;
   $49 = $1;
   $50 = ((($49)) + 4892|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = Math_imul($48, $51)|0;
   $53 = $21;
   $54 = (($52) + ($53))|0;
   $55 = (($47) + ($54<<2)|0);
   HEAP32[$55>>2] = 0;
   $56 = $21;
   $57 = (($56) + 1)|0;
   $21 = $57;
  }
  $58 = $20;
  $59 = (($58) + 1)|0;
  $20 = $59;
 }
 $60 = $1;
 $61 = ((($60)) + 64|0);
 $62 = HEAP32[$61>>2]|0;
 $3 = $62;
 while(1) {
  $63 = $3;
  $64 = ($63|0)!=(0|0);
  if (!($64)) {
   break;
  }
  $65 = $3;
  $66 = HEAP32[$65>>2]|0;
  $67 = (_fopen($66,4411)|0);
  $2 = $67;
  $68 = ($67|0)!=(0|0);
  if ($68) {
   while(1) {
    $72 = $2;
    $73 = (_fgets($7,10240,$72)|0);
    $74 = ($73|0)!=(0|0);
    if (!($74)) {
     break;
    }
    $75 = (_strlen($7)|0);
    $11 = $75;
    $76 = $11;
    $77 = (($76) - 1)|0;
    $78 = (($7) + ($77)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79 << 24 >> 24;
    $81 = ($80|0)==(10);
    if ($81) {
     $82 = $11;
     $83 = (($82) - 1)|0;
     $84 = (($7) + ($83)|0);
     HEAP8[$84>>0] = 0;
    }
    $85 = $1;
    $86 = (_find_words($7,$8,$85)|0);
    $12 = $86;
    HEAP8[$9>>0] = 0;
    $14 = 0;
    $15 = 0;
    $22 = 0;
    $13 = 0;
    while(1) {
     $87 = $13;
     $88 = $12;
     $89 = ($87|0)<($88|0);
     if (!($89)) {
      break;
     }
     $90 = $13;
     $91 = (($8) + (($90*10248)|0)|0);
     $92 = $1;
     $93 = ((($92)) + 2228|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $1;
     $96 = ((($95)) + 84|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $1;
     $99 = ((($98)) + 2256|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (_find_elem($91,$94,$97,$100)|0);
     $16 = $101;
     $102 = $13;
     $103 = (($8) + (($102*10248)|0)|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = $104 << 24 >> 24;
     $106 = ($105|0)!=(0);
     $107 = $16;
     $108 = ($107|0)!=(0|0);
     $or$cond = $106 & $108;
     do {
      if ($or$cond) {
       $109 = $13;
       $110 = (($8) + (($109*10248)|0)|0);
       (_strcat($9,$110)|0);
       $111 = (_strlen($9)|0);
       $11 = $111;
       $112 = $11;
       $113 = (($9) + ($112)|0);
       HEAP8[$113>>0] = 10;
       $114 = $11;
       $115 = (($114) + 1)|0;
       $116 = (($9) + ($115)|0);
       HEAP8[$116>>0] = 0;
       $117 = $14;
       $118 = (($117) + 1)|0;
       $14 = $118;
       $119 = $16;
       $120 = $14;
       $121 = (($18) + ($120<<2)|0);
       HEAP32[$121>>2] = $119;
       $122 = $15;
       $123 = $14;
       $124 = (($10) + ($123<<2)|0);
       HEAP32[$124>>2] = $122;
       $15 = 0;
       $125 = $22;
       $126 = (($125) + 1)|0;
       $22 = $126;
       $127 = $1;
       $128 = ((($127)) + 4896|0);
       $129 = $16;
       $130 = ((($129)) + 8|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = $22;
       $133 = (_is_word_repeated($128,$131,$132)|0);
       $134 = ($133|0)!=(0);
       if ($134) {
        $135 = $22;
        $136 = (($135) + -1)|0;
        $22 = $136;
        break;
       } else {
        $137 = $16;
        $138 = ((($137)) + 8|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = $1;
        $141 = ((($140)) + 4896|0);
        $142 = $22;
        $143 = (($141) + ($142<<2)|0);
        HEAP32[$143>>2] = $139;
        break;
       }
      } else {
       $144 = $15;
       $145 = (($144) + 1)|0;
       $15 = $145;
      }
     } while(0);
     $146 = $13;
     $147 = (($146) + 1)|0;
     $13 = $147;
    }
    $148 = $15;
    HEAP32[$10>>2] = $148;
    $149 = $14;
    $150 = ($149|0)!=(0);
    if (!($150)) {
     continue;
    }
    $151 = $1;
    $152 = ((($151)) + 4896|0);
    $153 = $22;
    $154 = $1;
    _update_word_dep_matrix($152,$153,$154);
    $155 = $1;
    $156 = ((($155)) + 76|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)!=(0);
    if ($158) {
     $159 = $1;
     $160 = ((($159)) + 76|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = $1;
     $163 = ((($162)) + 2240|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = (_str2hash($9,$161,$164)|0);
     $5 = $165;
     $166 = $1;
     $167 = ((($166)) + 2232|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = $5;
     $170 = (($168) + ($169<<2)|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $1;
     $173 = ((($172)) + 72|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = ($171>>>0)<($174>>>0);
     if ($175) {
      continue;
     }
    }
    $176 = $1;
    $177 = ((($176)) + 2224|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = $1;
    $180 = ((($179)) + 2248|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = $1;
    $183 = ((($182)) + 2244|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = $1;
    $186 = (_add_elem($9,$178,$181,$184,$185)|0);
    $17 = $186;
    $187 = $17;
    $188 = ((($187)) + 4|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($189|0)==(1);
    if ($190) {
     $191 = $19;
     $192 = (($191) + 1)|0;
     $19 = $192;
     $193 = $17;
     $194 = $14;
     $195 = $1;
     (_create_cluster_instance($193,$194,$10,$18,$195)|0);
    }
    $196 = $17;
    $197 = $14;
    $198 = $1;
    _adjust_cluster_instance($196,$197,$10,$198);
   }
   $199 = $2;
   (_fclose($199)|0);
  } else {
   $69 = $3;
   $70 = HEAP32[$69>>2]|0;
   HEAP32[$vararg_buffer>>2] = $70;
   (_sprintf($6,4413,$vararg_buffer)|0);
   $71 = $1;
   _log_msg($6,3,$71);
  }
  $200 = $3;
  $201 = ((($200)) + 8|0);
  $202 = HEAP32[$201>>2]|0;
  $3 = $202;
 }
 $203 = $19;
 STACKTOP = sp;return ($203|0);
}
function _create_cluster_candidates_word_dep_with_filter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5292384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5292384|0);
 $vararg_buffer = sp;
 $6 = sp + 5292120|0;
 $7 = sp + 5281880|0;
 $8 = sp + 34904|0;
 $9 = sp + 14424|0;
 $10 = sp + 2100|0;
 $18 = sp + 20|0;
 $20 = sp + 4176|0;
 $1 = $0;
 HEAP8[$20>>0] = 0;
 $4 = 0;
 while(1) {
  $24 = $4;
  $25 = $1;
  $26 = ((($25)) + 2248|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = $1;
  $30 = ((($29)) + 2224|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $4;
  $33 = (($31) + ($32<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = $4;
  $35 = (($34) + 1)|0;
  $4 = $35;
 }
 $21 = 0;
 while(1) {
  $36 = $21;
  $37 = $1;
  $38 = ((($37)) + 4892|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($36>>>0)<($39>>>0);
  if (!($40)) {
   break;
  }
  $22 = 0;
  while(1) {
   $41 = $22;
   $42 = $1;
   $43 = ((($42)) + 4892|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41>>>0)<($44>>>0);
   if (!($45)) {
    break;
   }
   $46 = $1;
   $47 = ((($46)) + 6948|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $21;
   $50 = $1;
   $51 = ((($50)) + 4892|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = Math_imul($49, $52)|0;
   $54 = $22;
   $55 = (($53) + ($54))|0;
   $56 = (($48) + ($55<<2)|0);
   HEAP32[$56>>2] = 0;
   $57 = $22;
   $58 = (($57) + 1)|0;
   $22 = $58;
  }
  $59 = $21;
  $60 = (($59) + 1)|0;
  $21 = $60;
 }
 $61 = $1;
 $62 = ((($61)) + 64|0);
 $63 = HEAP32[$62>>2]|0;
 $3 = $63;
 while(1) {
  $64 = $3;
  $65 = ($64|0)!=(0|0);
  if (!($65)) {
   break;
  }
  $66 = $3;
  $67 = HEAP32[$66>>2]|0;
  $68 = (_fopen($67,4411)|0);
  $2 = $68;
  $69 = ($68|0)!=(0|0);
  if ($69) {
   while(1) {
    $73 = $2;
    $74 = (_fgets($7,10240,$73)|0);
    $75 = ($74|0)!=(0|0);
    if (!($75)) {
     break;
    }
    $76 = (_strlen($7)|0);
    $11 = $76;
    $77 = $11;
    $78 = (($77) - 1)|0;
    $79 = (($7) + ($78)|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $80 << 24 >> 24;
    $82 = ($81|0)==(10);
    if ($82) {
     $83 = $11;
     $84 = (($83) - 1)|0;
     $85 = (($7) + ($84)|0);
     HEAP8[$85>>0] = 0;
    }
    $86 = $1;
    $87 = (_find_words($7,$8,$86)|0);
    $12 = $87;
    HEAP8[$9>>0] = 0;
    $14 = 0;
    $15 = 0;
    $23 = 0;
    $13 = 0;
    while(1) {
     $88 = $13;
     $89 = $12;
     $90 = ($88|0)<($89|0);
     if (!($90)) {
      break;
     }
     $91 = $13;
     $92 = (($8) + (($91*10248)|0)|0);
     $93 = $1;
     $94 = ((($93)) + 2228|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $1;
     $97 = ((($96)) + 84|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $1;
     $100 = ((($99)) + 2256|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (_find_elem($92,$95,$98,$101)|0);
     $16 = $102;
     $103 = $13;
     $104 = (($8) + (($103*10248)|0)|0);
     $105 = HEAP8[$104>>0]|0;
     $106 = $105 << 24 >> 24;
     $107 = ($106|0)!=(0);
     $108 = $16;
     $109 = ($108|0)!=(0|0);
     $or$cond = $107 & $109;
     do {
      if ($or$cond) {
       $110 = $13;
       $111 = (($8) + (($110*10248)|0)|0);
       (_strcat($9,$111)|0);
       $112 = (_strlen($9)|0);
       $11 = $112;
       $113 = $11;
       $114 = (($9) + ($113)|0);
       HEAP8[$114>>0] = 10;
       $115 = $11;
       $116 = (($115) + 1)|0;
       $117 = (($9) + ($116)|0);
       HEAP8[$117>>0] = 0;
       $118 = $14;
       $119 = (($118) + 1)|0;
       $14 = $119;
       $120 = $16;
       $121 = $14;
       $122 = (($18) + ($121<<2)|0);
       HEAP32[$122>>2] = $120;
       $123 = $15;
       $124 = $14;
       $125 = (($10) + ($124<<2)|0);
       HEAP32[$125>>2] = $123;
       $15 = 0;
       $126 = $23;
       $127 = (($126) + 1)|0;
       $23 = $127;
       $128 = $1;
       $129 = ((($128)) + 4896|0);
       $130 = $16;
       $131 = ((($130)) + 8|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = $23;
       $134 = (_is_word_repeated($129,$132,$133)|0);
       $135 = ($134|0)!=(0);
       if ($135) {
        $136 = $23;
        $137 = (($136) + -1)|0;
        $23 = $137;
        break;
       } else {
        $138 = $16;
        $139 = ((($138)) + 8|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = $1;
        $142 = ((($141)) + 4896|0);
        $143 = $23;
        $144 = (($142) + ($143<<2)|0);
        HEAP32[$144>>2] = $140;
        break;
       }
      } else {
       $145 = $13;
       $146 = (($8) + (($145*10248)|0)|0);
       $147 = $1;
       $148 = (_is_word_filtered($146,$147)|0);
       $149 = ($148|0)!=(0);
       if (!($149)) {
        $206 = $15;
        $207 = (($206) + 1)|0;
        $15 = $207;
        break;
       }
       $150 = $13;
       $151 = (($8) + (($150*10248)|0)|0);
       $152 = $1;
       $153 = (_word_search_replace($151,$152)|0);
       (_strcpy($20,$153)|0);
       $154 = $1;
       $155 = ((($154)) + 2228|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = $1;
       $158 = ((($157)) + 84|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = $1;
       $161 = ((($160)) + 2256|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = (_find_elem($20,$156,$159,$162)|0);
       $16 = $163;
       $164 = $13;
       $165 = (($8) + (($164*10248)|0)|0);
       $166 = HEAP8[$165>>0]|0;
       $167 = $166 << 24 >> 24;
       $168 = ($167|0)!=(0);
       $169 = $16;
       $170 = ($169|0)!=(0|0);
       $or$cond3 = $168 & $170;
       if (!($or$cond3)) {
        $204 = $15;
        $205 = (($204) + 1)|0;
        $15 = $205;
        break;
       }
       (_strcat($9,$20)|0);
       $171 = (_strlen($9)|0);
       $11 = $171;
       $172 = $11;
       $173 = (($9) + ($172)|0);
       HEAP8[$173>>0] = 10;
       $174 = $11;
       $175 = (($174) + 1)|0;
       $176 = (($9) + ($175)|0);
       HEAP8[$176>>0] = 0;
       $177 = $14;
       $178 = (($177) + 1)|0;
       $14 = $178;
       $179 = $16;
       $180 = $14;
       $181 = (($18) + ($180<<2)|0);
       HEAP32[$181>>2] = $179;
       $182 = $15;
       $183 = $14;
       $184 = (($10) + ($183<<2)|0);
       HEAP32[$184>>2] = $182;
       $15 = 0;
       $185 = $23;
       $186 = (($185) + 1)|0;
       $23 = $186;
       $187 = $1;
       $188 = ((($187)) + 4896|0);
       $189 = $16;
       $190 = ((($189)) + 8|0);
       $191 = HEAP32[$190>>2]|0;
       $192 = $23;
       $193 = (_is_word_repeated($188,$191,$192)|0);
       $194 = ($193|0)!=(0);
       if ($194) {
        $195 = $23;
        $196 = (($195) + -1)|0;
        $23 = $196;
        break;
       } else {
        $197 = $16;
        $198 = ((($197)) + 8|0);
        $199 = HEAP32[$198>>2]|0;
        $200 = $1;
        $201 = ((($200)) + 4896|0);
        $202 = $23;
        $203 = (($201) + ($202<<2)|0);
        HEAP32[$203>>2] = $199;
        break;
       }
      }
     } while(0);
     $208 = $13;
     $209 = (($208) + 1)|0;
     $13 = $209;
    }
    $210 = $15;
    HEAP32[$10>>2] = $210;
    $211 = $14;
    $212 = ($211|0)!=(0);
    if (!($212)) {
     continue;
    }
    $213 = $1;
    $214 = ((($213)) + 4896|0);
    $215 = $23;
    $216 = $1;
    _update_word_dep_matrix($214,$215,$216);
    $217 = $1;
    $218 = ((($217)) + 76|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ($219|0)!=(0);
    if ($220) {
     $221 = $1;
     $222 = ((($221)) + 76|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = $1;
     $225 = ((($224)) + 2240|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = (_str2hash($9,$223,$226)|0);
     $5 = $227;
     $228 = $1;
     $229 = ((($228)) + 2232|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $5;
     $232 = (($230) + ($231<<2)|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = $1;
     $235 = ((($234)) + 72|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = ($233>>>0)<($236>>>0);
     if ($237) {
      continue;
     }
    }
    $238 = $1;
    $239 = ((($238)) + 2224|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = $1;
    $242 = ((($241)) + 2248|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = $1;
    $245 = ((($244)) + 2244|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = $1;
    $248 = (_add_elem($9,$240,$243,$246,$247)|0);
    $17 = $248;
    $249 = $17;
    $250 = ((($249)) + 4|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ($251|0)==(1);
    if ($252) {
     $253 = $19;
     $254 = (($253) + 1)|0;
     $19 = $254;
     $255 = $17;
     $256 = $14;
     $257 = $1;
     (_create_cluster_instance($255,$256,$10,$18,$257)|0);
    }
    $258 = $17;
    $259 = $14;
    $260 = $1;
    _adjust_cluster_instance($258,$259,$10,$260);
   }
   $261 = $2;
   (_fclose($261)|0);
  } else {
   $70 = $3;
   $71 = HEAP32[$70>>2]|0;
   HEAP32[$vararg_buffer>>2] = $71;
   (_sprintf($6,2781,$vararg_buffer)|0);
   $72 = $1;
   _log_msg($6,3,$72);
  }
  $262 = $3;
  $263 = ((($262)) + 8|0);
  $264 = HEAP32[$263>>2]|0;
  $3 = $264;
 }
 $265 = $19;
 STACKTOP = sp;return ($265|0);
}
function _create_cluster_candidates($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5282112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5282112|0);
 $vararg_buffer = sp;
 $6 = sp + 5281856|0;
 $7 = sp + 5271616|0;
 $8 = sp + 24640|0;
 $9 = sp + 4160|0;
 $10 = sp + 2088|0;
 $18 = sp + 8|0;
 $1 = $0;
 $4 = 0;
 while(1) {
  $20 = $4;
  $21 = $1;
  $22 = ((($21)) + 2248|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20>>>0)<($23>>>0);
  $25 = $1;
  if (!($24)) {
   break;
  }
  $26 = ((($25)) + 2224|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $4;
  $29 = (($27) + ($28<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = $4;
  $31 = (($30) + 1)|0;
  $4 = $31;
 }
 $32 = ((($25)) + 64|0);
 $33 = HEAP32[$32>>2]|0;
 $3 = $33;
 while(1) {
  $34 = $3;
  $35 = ($34|0)!=(0|0);
  if (!($35)) {
   break;
  }
  $36 = $3;
  $37 = HEAP32[$36>>2]|0;
  $38 = (_fopen($37,4411)|0);
  $2 = $38;
  $39 = ($38|0)!=(0|0);
  if ($39) {
   while(1) {
    $43 = $2;
    $44 = (_fgets($7,10240,$43)|0);
    $45 = ($44|0)!=(0|0);
    if (!($45)) {
     break;
    }
    $46 = (_strlen($7)|0);
    $11 = $46;
    $47 = $11;
    $48 = (($47) - 1)|0;
    $49 = (($7) + ($48)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 << 24 >> 24;
    $52 = ($51|0)==(10);
    if ($52) {
     $53 = $11;
     $54 = (($53) - 1)|0;
     $55 = (($7) + ($54)|0);
     HEAP8[$55>>0] = 0;
    }
    $56 = $1;
    $57 = (_find_words($7,$8,$56)|0);
    $12 = $57;
    HEAP8[$9>>0] = 0;
    $14 = 0;
    $15 = 0;
    $13 = 0;
    while(1) {
     $58 = $13;
     $59 = $12;
     $60 = ($58|0)<($59|0);
     if (!($60)) {
      break;
     }
     $61 = $13;
     $62 = (($8) + (($61*10248)|0)|0);
     $63 = $1;
     $64 = ((($63)) + 2228|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $1;
     $67 = ((($66)) + 84|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $1;
     $70 = ((($69)) + 2256|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (_find_elem($62,$65,$68,$71)|0);
     $16 = $72;
     $73 = $13;
     $74 = (($8) + (($73*10248)|0)|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75 << 24 >> 24;
     $77 = ($76|0)!=(0);
     $78 = $16;
     $79 = ($78|0)!=(0|0);
     $or$cond = $77 & $79;
     if ($or$cond) {
      $80 = $13;
      $81 = (($8) + (($80*10248)|0)|0);
      (_strcat($9,$81)|0);
      $82 = (_strlen($9)|0);
      $11 = $82;
      $83 = $11;
      $84 = (($9) + ($83)|0);
      HEAP8[$84>>0] = 10;
      $85 = $11;
      $86 = (($85) + 1)|0;
      $87 = (($9) + ($86)|0);
      HEAP8[$87>>0] = 0;
      $88 = $14;
      $89 = (($88) + 1)|0;
      $14 = $89;
      $90 = $16;
      $91 = $14;
      $92 = (($18) + ($91<<2)|0);
      HEAP32[$92>>2] = $90;
      $93 = $15;
      $94 = $14;
      $95 = (($10) + ($94<<2)|0);
      HEAP32[$95>>2] = $93;
      $15 = 0;
     } else {
      $96 = $15;
      $97 = (($96) + 1)|0;
      $15 = $97;
     }
     $98 = $13;
     $99 = (($98) + 1)|0;
     $13 = $99;
    }
    $100 = $15;
    HEAP32[$10>>2] = $100;
    $101 = $14;
    $102 = ($101|0)!=(0);
    if (!($102)) {
     continue;
    }
    $103 = $1;
    $104 = ((($103)) + 76|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($105|0)!=(0);
    if ($106) {
     $107 = $1;
     $108 = ((($107)) + 76|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = $1;
     $111 = ((($110)) + 2240|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = (_str2hash($9,$109,$112)|0);
     $5 = $113;
     $114 = $1;
     $115 = ((($114)) + 2232|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $5;
     $118 = (($116) + ($117<<2)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = $1;
     $121 = ((($120)) + 72|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ($119>>>0)<($122>>>0);
     if ($123) {
      continue;
     }
    }
    $124 = $1;
    $125 = ((($124)) + 2224|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $1;
    $128 = ((($127)) + 2248|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $1;
    $131 = ((($130)) + 2244|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $1;
    $134 = (_add_elem($9,$126,$129,$132,$133)|0);
    $17 = $134;
    $135 = $17;
    $136 = ((($135)) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ($137|0)==(1);
    if ($138) {
     $139 = $19;
     $140 = (($139) + 1)|0;
     $19 = $140;
     $141 = $17;
     $142 = $14;
     $143 = $1;
     (_create_cluster_instance($141,$142,$10,$18,$143)|0);
    }
    $144 = $17;
    $145 = $14;
    $146 = $1;
    _adjust_cluster_instance($144,$145,$10,$146);
   }
   $147 = $2;
   (_fclose($147)|0);
  } else {
   $40 = $3;
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$vararg_buffer>>2] = $41;
   (_sprintf($6,4413,$vararg_buffer)|0);
   $42 = $1;
   _log_msg($6,3,$42);
  }
  $148 = $3;
  $149 = ((($148)) + 8|0);
  $150 = HEAP32[$149>>2]|0;
  $3 = $150;
 }
 $151 = $19;
 STACKTOP = sp;return ($151|0);
}
function _create_cluster_candidates_with_wfilter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5292368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5292368|0);
 $vararg_buffer = sp;
 $6 = sp + 5292104|0;
 $7 = sp + 5281864|0;
 $8 = sp + 34888|0;
 $9 = sp + 14408|0;
 $10 = sp + 2088|0;
 $18 = sp + 8|0;
 $20 = sp + 4160|0;
 $1 = $0;
 HEAP8[$20>>0] = 0;
 $4 = 0;
 while(1) {
  $21 = $4;
  $22 = $1;
  $23 = ((($22)) + 2248|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21>>>0)<($24>>>0);
  $26 = $1;
  if (!($25)) {
   break;
  }
  $27 = ((($26)) + 2224|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $4;
  $30 = (($28) + ($29<<2)|0);
  HEAP32[$30>>2] = 0;
  $31 = $4;
  $32 = (($31) + 1)|0;
  $4 = $32;
 }
 $33 = ((($26)) + 64|0);
 $34 = HEAP32[$33>>2]|0;
 $3 = $34;
 while(1) {
  $35 = $3;
  $36 = ($35|0)!=(0|0);
  if (!($36)) {
   break;
  }
  $37 = $3;
  $38 = HEAP32[$37>>2]|0;
  $39 = (_fopen($38,4411)|0);
  $2 = $39;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   while(1) {
    $44 = $2;
    $45 = (_fgets($7,10240,$44)|0);
    $46 = ($45|0)!=(0|0);
    if (!($46)) {
     break;
    }
    $47 = (_strlen($7)|0);
    $11 = $47;
    $48 = $11;
    $49 = (($48) - 1)|0;
    $50 = (($7) + ($49)|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51 << 24 >> 24;
    $53 = ($52|0)==(10);
    if ($53) {
     $54 = $11;
     $55 = (($54) - 1)|0;
     $56 = (($7) + ($55)|0);
     HEAP8[$56>>0] = 0;
    }
    $57 = $1;
    $58 = (_find_words($7,$8,$57)|0);
    $12 = $58;
    HEAP8[$9>>0] = 0;
    $14 = 0;
    $15 = 0;
    $13 = 0;
    while(1) {
     $59 = $13;
     $60 = $12;
     $61 = ($59|0)<($60|0);
     if (!($61)) {
      break;
     }
     $62 = $13;
     $63 = (($8) + (($62*10248)|0)|0);
     $64 = $1;
     $65 = ((($64)) + 2228|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $1;
     $68 = ((($67)) + 84|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $1;
     $71 = ((($70)) + 2256|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (_find_elem($63,$66,$69,$72)|0);
     $16 = $73;
     $74 = $13;
     $75 = (($8) + (($74*10248)|0)|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76 << 24 >> 24;
     $78 = ($77|0)!=(0);
     $79 = $16;
     $80 = ($79|0)!=(0|0);
     $or$cond = $78 & $80;
     do {
      if ($or$cond) {
       $81 = $13;
       $82 = (($8) + (($81*10248)|0)|0);
       (_strcat($9,$82)|0);
       $83 = (_strlen($9)|0);
       $11 = $83;
       $84 = $11;
       $85 = (($9) + ($84)|0);
       HEAP8[$85>>0] = 10;
       $86 = $11;
       $87 = (($86) + 1)|0;
       $88 = (($9) + ($87)|0);
       HEAP8[$88>>0] = 0;
       $89 = $14;
       $90 = (($89) + 1)|0;
       $14 = $90;
       $91 = $16;
       $92 = $14;
       $93 = (($18) + ($92<<2)|0);
       HEAP32[$93>>2] = $91;
       $94 = $15;
       $95 = $14;
       $96 = (($10) + ($95<<2)|0);
       HEAP32[$96>>2] = $94;
       $15 = 0;
      } else {
       $97 = $13;
       $98 = (($8) + (($97*10248)|0)|0);
       $99 = $1;
       $100 = (_is_word_filtered($98,$99)|0);
       $101 = ($100|0)!=(0);
       if (!($101)) {
        $139 = $15;
        $140 = (($139) + 1)|0;
        $15 = $140;
        break;
       }
       $102 = $13;
       $103 = (($8) + (($102*10248)|0)|0);
       $104 = $1;
       $105 = (_word_search_replace($103,$104)|0);
       (_strcpy($20,$105)|0);
       $106 = $1;
       $107 = ((($106)) + 2228|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = $1;
       $110 = ((($109)) + 84|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = $1;
       $113 = ((($112)) + 2256|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = (_find_elem($20,$108,$111,$114)|0);
       $16 = $115;
       $116 = $13;
       $117 = (($8) + (($116*10248)|0)|0);
       $118 = HEAP8[$117>>0]|0;
       $119 = $118 << 24 >> 24;
       $120 = ($119|0)!=(0);
       $121 = $16;
       $122 = ($121|0)!=(0|0);
       $or$cond3 = $120 & $122;
       if ($or$cond3) {
        (_strcat($9,$20)|0);
        $123 = (_strlen($9)|0);
        $11 = $123;
        $124 = $11;
        $125 = (($9) + ($124)|0);
        HEAP8[$125>>0] = 10;
        $126 = $11;
        $127 = (($126) + 1)|0;
        $128 = (($9) + ($127)|0);
        HEAP8[$128>>0] = 0;
        $129 = $14;
        $130 = (($129) + 1)|0;
        $14 = $130;
        $131 = $16;
        $132 = $14;
        $133 = (($18) + ($132<<2)|0);
        HEAP32[$133>>2] = $131;
        $134 = $15;
        $135 = $14;
        $136 = (($10) + ($135<<2)|0);
        HEAP32[$136>>2] = $134;
        $15 = 0;
        break;
       } else {
        $137 = $15;
        $138 = (($137) + 1)|0;
        $15 = $138;
        break;
       }
      }
     } while(0);
     $141 = $13;
     $142 = (($141) + 1)|0;
     $13 = $142;
    }
    $143 = $15;
    HEAP32[$10>>2] = $143;
    $144 = $14;
    $145 = ($144|0)!=(0);
    if (!($145)) {
     continue;
    }
    $146 = $1;
    $147 = ((($146)) + 76|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)!=(0);
    if ($149) {
     $150 = $1;
     $151 = ((($150)) + 76|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = $1;
     $154 = ((($153)) + 2240|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (_str2hash($9,$152,$155)|0);
     $5 = $156;
     $157 = $1;
     $158 = ((($157)) + 2232|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $5;
     $161 = (($159) + ($160<<2)|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $1;
     $164 = ((($163)) + 72|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($162>>>0)<($165>>>0);
     if ($166) {
      continue;
     }
    }
    $167 = $1;
    $168 = ((($167)) + 2224|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = $1;
    $171 = ((($170)) + 2248|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = $1;
    $174 = ((($173)) + 2244|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $1;
    $177 = (_add_elem($9,$169,$172,$175,$176)|0);
    $17 = $177;
    $178 = $17;
    $179 = ((($178)) + 4|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($180|0)==(1);
    if ($181) {
     $182 = $19;
     $183 = (($182) + 1)|0;
     $19 = $183;
     $184 = $17;
     $185 = $14;
     $186 = $1;
     (_create_cluster_instance($184,$185,$10,$18,$186)|0);
    }
    $187 = $17;
    $188 = $14;
    $189 = $1;
    _adjust_cluster_instance($187,$188,$10,$189);
   }
   $190 = $2;
   (_fclose($190)|0);
  } else {
   $41 = $3;
   $42 = HEAP32[$41>>2]|0;
   HEAP32[$vararg_buffer>>2] = $42;
   (_sprintf($6,4413,$vararg_buffer)|0);
   $43 = $1;
   _log_msg($6,3,$43);
  }
  $191 = $3;
  $192 = ((($191)) + 8|0);
  $193 = HEAP32[$192>>2]|0;
  $3 = $193;
 }
 $194 = $19;
 STACKTOP = sp;return ($194|0);
}
function _create_cluster_instance($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 $12 = (_malloc(32)|0);
 $10 = $12;
 $13 = $10;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = $9;
  _log_msg(2727,3,$15);
  _exit(1);
  // unreachable;
 }
 $16 = $6;
 $17 = (($16) + 1)|0;
 $18 = $17<<2;
 $19 = (_malloc($18)|0);
 $20 = $10;
 $21 = ((($20)) + 16|0);
 HEAP32[$21>>2] = $19;
 $22 = $10;
 $23 = ((($22)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  $26 = $9;
  _log_msg(2727,3,$26);
  _exit(1);
  // unreachable;
 }
 $27 = $6;
 $28 = (($27) + 1)|0;
 $29 = $28<<1;
 $30 = $29<<2;
 $31 = (_malloc($30)|0);
 $32 = $10;
 $33 = ((($32)) + 8|0);
 HEAP32[$33>>2] = $31;
 $34 = $10;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  $38 = $9;
  _log_msg(2727,3,$38);
  _exit(1);
  // unreachable;
 }
 $39 = $10;
 $40 = ((($39)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$41>>2] = 0;
 $11 = 1;
 while(1) {
  $42 = $11;
  $43 = $6;
  $44 = ($42|0)<=($43|0);
  if (!($44)) {
   break;
  }
  $45 = $8;
  $46 = $11;
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $10;
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $11;
  $53 = (($51) + ($52<<2)|0);
  HEAP32[$53>>2] = $48;
  $54 = $7;
  $55 = $11;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $10;
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $11;
  $62 = $61<<1;
  $63 = (($60) + ($62<<2)|0);
  HEAP32[$63>>2] = $57;
  $64 = $7;
  $65 = $11;
  $66 = (($64) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $10;
  $69 = ((($68)) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $11;
  $72 = $71<<1;
  $73 = (($72) + 1)|0;
  $74 = (($70) + ($73<<2)|0);
  HEAP32[$74>>2] = $67;
  $75 = $11;
  $76 = (($75) + 1)|0;
  $11 = $76;
 }
 $77 = $7;
 $78 = HEAP32[$77>>2]|0;
 $79 = $10;
 $80 = ((($79)) + 8|0);
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$81>>2] = $78;
 $82 = $7;
 $83 = HEAP32[$82>>2]|0;
 $84 = $10;
 $85 = ((($84)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ((($86)) + 4|0);
 HEAP32[$87>>2] = $83;
 $88 = $6;
 $89 = $10;
 HEAP32[$89>>2] = $88;
 $90 = $10;
 $91 = ((($90)) + 4|0);
 HEAP32[$91>>2] = 0;
 $92 = $10;
 $93 = ((($92)) + 24|0);
 HEAP8[$93>>0] = 0;
 $94 = $10;
 $95 = ((($94)) + 20|0);
 HEAP32[$95>>2] = 0;
 $96 = $10;
 $97 = $5;
 $98 = ((($97)) + 12|0);
 HEAP32[$98>>2] = $96;
 $99 = $5;
 $100 = $10;
 $101 = ((($100)) + 12|0);
 HEAP32[$101>>2] = $99;
 $102 = $9;
 $103 = ((($102)) + 172|0);
 $104 = $6;
 $105 = (($103) + ($104<<2)|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)!=(0|0);
 if ($107) {
  $108 = $9;
  $109 = ((($108)) + 172|0);
  $110 = $6;
  $111 = (($109) + ($110<<2)|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $10;
  $114 = ((($113)) + 28|0);
  HEAP32[$114>>2] = $112;
  $115 = $10;
  $116 = $9;
  $117 = ((($116)) + 172|0);
  $118 = $6;
  $119 = (($117) + ($118<<2)|0);
  $$sink = $115;$$sink1 = $119;
 } else {
  $120 = $10;
  $121 = ((($120)) + 28|0);
  HEAP32[$121>>2] = 0;
  $122 = $10;
  $123 = $9;
  $124 = ((($123)) + 172|0);
  $125 = $6;
  $126 = (($124) + ($125<<2)|0);
  $$sink = $122;$$sink1 = $126;
 }
 HEAP32[$$sink1>>2] = $$sink;
 $127 = $6;
 $128 = $9;
 $129 = ((($128)) + 96|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ($127|0)>($130|0);
 if (!($131)) {
  $135 = $10;
  STACKTOP = sp;return ($135|0);
 }
 $132 = $6;
 $133 = $9;
 $134 = ((($133)) + 96|0);
 HEAP32[$134>>2] = $132;
 $135 = $10;
 STACKTOP = sp;return ($135|0);
}
function _adjust_cluster_instance($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $8 = $12;
 $13 = $8;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$14>>2] = $16;
 $9 = 0;
 while(1) {
  $17 = $9;
  $18 = $5;
  $19 = ($17|0)<=($18|0);
  if (!($19)) {
   break;
  }
  $20 = $6;
  $21 = $9;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $8;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $9;
  $28 = $27<<1;
  $29 = (($26) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($23|0)<($30|0);
  $32 = $6;
  $33 = $9;
  $34 = (($32) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $8;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $9;
  $40 = $39<<1;
  if ($31) {
   $41 = (($38) + ($40<<2)|0);
   $$sink = $35;$$sink1 = $41;
   label = 7;
  } else {
   $42 = (($40) + 1)|0;
   $43 = (($38) + ($42<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($35|0)>($44|0);
   if ($45) {
    $46 = $6;
    $47 = $9;
    $48 = (($46) + ($47<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $8;
    $51 = ((($50)) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $9;
    $54 = $53<<1;
    $55 = (($54) + 1)|0;
    $56 = (($52) + ($55<<2)|0);
    $$sink = $49;$$sink1 = $56;
    label = 7;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   HEAP32[$$sink1>>2] = $$sink;
  }
  $57 = $9;
  $58 = (($57) + 1)|0;
  $9 = $58;
 }
 STACKTOP = sp;return;
}
function _debug_1_print_cluster_candidates($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp;
 $6 = sp + 64|0;
 $7 = sp + 32|0;
 $1 = $0;
 $8 = $1;
 $9 = ((($8)) + 2260|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10<<2;
 $12 = (_malloc($11)|0);
 $2 = $12;
 $13 = $2;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = $1;
  _log_msg(2805,3,$15);
  _exit(1);
  // unreachable;
 }
 $4 = 0;
 $3 = 0;
 while(1) {
  $16 = $3;
  $17 = $1;
  $18 = ((($17)) + 2248|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $1;
  $22 = ((($21)) + 2224|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $3;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(0|0);
  L7: do {
   if ($27) {
    $28 = $1;
    $29 = ((($28)) + 2224|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $3;
    $32 = (($30) + ($31<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $5 = $33;
    while(1) {
     $34 = $5;
     $35 = ($34|0)!=(0|0);
     if (!($35)) {
      break L7;
     }
     $36 = $5;
     $37 = $2;
     $38 = $4;
     $39 = (($37) + ($38<<2)|0);
     HEAP32[$39>>2] = $36;
     $40 = $4;
     $41 = (($40) + 1)|0;
     $4 = $41;
     $42 = $5;
     $43 = ((($42)) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $5 = $44;
    }
   }
  } while(0);
  $45 = $3;
  $46 = (($45) + 1)|0;
  $3 = $46;
 }
 $47 = $2;
 $48 = $1;
 $49 = ((($48)) + 2260|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $1;
 _sort_elements($47,$50,$51);
 $3 = 0;
 while(1) {
  $52 = $3;
  $53 = $1;
  $54 = ((($53)) + 2260|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($52>>>0)<($55>>>0);
  if (!($56)) {
   break;
  }
  $57 = $2;
  $58 = $3;
  $59 = (($57) + ($58<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  (_str_format_int_grouped($7,$62)|0);
  $63 = $2;
  $64 = $3;
  $65 = (($63) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $1;
  _print_cluster_to_string($68,$69);
  $70 = $1;
  $71 = ((($70)) + 6952|0);
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $71;
  (_sprintf($6,2868,$vararg_buffer)|0);
  $72 = $1;
  _log_msg($6,7,$72);
  $73 = $3;
  $74 = (($73) + 1)|0;
  $3 = $74;
 }
 $75 = $2;
 _free($75);
 STACKTOP = sp;return;
}
function _free_syslog_facility($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function _free_and_clean_step_0($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _free_inputfiles($2);
 $3 = $1;
 _free_syslog_facility($3);
 $4 = $1;
 _free_delim($4);
 $5 = $1;
 _free_filter($5);
 $6 = $1;
 _free_template($6);
 $7 = $1;
 _free_outlier($7);
 $8 = $1;
 _free_wfilter($8);
 $9 = $1;
 _free_wsearch($9);
 $10 = $1;
 _free_wreplace($10);
 $11 = $1;
 $12 = ((($11)) + 92|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = ($14|0)==(1);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 _closelog();
 STACKTOP = sp;return;
}
function _free_inputfiles($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 while(1) {
  $7 = $2;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $2;
  _free($14);
  $15 = $3;
  $2 = $15;
 }
 STACKTOP = sp;return;
}
function _free_delim($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 108|0);
 _regfree($3);
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 STACKTOP = sp;return;
}
function _free_filter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 140|0);
 _regfree($7);
 $8 = $1;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 STACKTOP = sp;return;
}
function _free_template($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 while(1) {
  $7 = $2;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $2;
  _free($14);
  $15 = $3;
  $2 = $15;
 }
 STACKTOP = sp;return;
}
function _free_outlier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 STACKTOP = sp;return;
}
function _free_wfilter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 7256|0);
 _regfree($7);
 $8 = $1;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 STACKTOP = sp;return;
}
function _free_wsearch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 7288|0);
 _regfree($7);
 $8 = $1;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 STACKTOP = sp;return;
}
function _free_wreplace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 STACKTOP = sp;return;
}
function _free_and_clean_step_1($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _free_word_table($2);
 $3 = $1;
 _free_word_sketch($3);
 STACKTOP = sp;return;
}
function _free_word_table($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = $1;
  $7 = ((($6)) + 84|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5>>>0)<($8>>>0);
  $10 = $1;
  $11 = ((($10)) + 2228|0);
  $12 = HEAP32[$11>>2]|0;
  if (!($9)) {
   break;
  }
  $13 = $2;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  L4: do {
   if ($16) {
    $17 = $1;
    $18 = ((($17)) + 2228|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $2;
    $21 = (($19) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $3 = $22;
    while(1) {
     $23 = $3;
     $24 = ($23|0)!=(0|0);
     if (!($24)) {
      break L4;
     }
     $25 = $3;
     $26 = ((($25)) + 16|0);
     $27 = HEAP32[$26>>2]|0;
     $4 = $27;
     $28 = $3;
     $29 = HEAP32[$28>>2]|0;
     _free($29);
     $30 = $3;
     _free($30);
     $31 = $4;
     $3 = $31;
    }
   }
  } while(0);
  $32 = $2;
  $33 = (($32) + 1)|0;
  $2 = $33;
 }
 _free($12);
 STACKTOP = sp;return;
}
function _free_word_sketch($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 2236|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 2236|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 STACKTOP = sp;return;
}
function _free_and_clean_step_2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _free_cluster_table($2);
 $3 = $1;
 _free_cluster_sketch($3);
 $4 = $1;
 _free_cluster_instances($4);
 $5 = $1;
 $6 = ((($5)) + 40|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $7 != 0.0;
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 6948|0);
 $11 = HEAP32[$10>>2]|0;
 _free($11);
 STACKTOP = sp;return;
}
function _free_cluster_table($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 2224|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $2 = 0;
 while(1) {
  $9 = $2;
  $10 = $1;
  $11 = ((($10)) + 2248|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9>>>0)<($12>>>0);
  $14 = $1;
  $15 = ((($14)) + 2224|0);
  $16 = HEAP32[$15>>2]|0;
  if (!($13)) {
   break;
  }
  $17 = $2;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  L7: do {
   if ($20) {
    $21 = $1;
    $22 = ((($21)) + 2224|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $2;
    $25 = (($23) + ($24<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $3 = $26;
    while(1) {
     $27 = $3;
     $28 = ($27|0)!=(0|0);
     if (!($28)) {
      break L7;
     }
     $29 = $3;
     $30 = ((($29)) + 16|0);
     $31 = HEAP32[$30>>2]|0;
     $4 = $31;
     $32 = $3;
     $33 = HEAP32[$32>>2]|0;
     _free($33);
     $34 = $3;
     _free($34);
     $35 = $4;
     $3 = $35;
    }
   }
  } while(0);
  $36 = $2;
  $37 = (($36) + 1)|0;
  $2 = $37;
 }
 _free($16);
 STACKTOP = sp;return;
}
function _free_cluster_sketch($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 2232|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 2232|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 STACKTOP = sp;return;
}
function _free_cluster_instances($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 1;
 while(1) {
  $5 = $2;
  $6 = $1;
  $7 = ((($6)) + 96|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<=($8|0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = ((($10)) + 172|0);
  $12 = $2;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $3 = $14;
  while(1) {
   $15 = $3;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    break;
   }
   $17 = $3;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $4 = $19;
   $20 = $3;
   $21 = ((($20)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   _free($22);
   $23 = $3;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   _free($25);
   $26 = $3;
   _free($26);
   $27 = $4;
   $3 = $27;
  }
  $28 = $2;
  $29 = (($28) + 1)|0;
  $2 = $29;
 }
 STACKTOP = sp;return;
}
function _free_and_clean_step_3($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 40|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $4 != 0.0;
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 _free_cluster_with_token_instances($6);
 STACKTOP = sp;return;
}
function _free_cluster_with_token_instances($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 1;
 while(1) {
  $5 = $2;
  $6 = $1;
  $7 = ((($6)) + 96|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<=($8|0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = ((($10)) + 2832|0);
  $12 = $2;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $3 = $14;
  while(1) {
   $15 = $3;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    break;
   }
   $17 = $3;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $4 = $19;
   $20 = $3;
   _free_token($20);
   $21 = $3;
   $22 = ((($21)) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   _free($23);
   $24 = $3;
   $25 = ((($24)) + 16|0);
   $26 = HEAP32[$25>>2]|0;
   _free($26);
   $27 = $3;
   $28 = ((($27)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   _free($29);
   $30 = $3;
   _free($30);
   $31 = $4;
   $3 = $31;
  }
  $32 = $2;
  $33 = (($32) + 1)|0;
  $2 = $33;
 }
 STACKTOP = sp;return;
}
function _free_token($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 1;
 while(1) {
  $5 = $2;
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<=($7|0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = ((($9)) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $3 = $14;
  while(1) {
   $15 = $3;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    break;
   }
   $17 = $3;
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $4 = $19;
   $20 = $3;
   _free($20);
   $21 = $4;
   $3 = $21;
  }
  $22 = $2;
  $23 = (($22) + 1)|0;
  $2 = $23;
 }
 STACKTOP = sp;return;
}
function _step_1_create_word_sketch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer = sp;
 $3 = sp + 48|0;
 $4 = sp + 16|0;
 $1 = $0;
 $5 = $1;
 _log_msg(2906,5,$5);
 $6 = $1;
 $7 = ((($6)) + 80|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8<<2;
 $10 = (_malloc($9)|0);
 $11 = $1;
 $12 = ((($11)) + 2236|0);
 HEAP32[$12>>2] = $10;
 $13 = $1;
 $14 = ((($13)) + 2236|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 $17 = $1;
 if (!($16)) {
  _log_msg(2934,3,$17);
  _exit(1);
  // unreachable;
 }
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 $21 = $1;
 if ($20) {
  $23 = (_create_word_sketch_with_wfilter($21)|0);
  $2 = $23;
 } else {
  $22 = (_create_word_sketch($21)|0);
  $2 = $22;
 }
 $24 = $2;
 (_str_format_int_grouped($4,$24)|0);
 HEAP32[$vararg_buffer>>2] = $4;
 (_sprintf($3,2990,$vararg_buffer)|0);
 $25 = $1;
 _log_msg($3,6,$25);
 STACKTOP = sp;return;
}
function _create_word_sketch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5257520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5257520|0);
 $vararg_buffer = sp;
 $11 = sp + 5257264|0;
 $12 = sp + 5247024|0;
 $13 = sp + 48|0;
 $1 = $0;
 $9 = 0;
 $4 = 0;
 while(1) {
  $14 = $4;
  $15 = $1;
  $16 = ((($15)) + 80|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14>>>0)<($17>>>0);
  $19 = $1;
  if (!($18)) {
   break;
  }
  $20 = ((($19)) + 2236|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $4;
  $23 = (($21) + ($22<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = $4;
  $25 = (($24) + 1)|0;
  $4 = $25;
 }
 $26 = ((($19)) + 64|0);
 $27 = HEAP32[$26>>2]|0;
 $10 = $27;
 while(1) {
  $28 = $10;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   break;
  }
  $30 = $10;
  $31 = HEAP32[$30>>2]|0;
  $32 = (_fopen($31,4411)|0);
  $2 = $32;
  $33 = ($32|0)!=(0|0);
  if ($33) {
   while(1) {
    $37 = $2;
    $38 = (_fgets($12,10240,$37)|0);
    $39 = ($38|0)!=(0|0);
    if (!($39)) {
     break;
    }
    $40 = (_strlen($12)|0);
    $6 = $40;
    $41 = $6;
    $42 = (($41) - 1)|0;
    $43 = (($12) + ($42)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44 << 24 >> 24;
    $46 = ($45|0)==(10);
    if ($46) {
     $47 = $6;
     $48 = (($47) - 1)|0;
     $49 = (($12) + ($48)|0);
     HEAP8[$49>>0] = 0;
    }
    $50 = $1;
    $51 = (_find_words($12,$13,$50)|0);
    $8 = $51;
    $7 = 0;
    while(1) {
     $52 = $7;
     $53 = $8;
     $54 = ($52|0)<($53|0);
     if (!($54)) {
      break;
     }
     $55 = $7;
     $56 = (($13) + (($55*10248)|0)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57 << 24 >> 24;
     $59 = ($58|0)==(0);
     if (!($59)) {
      $60 = $7;
      $61 = (($13) + (($60*10248)|0)|0);
      $62 = $1;
      $63 = ((($62)) + 80|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $1;
      $66 = ((($65)) + 2252|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (_str2hash($61,$64,$67)|0);
      $3 = $68;
      $69 = $1;
      $70 = ((($69)) + 2236|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = $3;
      $73 = (($71) + ($72<<2)|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($74) + 1)|0;
      HEAP32[$73>>2] = $75;
     }
     $76 = $7;
     $77 = (($76) + 1)|0;
     $7 = $77;
    }
    $78 = $9;
    $79 = (($78) + 1)|0;
    $9 = $79;
   }
   $80 = $2;
   (_fclose($80)|0);
  } else {
   $34 = $10;
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$vararg_buffer>>2] = $35;
   (_sprintf($11,4413,$vararg_buffer)|0);
   $36 = $1;
   _log_msg($11,3,$36);
  }
  $81 = $10;
  $82 = ((($81)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $10 = $83;
 }
 $84 = $1;
 $85 = ((($84)) + 7208|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)!=(0);
 if (!($87)) {
  $88 = $9;
  $89 = $1;
  $90 = ((($89)) + 7208|0);
  HEAP32[$90>>2] = $88;
 }
 $91 = $1;
 $92 = ((($91)) + 72|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)!=(0);
 if (!($94)) {
  $95 = $9;
  $96 = (+($95>>>0));
  $97 = $1;
  $98 = ((($97)) + 32|0);
  $99 = +HEAPF64[$98>>3];
  $100 = $96 * $99;
  $101 = $100 / 100.0;
  $102 = (~~(($101))>>>0);
  $103 = $1;
  $104 = ((($103)) + 72|0);
  HEAP32[$104>>2] = $102;
 }
 $5 = 0;
 $4 = 0;
 while(1) {
  $105 = $4;
  $106 = $1;
  $107 = ((($106)) + 80|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($105>>>0)<($108>>>0);
  if (!($109)) {
   break;
  }
  $110 = $1;
  $111 = ((($110)) + 2236|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $4;
  $114 = (($112) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $1;
  $117 = ((($116)) + 72|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($115>>>0)>=($118>>>0);
  if ($119) {
   $120 = $5;
   $121 = (($120) + 1)|0;
   $5 = $121;
  }
  $122 = $4;
  $123 = (($122) + 1)|0;
  $4 = $123;
 }
 $124 = $5;
 STACKTOP = sp;return ($124|0);
}
function _create_word_sketch_with_wfilter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5257520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5257520|0);
 $vararg_buffer = sp;
 $11 = sp + 5257264|0;
 $12 = sp + 5247024|0;
 $13 = sp + 48|0;
 $1 = $0;
 $9 = 0;
 $4 = 0;
 while(1) {
  $14 = $4;
  $15 = $1;
  $16 = ((($15)) + 80|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14>>>0)<($17>>>0);
  $19 = $1;
  if (!($18)) {
   break;
  }
  $20 = ((($19)) + 2236|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $4;
  $23 = (($21) + ($22<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = $4;
  $25 = (($24) + 1)|0;
  $4 = $25;
 }
 $26 = ((($19)) + 64|0);
 $27 = HEAP32[$26>>2]|0;
 $10 = $27;
 while(1) {
  $28 = $10;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   break;
  }
  $30 = $10;
  $31 = HEAP32[$30>>2]|0;
  $32 = (_fopen($31,4411)|0);
  $2 = $32;
  $33 = ($32|0)!=(0|0);
  if ($33) {
   while(1) {
    $37 = $2;
    $38 = (_fgets($12,10240,$37)|0);
    $39 = ($38|0)!=(0|0);
    if (!($39)) {
     break;
    }
    $40 = (_strlen($12)|0);
    $6 = $40;
    $41 = $6;
    $42 = (($41) - 1)|0;
    $43 = (($12) + ($42)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44 << 24 >> 24;
    $46 = ($45|0)==(10);
    if ($46) {
     $47 = $6;
     $48 = (($47) - 1)|0;
     $49 = (($12) + ($48)|0);
     HEAP8[$49>>0] = 0;
    }
    $50 = $1;
    $51 = (_find_words($12,$13,$50)|0);
    $8 = $51;
    $7 = 0;
    while(1) {
     $52 = $7;
     $53 = $8;
     $54 = ($52|0)<($53|0);
     if (!($54)) {
      break;
     }
     $55 = $7;
     $56 = (($13) + (($55*10248)|0)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57 << 24 >> 24;
     $59 = ($58|0)==(0);
     if (!($59)) {
      $60 = $7;
      $61 = (($13) + (($60*10248)|0)|0);
      $62 = $1;
      $63 = ((($62)) + 80|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $1;
      $66 = ((($65)) + 2252|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (_str2hash($61,$64,$67)|0);
      $3 = $68;
      $69 = $1;
      $70 = ((($69)) + 2236|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = $3;
      $73 = (($71) + ($72<<2)|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($74) + 1)|0;
      HEAP32[$73>>2] = $75;
      $76 = $7;
      $77 = (($13) + (($76*10248)|0)|0);
      $78 = $1;
      $79 = (_is_word_filtered($77,$78)|0);
      $80 = ($79|0)!=(0);
      if ($80) {
       $81 = $7;
       $82 = (($13) + (($81*10248)|0)|0);
       $83 = $1;
       $84 = (_word_search_replace($82,$83)|0);
       $85 = $1;
       $86 = ((($85)) + 80|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = $1;
       $89 = ((($88)) + 2252|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (_str2hash($84,$87,$90)|0);
       $3 = $91;
       $92 = $1;
       $93 = ((($92)) + 2236|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = $3;
       $96 = (($94) + ($95<<2)|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = (($97) + 1)|0;
       HEAP32[$96>>2] = $98;
      }
     }
     $99 = $7;
     $100 = (($99) + 1)|0;
     $7 = $100;
    }
    $101 = $9;
    $102 = (($101) + 1)|0;
    $9 = $102;
   }
   $103 = $2;
   (_fclose($103)|0);
  } else {
   $34 = $10;
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$vararg_buffer>>2] = $35;
   (_sprintf($11,4413,$vararg_buffer)|0);
   $36 = $1;
   _log_msg($11,3,$36);
  }
  $104 = $10;
  $105 = ((($104)) + 8|0);
  $106 = HEAP32[$105>>2]|0;
  $10 = $106;
 }
 $107 = $1;
 $108 = ((($107)) + 7208|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0);
 if (!($110)) {
  $111 = $9;
  $112 = $1;
  $113 = ((($112)) + 7208|0);
  HEAP32[$113>>2] = $111;
 }
 $114 = $1;
 $115 = ((($114)) + 72|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)!=(0);
 if (!($117)) {
  $118 = $9;
  $119 = (+($118>>>0));
  $120 = $1;
  $121 = ((($120)) + 32|0);
  $122 = +HEAPF64[$121>>3];
  $123 = $119 * $122;
  $124 = $123 / 100.0;
  $125 = (~~(($124))>>>0);
  $126 = $1;
  $127 = ((($126)) + 72|0);
  HEAP32[$127>>2] = $125;
 }
 $5 = 0;
 $4 = 0;
 while(1) {
  $128 = $4;
  $129 = $1;
  $130 = ((($129)) + 80|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($128>>>0)<($131>>>0);
  if (!($132)) {
   break;
  }
  $133 = $1;
  $134 = ((($133)) + 2236|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $4;
  $137 = (($135) + ($136<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $1;
  $140 = ((($139)) + 72|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($138>>>0)>=($141>>>0);
  if ($142) {
   $143 = $5;
   $144 = (($143) + 1)|0;
   $5 = $144;
  }
  $145 = $4;
  $146 = (($145) + 1)|0;
  $4 = $146;
 }
 $147 = $5;
 STACKTOP = sp;return ($147|0);
}
function _step_1_create_vocabulary($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer = sp;
 $3 = sp + 48|0;
 $4 = sp + 16|0;
 $1 = $0;
 $5 = $1;
 _log_msg(3040,5,$5);
 $6 = $1;
 $7 = ((($6)) + 84|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8<<2;
 $10 = (_malloc($9)|0);
 $11 = $1;
 $12 = ((($11)) + 2228|0);
 HEAP32[$12>>2] = $10;
 $13 = $1;
 $14 = ((($13)) + 2228|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 $17 = $1;
 if (!($16)) {
  _log_msg(3063,3,$17);
  _exit(1);
  // unreachable;
 }
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 $21 = $1;
 if ($20) {
  $23 = (_create_vocabulary_with_wfilter($21)|0);
  $2 = $23;
 } else {
  $22 = (_create_vocabulary($21)|0);
  $2 = $22;
 }
 $24 = $2;
 (_str_format_int_grouped($4,$24)|0);
 HEAP32[$vararg_buffer>>2] = $4;
 (_sprintf($3,3118,$vararg_buffer)|0);
 $25 = $1;
 _log_msg($3,6,$25);
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _create_vocabulary($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5257536|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5257536|0);
 $vararg_buffer = sp;
 $7 = sp + 5257272|0;
 $8 = sp + 5247032|0;
 $9 = sp + 56|0;
 $1 = $0;
 $2 = 0;
 $3 = 0;
 while(1) {
  $16 = $3;
  $17 = $1;
  $18 = ((($17)) + 84|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16>>>0)<($19>>>0);
  $21 = $1;
  if (!($20)) {
   break;
  }
  $22 = ((($21)) + 2228|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $3;
  $25 = (($23) + ($24<<2)|0);
  HEAP32[$25>>2] = 0;
  $26 = $3;
  $27 = (($26) + 1)|0;
  $3 = $27;
 }
 $28 = ((($21)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $5 = $29;
 while(1) {
  $30 = $5;
  $31 = ($30|0)!=(0|0);
  if (!($31)) {
   break;
  }
  $32 = $5;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_fopen($33,4411)|0);
  $6 = $34;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   while(1) {
    $39 = $6;
    $40 = (_fgets($8,10240,$39)|0);
    $41 = ($40|0)!=(0|0);
    if (!($41)) {
     break;
    }
    $42 = (_strlen($8)|0);
    $11 = $42;
    $43 = $11;
    $44 = (($43) - 1)|0;
    $45 = (($8) + ($44)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 << 24 >> 24;
    $48 = ($47|0)==(10);
    if ($48) {
     $49 = $11;
     $50 = (($49) - 1)|0;
     $51 = (($8) + ($50)|0);
     HEAP8[$51>>0] = 0;
    }
    $52 = $1;
    $53 = (_find_words($8,$9,$52)|0);
    $12 = $53;
    $13 = 0;
    $10 = 0;
    while(1) {
     $54 = $10;
     $55 = $12;
     $56 = ($54|0)<($55|0);
     if (!($56)) {
      break;
     }
     $57 = $10;
     $58 = (($9) + (($57*10248)|0)|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59 << 24 >> 24;
     $61 = ($60|0)==(0);
     do {
      if (!($61)) {
       $62 = $1;
       $63 = ((($62)) + 80|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($64|0)!=(0);
       if ($65) {
        $66 = $10;
        $67 = (($9) + (($66*10248)|0)|0);
        $68 = $1;
        $69 = ((($68)) + 80|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = $1;
        $72 = ((($71)) + 2252|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = (_str2hash($67,$70,$73)|0);
        $4 = $74;
        $75 = $1;
        $76 = ((($75)) + 2236|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = $4;
        $79 = (($77) + ($78<<2)|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = $1;
        $82 = ((($81)) + 72|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($80>>>0)<($83>>>0);
        if ($84) {
         break;
        }
       }
       $85 = $10;
       $86 = (($9) + (($85*10248)|0)|0);
       $87 = $1;
       $88 = ((($87)) + 2228|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = $1;
       $91 = ((($90)) + 84|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = $1;
       $94 = ((($93)) + 2256|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = $1;
       $97 = (_add_elem($86,$89,$92,$95,$96)|0);
       $14 = $97;
       $98 = $13;
       $99 = (($98) + 1)|0;
       $13 = $99;
       $100 = $14;
       $101 = ((($100)) + 4|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ($102|0)==(1);
       if ($103) {
        $104 = $2;
        $105 = (($104) + 1)|0;
        $2 = $105;
        $106 = $2;
        $107 = $14;
        $108 = ((($107)) + 8|0);
        HEAP32[$108>>2] = $106;
       }
       $109 = $1;
       $110 = ((($109)) + 4896|0);
       $111 = $14;
       $112 = ((($111)) + 8|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = $13;
       $115 = (_is_word_repeated($110,$113,$114)|0);
       $116 = ($115|0)!=(0);
       if ($116) {
        $117 = $13;
        $118 = (($117) + -1)|0;
        $13 = $118;
        $119 = $14;
        $120 = ((($119)) + 4|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (($121) + -1)|0;
        HEAP32[$120>>2] = $122;
        break;
       } else {
        $123 = $14;
        $124 = ((($123)) + 8|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = $1;
        $127 = ((($126)) + 4896|0);
        $128 = $13;
        $129 = (($127) + ($128<<2)|0);
        HEAP32[$129>>2] = $125;
        break;
       }
      }
     } while(0);
     $130 = $10;
     $131 = (($130) + 1)|0;
     $10 = $131;
    }
    $132 = $15;
    $133 = (($132) + 1)|0;
    $15 = $133;
   }
   $134 = $6;
   (_fclose($134)|0);
  } else {
   $36 = $5;
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$vararg_buffer>>2] = $37;
   (_sprintf($7,4413,$vararg_buffer)|0);
   $38 = $1;
   _log_msg($7,3,$38);
  }
  $135 = $5;
  $136 = ((($135)) + 8|0);
  $137 = HEAP32[$136>>2]|0;
  $5 = $137;
 }
 $138 = $1;
 $139 = ((($138)) + 7208|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0);
 if (!($141)) {
  $142 = $15;
  $143 = $1;
  $144 = ((($143)) + 7208|0);
  HEAP32[$144>>2] = $142;
 }
 $145 = $1;
 $146 = ((($145)) + 72|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($147|0)!=(0);
 if ($148) {
  $159 = $2;
  STACKTOP = sp;return ($159|0);
 }
 $149 = $15;
 $150 = (+($149>>>0));
 $151 = $1;
 $152 = ((($151)) + 32|0);
 $153 = +HEAPF64[$152>>3];
 $154 = $150 * $153;
 $155 = $154 / 100.0;
 $156 = (~~(($155))>>>0);
 $157 = $1;
 $158 = ((($157)) + 72|0);
 HEAP32[$158>>2] = $156;
 $159 = $2;
 STACKTOP = sp;return ($159|0);
}
function _create_vocabulary_with_wfilter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0;
 var $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5267776|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5267776|0);
 $vararg_buffer = sp;
 $7 = sp + 5267520|0;
 $8 = sp + 5257280|0;
 $9 = sp + 10304|0;
 $16 = sp + 56|0;
 $1 = $0;
 $2 = 0;
 HEAP8[$16>>0] = 0;
 $3 = 0;
 while(1) {
  $17 = $3;
  $18 = $1;
  $19 = ((($18)) + 84|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17>>>0)<($20>>>0);
  $22 = $1;
  if (!($21)) {
   break;
  }
  $23 = ((($22)) + 2228|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $3;
  $26 = (($24) + ($25<<2)|0);
  HEAP32[$26>>2] = 0;
  $27 = $3;
  $28 = (($27) + 1)|0;
  $3 = $28;
 }
 $29 = ((($22)) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 $5 = $30;
 while(1) {
  $31 = $5;
  $32 = ($31|0)!=(0|0);
  if (!($32)) {
   break;
  }
  $33 = $5;
  $34 = HEAP32[$33>>2]|0;
  $35 = (_fopen($34,4411)|0);
  $6 = $35;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   while(1) {
    $40 = $6;
    $41 = (_fgets($8,10240,$40)|0);
    $42 = ($41|0)!=(0|0);
    if (!($42)) {
     break;
    }
    $43 = (_strlen($8)|0);
    $11 = $43;
    $44 = $11;
    $45 = (($44) - 1)|0;
    $46 = (($8) + ($45)|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47 << 24 >> 24;
    $49 = ($48|0)==(10);
    if ($49) {
     $50 = $11;
     $51 = (($50) - 1)|0;
     $52 = (($8) + ($51)|0);
     HEAP8[$52>>0] = 0;
    }
    $53 = $1;
    $54 = (_find_words($8,$9,$53)|0);
    $12 = $54;
    $13 = 0;
    $10 = 0;
    while(1) {
     $55 = $10;
     $56 = $12;
     $57 = ($55|0)<($56|0);
     if (!($57)) {
      break;
     }
     $58 = $10;
     $59 = (($9) + (($58*10248)|0)|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = ($61|0)==(0);
     do {
      if (!($62)) {
       $63 = $1;
       $64 = ((($63)) + 80|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ($65|0)!=(0);
       $67 = $10;
       $68 = (($9) + (($67*10248)|0)|0);
       $69 = $1;
       if (!($66)) {
        $200 = ((($69)) + 2228|0);
        $201 = HEAP32[$200>>2]|0;
        $202 = $1;
        $203 = ((($202)) + 84|0);
        $204 = HEAP32[$203>>2]|0;
        $205 = $1;
        $206 = ((($205)) + 2256|0);
        $207 = HEAP32[$206>>2]|0;
        $208 = $1;
        $209 = (_add_elem($68,$201,$204,$207,$208)|0);
        $14 = $209;
        $210 = $13;
        $211 = (($210) + 1)|0;
        $13 = $211;
        $212 = $14;
        $213 = ((($212)) + 4|0);
        $214 = HEAP32[$213>>2]|0;
        $215 = ($214|0)==(1);
        if ($215) {
         $216 = $2;
         $217 = (($216) + 1)|0;
         $2 = $217;
         $218 = $2;
         $219 = $14;
         $220 = ((($219)) + 8|0);
         HEAP32[$220>>2] = $218;
        }
        $221 = $1;
        $222 = ((($221)) + 4896|0);
        $223 = $14;
        $224 = ((($223)) + 8|0);
        $225 = HEAP32[$224>>2]|0;
        $226 = $13;
        $227 = (_is_word_repeated($222,$225,$226)|0);
        $228 = ($227|0)!=(0);
        if ($228) {
         $229 = $13;
         $230 = (($229) + -1)|0;
         $13 = $230;
         $231 = $14;
         $232 = ((($231)) + 4|0);
         $233 = HEAP32[$232>>2]|0;
         $234 = (($233) + -1)|0;
         HEAP32[$232>>2] = $234;
        } else {
         $235 = $14;
         $236 = ((($235)) + 8|0);
         $237 = HEAP32[$236>>2]|0;
         $238 = $1;
         $239 = ((($238)) + 4896|0);
         $240 = $13;
         $241 = (($239) + ($240<<2)|0);
         HEAP32[$241>>2] = $237;
        }
        $242 = $10;
        $243 = (($9) + (($242*10248)|0)|0);
        $244 = $1;
        $245 = (_is_word_filtered($243,$244)|0);
        $246 = ($245|0)!=(0);
        if (!($246)) {
         break;
        }
        $247 = $10;
        $248 = (($9) + (($247*10248)|0)|0);
        $249 = $1;
        $250 = (_word_search_replace($248,$249)|0);
        (_strcpy($16,$250)|0);
        $251 = $1;
        $252 = ((($251)) + 2228|0);
        $253 = HEAP32[$252>>2]|0;
        $254 = $1;
        $255 = ((($254)) + 84|0);
        $256 = HEAP32[$255>>2]|0;
        $257 = $1;
        $258 = ((($257)) + 2256|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $1;
        $261 = (_add_elem($16,$253,$256,$259,$260)|0);
        $14 = $261;
        $262 = $13;
        $263 = (($262) + 1)|0;
        $13 = $263;
        $264 = $14;
        $265 = ((($264)) + 4|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($266|0)==(1);
        if ($267) {
         $268 = $2;
         $269 = (($268) + 1)|0;
         $2 = $269;
         $270 = $2;
         $271 = $14;
         $272 = ((($271)) + 8|0);
         HEAP32[$272>>2] = $270;
        }
        $273 = $1;
        $274 = ((($273)) + 4896|0);
        $275 = $14;
        $276 = ((($275)) + 8|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = $13;
        $279 = (_is_word_repeated($274,$277,$278)|0);
        $280 = ($279|0)!=(0);
        if ($280) {
         $281 = $13;
         $282 = (($281) + -1)|0;
         $13 = $282;
         $283 = $14;
         $284 = ((($283)) + 4|0);
         $285 = HEAP32[$284>>2]|0;
         $286 = (($285) + -1)|0;
         HEAP32[$284>>2] = $286;
         break;
        } else {
         $287 = $14;
         $288 = ((($287)) + 8|0);
         $289 = HEAP32[$288>>2]|0;
         $290 = $1;
         $291 = ((($290)) + 4896|0);
         $292 = $13;
         $293 = (($291) + ($292<<2)|0);
         HEAP32[$293>>2] = $289;
         break;
        }
       }
       $70 = ((($69)) + 80|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = $1;
       $73 = ((($72)) + 2252|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (_str2hash($68,$71,$74)|0);
       $4 = $75;
       $76 = $1;
       $77 = ((($76)) + 2236|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = $4;
       $80 = (($78) + ($79<<2)|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = $1;
       $83 = ((($82)) + 72|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($81>>>0)>=($84>>>0);
       do {
        if ($85) {
         $86 = $10;
         $87 = (($9) + (($86*10248)|0)|0);
         $88 = $1;
         $89 = ((($88)) + 2228|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = $1;
         $92 = ((($91)) + 84|0);
         $93 = HEAP32[$92>>2]|0;
         $94 = $1;
         $95 = ((($94)) + 2256|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = $1;
         $98 = (_add_elem($87,$90,$93,$96,$97)|0);
         $14 = $98;
         $99 = $13;
         $100 = (($99) + 1)|0;
         $13 = $100;
         $101 = $14;
         $102 = ((($101)) + 4|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = ($103|0)==(1);
         if ($104) {
          $105 = $2;
          $106 = (($105) + 1)|0;
          $2 = $106;
          $107 = $2;
          $108 = $14;
          $109 = ((($108)) + 8|0);
          HEAP32[$109>>2] = $107;
         }
         $110 = $1;
         $111 = ((($110)) + 4896|0);
         $112 = $14;
         $113 = ((($112)) + 8|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = $13;
         $116 = (_is_word_repeated($111,$114,$115)|0);
         $117 = ($116|0)!=(0);
         if ($117) {
          $118 = $13;
          $119 = (($118) + -1)|0;
          $13 = $119;
          $120 = $14;
          $121 = ((($120)) + 4|0);
          $122 = HEAP32[$121>>2]|0;
          $123 = (($122) + -1)|0;
          HEAP32[$121>>2] = $123;
          break;
         } else {
          $124 = $14;
          $125 = ((($124)) + 8|0);
          $126 = HEAP32[$125>>2]|0;
          $127 = $1;
          $128 = ((($127)) + 4896|0);
          $129 = $13;
          $130 = (($128) + ($129<<2)|0);
          HEAP32[$130>>2] = $126;
          break;
         }
        }
       } while(0);
       $131 = $10;
       $132 = (($9) + (($131*10248)|0)|0);
       $133 = $1;
       $134 = (_is_word_filtered($132,$133)|0);
       $135 = ($134|0)!=(0);
       if ($135) {
        $136 = $10;
        $137 = (($9) + (($136*10248)|0)|0);
        $138 = $1;
        $139 = (_word_search_replace($137,$138)|0);
        (_strcpy($16,$139)|0);
        $140 = $1;
        $141 = ((($140)) + 80|0);
        $142 = HEAP32[$141>>2]|0;
        $143 = $1;
        $144 = ((($143)) + 2252|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = (_str2hash($16,$142,$145)|0);
        $4 = $146;
        $147 = $1;
        $148 = ((($147)) + 2236|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = $4;
        $151 = (($149) + ($150<<2)|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = $1;
        $154 = ((($153)) + 72|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($152>>>0)>=($155>>>0);
        if ($156) {
         $157 = $1;
         $158 = ((($157)) + 2228|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = $1;
         $161 = ((($160)) + 84|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = $1;
         $164 = ((($163)) + 2256|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = $1;
         $167 = (_add_elem($16,$159,$162,$165,$166)|0);
         $14 = $167;
         $168 = $13;
         $169 = (($168) + 1)|0;
         $13 = $169;
         $170 = $14;
         $171 = ((($170)) + 4|0);
         $172 = HEAP32[$171>>2]|0;
         $173 = ($172|0)==(1);
         if ($173) {
          $174 = $2;
          $175 = (($174) + 1)|0;
          $2 = $175;
          $176 = $2;
          $177 = $14;
          $178 = ((($177)) + 8|0);
          HEAP32[$178>>2] = $176;
         }
         $179 = $1;
         $180 = ((($179)) + 4896|0);
         $181 = $14;
         $182 = ((($181)) + 8|0);
         $183 = HEAP32[$182>>2]|0;
         $184 = $13;
         $185 = (_is_word_repeated($180,$183,$184)|0);
         $186 = ($185|0)!=(0);
         if ($186) {
          $187 = $13;
          $188 = (($187) + -1)|0;
          $13 = $188;
          $189 = $14;
          $190 = ((($189)) + 4|0);
          $191 = HEAP32[$190>>2]|0;
          $192 = (($191) + -1)|0;
          HEAP32[$190>>2] = $192;
          break;
         } else {
          $193 = $14;
          $194 = ((($193)) + 8|0);
          $195 = HEAP32[$194>>2]|0;
          $196 = $1;
          $197 = ((($196)) + 4896|0);
          $198 = $13;
          $199 = (($197) + ($198<<2)|0);
          HEAP32[$199>>2] = $195;
          break;
         }
        }
       }
      }
     } while(0);
     $294 = $10;
     $295 = (($294) + 1)|0;
     $10 = $295;
    }
    $296 = $15;
    $297 = (($296) + 1)|0;
    $15 = $297;
   }
   $298 = $6;
   (_fclose($298)|0);
  } else {
   $37 = $5;
   $38 = HEAP32[$37>>2]|0;
   HEAP32[$vararg_buffer>>2] = $38;
   (_sprintf($7,4413,$vararg_buffer)|0);
   $39 = $1;
   _log_msg($7,3,$39);
  }
  $299 = $5;
  $300 = ((($299)) + 8|0);
  $301 = HEAP32[$300>>2]|0;
  $5 = $301;
 }
 $302 = $1;
 $303 = ((($302)) + 7208|0);
 $304 = HEAP32[$303>>2]|0;
 $305 = ($304|0)!=(0);
 if (!($305)) {
  $306 = $15;
  $307 = $1;
  $308 = ((($307)) + 7208|0);
  HEAP32[$308>>2] = $306;
 }
 $309 = $1;
 $310 = ((($309)) + 72|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = ($311|0)!=(0);
 if ($312) {
  $323 = $2;
  STACKTOP = sp;return ($323|0);
 }
 $313 = $15;
 $314 = (+($313>>>0));
 $315 = $1;
 $316 = ((($315)) + 32|0);
 $317 = +HEAPF64[$316>>3];
 $318 = $314 * $317;
 $319 = $318 / 100.0;
 $320 = (~~(($319))>>>0);
 $321 = $1;
 $322 = ((($321)) + 72|0);
 HEAP32[$322>>2] = $320;
 $323 = $2;
 STACKTOP = sp;return ($323|0);
}
function _step_1_find_frequent_words($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $vararg_buffer21 = sp + 48|0;
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $10 = sp + 68|0;
 $11 = sp + 152|0;
 $13 = sp + 120|0;
 $3 = $0;
 $4 = $1;
 $6 = 0;
 HEAP32[$10>>2] = 0;
 $14 = ((($10)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($10)) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($10)) + 12|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($10)) + 16|0);
 HEAP32[$17>>2] = 0;
 $5 = 0;
 while(1) {
  $18 = $5;
  $19 = $3;
  $20 = ((($19)) + 84|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = ((($23)) + 2228|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $5;
  $27 = (($25) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  L4: do {
   if ($29) {
    $8 = 0;
    $30 = $3;
    $31 = ((($30)) + 2228|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $5;
    $34 = (($32) + ($33<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $7 = $35;
    while(1) {
     $36 = $7;
     $37 = ($36|0)!=(0|0);
     if (!($37)) {
      break L4;
     }
     $38 = $7;
     $39 = ((($38)) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(1);
     if ($41) {
      $42 = HEAP32[$10>>2]|0;
      $43 = (($42) + 1)|0;
      HEAP32[$10>>2] = $43;
     }
     $44 = $7;
     $45 = ((($44)) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46>>>0)<=(2);
     if ($47) {
      $48 = ((($10)) + 4|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = (($49) + 1)|0;
      HEAP32[$48>>2] = $50;
     }
     $51 = $7;
     $52 = ((($51)) + 4|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53>>>0)<=(5);
     if ($54) {
      $55 = ((($10)) + 8|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($56) + 1)|0;
      HEAP32[$55>>2] = $57;
     }
     $58 = $7;
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60>>>0)<=(10);
     if ($61) {
      $62 = ((($10)) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($63) + 1)|0;
      HEAP32[$62>>2] = $64;
     }
     $65 = $7;
     $66 = ((($65)) + 4|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67>>>0)<=(20);
     if ($68) {
      $69 = ((($10)) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($70) + 1)|0;
      HEAP32[$69>>2] = $71;
     }
     $72 = $7;
     $73 = ((($72)) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $3;
     $76 = ((($75)) + 72|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($74>>>0)<($77>>>0);
     if (!($78)) {
      $98 = $6;
      $99 = (($98) + 1)|0;
      $6 = $99;
      $100 = $7;
      $101 = ((($100)) + 8|0);
      HEAP32[$101>>2] = $99;
      $102 = $7;
      $8 = $102;
      $103 = $7;
      $104 = ((($103)) + 16|0);
      $105 = HEAP32[$104>>2]|0;
      $7 = $105;
      continue;
     }
     $79 = $8;
     $80 = ($79|0)!=(0|0);
     $81 = $7;
     $82 = ((($81)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     if ($80) {
      $84 = $8;
      $85 = ((($84)) + 16|0);
      $$sink = $85;
     } else {
      $86 = $3;
      $87 = ((($86)) + 2228|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = $5;
      $90 = (($88) + ($89<<2)|0);
      $$sink = $90;
     }
     HEAP32[$$sink>>2] = $83;
     $91 = $7;
     $92 = ((($91)) + 16|0);
     $93 = HEAP32[$92>>2]|0;
     $9 = $93;
     $94 = $7;
     $95 = HEAP32[$94>>2]|0;
     _free($95);
     $96 = $7;
     _free($96);
     $97 = $9;
     $7 = $97;
    }
   }
  } while(0);
  $106 = $5;
  $107 = (($106) + 1)|0;
  $5 = $107;
 }
 $108 = $6;
 (_str_format_int_grouped($13,$108)|0);
 HEAP32[$vararg_buffer>>2] = $13;
 (_sprintf($11,3162,$vararg_buffer)|0);
 $109 = $3;
 _log_msg($11,5,$109);
 $110 = $6;
 $111 = ($110|0)!=(0);
 if ($111) {
  $112 = HEAP32[$10>>2]|0;
  (_str_format_int_grouped($13,$112)|0);
  $113 = HEAP32[$10>>2]|0;
  $114 = (+($113>>>0));
  $115 = $4;
  $116 = (+($115>>>0));
  $117 = $114 / $116;
  $12 = $117;
  $118 = $12;
  $119 = $118 * 100.0;
  $120 = (~~(($119)));
  HEAP32[$vararg_buffer1>>2] = $120;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $13;
  (_sprintf($11,3192,$vararg_buffer1)|0);
  $121 = $3;
  _log_msg($11,6,$121);
  $122 = ((($10)) + 4|0);
  $123 = HEAP32[$122>>2]|0;
  (_str_format_int_grouped($13,$123)|0);
  $124 = ((($10)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (+($125>>>0));
  $127 = $4;
  $128 = (+($127>>>0));
  $129 = $126 / $128;
  $12 = $129;
  $130 = $12;
  $131 = $130 * 100.0;
  $132 = (~~(($131)));
  HEAP32[$vararg_buffer5>>2] = $132;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $13;
  (_sprintf($11,3236,$vararg_buffer5)|0);
  $133 = $3;
  _log_msg($11,6,$133);
  $134 = ((($10)) + 8|0);
  $135 = HEAP32[$134>>2]|0;
  (_str_format_int_grouped($13,$135)|0);
  $136 = ((($10)) + 8|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (+($137>>>0));
  $139 = $4;
  $140 = (+($139>>>0));
  $141 = $138 / $140;
  $12 = $141;
  $142 = $12;
  $143 = $142 * 100.0;
  $144 = (~~(($143)));
  HEAP32[$vararg_buffer9>>2] = $144;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $13;
  (_sprintf($11,3289,$vararg_buffer9)|0);
  $145 = $3;
  _log_msg($11,6,$145);
  $146 = ((($10)) + 12|0);
  $147 = HEAP32[$146>>2]|0;
  (_str_format_int_grouped($13,$147)|0);
  $148 = ((($10)) + 12|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (+($149>>>0));
  $151 = $4;
  $152 = (+($151>>>0));
  $153 = $150 / $152;
  $12 = $153;
  $154 = $12;
  $155 = $154 * 100.0;
  $156 = (~~(($155)));
  HEAP32[$vararg_buffer13>>2] = $156;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $13;
  (_sprintf($11,3342,$vararg_buffer13)|0);
  $157 = $3;
  _log_msg($11,6,$157);
  $158 = ((($10)) + 16|0);
  $159 = HEAP32[$158>>2]|0;
  (_str_format_int_grouped($13,$159)|0);
  $160 = ((($10)) + 16|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (+($161>>>0));
  $163 = $4;
  $164 = (+($163>>>0));
  $165 = $162 / $164;
  $12 = $165;
  $166 = $12;
  $167 = $166 * 100.0;
  $168 = (~~(($167)));
  HEAP32[$vararg_buffer17>>2] = $168;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = $13;
  (_sprintf($11,3396,$vararg_buffer17)|0);
  $169 = $3;
  _log_msg($11,6,$169);
  $170 = $4;
  $171 = $6;
  $172 = (($170) - ($171))|0;
  (_str_format_int_grouped($13,$172)|0);
  $173 = $4;
  $174 = $6;
  $175 = (($173) - ($174))|0;
  $176 = (+($175>>>0));
  $177 = $4;
  $178 = (+($177>>>0));
  $179 = $176 / $178;
  $12 = $179;
  $180 = $12;
  $181 = $180 * 100.0;
  $182 = $181;
  $183 = $3;
  $184 = ((($183)) + 72|0);
  $185 = HEAP32[$184>>2]|0;
  HEAPF64[$vararg_buffer21>>3] = $182;
  $vararg_ptr24 = ((($vararg_buffer21)) + 8|0);
  HEAP32[$vararg_ptr24>>2] = $13;
  $vararg_ptr25 = ((($vararg_buffer21)) + 12|0);
  HEAP32[$vararg_ptr25>>2] = $185;
  (_sprintf($11,3450,$vararg_buffer21)|0);
  $186 = $3;
  _log_msg($11,6,$186);
  $187 = $6;
  $2 = $187;
  $188 = $2;
  STACKTOP = sp;return ($188|0);
 } else {
  $2 = 0;
  $188 = $2;
  STACKTOP = sp;return ($188|0);
 }
 return (0)|0;
}
function _debug_1_print_frequent_words($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp;
 $6 = sp + 64|0;
 $7 = sp + 32|0;
 $1 = $0;
 $8 = $1;
 $9 = ((($8)) + 2268|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10<<2;
 $12 = (_malloc($11)|0);
 $2 = $12;
 $13 = $2;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = $1;
  _log_msg(3518,3,$15);
  _exit(1);
  // unreachable;
 }
 $4 = 0;
 $3 = 0;
 while(1) {
  $16 = $3;
  $17 = $1;
  $18 = ((($17)) + 84|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $1;
  $22 = ((($21)) + 2228|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $3;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(0|0);
  L7: do {
   if ($27) {
    $28 = $1;
    $29 = ((($28)) + 2228|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $3;
    $32 = (($30) + ($31<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $5 = $33;
    while(1) {
     $34 = $5;
     $35 = ($34|0)!=(0|0);
     if (!($35)) {
      break L7;
     }
     $36 = $5;
     $37 = $2;
     $38 = $4;
     $39 = (($37) + ($38<<2)|0);
     HEAP32[$39>>2] = $36;
     $40 = $4;
     $41 = (($40) + 1)|0;
     $4 = $41;
     $42 = $5;
     $43 = ((($42)) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $5 = $44;
    }
   }
  } while(0);
  $45 = $3;
  $46 = (($45) + 1)|0;
  $3 = $46;
 }
 $47 = $2;
 $48 = $1;
 $49 = ((($48)) + 2268|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $1;
 _sort_elements($47,$50,$51);
 $3 = 0;
 while(1) {
  $52 = $3;
  $53 = $1;
  $54 = ((($53)) + 2268|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($52>>>0)<($55>>>0);
  if (!($56)) {
   break;
  }
  $57 = $2;
  $58 = $3;
  $59 = (($57) + ($58<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  (_str_format_int_grouped($7,$62)|0);
  $63 = $2;
  $64 = $3;
  $65 = (($63) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP32[$66>>2]|0;
  HEAP32[$vararg_buffer>>2] = $67;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  (_sprintf($6,3577,$vararg_buffer)|0);
  $68 = $1;
  _log_msg($6,7,$68);
  $69 = $3;
  $70 = (($69) + 1)|0;
  $3 = $70;
 }
 $71 = $2;
 _free($71);
 STACKTOP = sp;return;
}
function _add_elem($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $5;
 $14 = $7;
 $15 = $8;
 $16 = (_str2hash($13,$14,$15)|0);
 $10 = $16;
 $17 = $6;
 $18 = $10;
 $19 = (($17) + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  $88 = (_malloc(20)|0);
  $11 = $88;
  $89 = $11;
  $90 = ($89|0)!=(0|0);
  if (!($90)) {
   $91 = $9;
   _log_msg(3617,3,$91);
   _exit(1);
   // unreachable;
  }
  $92 = $5;
  $93 = (_strlen($92)|0);
  $94 = (($93) + 1)|0;
  $95 = (_malloc($94)|0);
  $96 = $11;
  HEAP32[$96>>2] = $95;
  $97 = $11;
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)!=(0|0);
  if (!($99)) {
   $100 = $9;
   _log_msg(3617,3,$100);
   _exit(1);
   // unreachable;
  }
  $101 = $11;
  $102 = HEAP32[$101>>2]|0;
  $103 = $5;
  (_strcpy($102,$103)|0);
  $104 = $11;
  $105 = ((($104)) + 4|0);
  HEAP32[$105>>2] = 1;
  $106 = $11;
  $107 = ((($106)) + 16|0);
  HEAP32[$107>>2] = 0;
  $108 = $11;
  $109 = $6;
  $110 = $10;
  $111 = (($109) + ($110<<2)|0);
  HEAP32[$111>>2] = $108;
  $112 = $11;
  STACKTOP = sp;return ($112|0);
 }
 $12 = 0;
 $22 = $6;
 $23 = $10;
 $24 = (($22) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $11 = $25;
 while(1) {
  $26 = $11;
  $27 = ($26|0)!=(0|0);
  if (!($27)) {
   break;
  }
  $28 = $5;
  $29 = $11;
  $30 = HEAP32[$29>>2]|0;
  $31 = (_strcmp($28,$30)|0);
  $32 = ($31|0)!=(0);
  if (!($32)) {
   break;
  }
  $33 = $11;
  $12 = $33;
  $34 = $11;
  $35 = ((($34)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $11 = $36;
 }
 $37 = $11;
 $38 = ($37|0)!=(0|0);
 do {
  if ($38) {
   $39 = $11;
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 1)|0;
   HEAP32[$40>>2] = $42;
   $43 = $12;
   $44 = ($43|0)!=(0|0);
   if ($44) {
    $45 = $11;
    $46 = ((($45)) + 16|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $12;
    $49 = ((($48)) + 16|0);
    HEAP32[$49>>2] = $47;
    $50 = $6;
    $51 = $10;
    $52 = (($50) + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $11;
    $55 = ((($54)) + 16|0);
    HEAP32[$55>>2] = $53;
    $56 = $11;
    $57 = $6;
    $58 = $10;
    $59 = (($57) + ($58<<2)|0);
    $$sink = $56;$$sink1 = $59;
    break;
   } else {
    $112 = $11;
    STACKTOP = sp;return ($112|0);
   }
  } else {
   $60 = (_malloc(20)|0);
   $11 = $60;
   $61 = $11;
   $62 = ($61|0)!=(0|0);
   if (!($62)) {
    $63 = $9;
    _log_msg(3617,3,$63);
    _exit(1);
    // unreachable;
   }
   $64 = $5;
   $65 = (_strlen($64)|0);
   $66 = (($65) + 1)|0;
   $67 = (_malloc($66)|0);
   $68 = $11;
   HEAP32[$68>>2] = $67;
   $69 = $11;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)!=(0|0);
   if ($71) {
    $73 = $11;
    $74 = HEAP32[$73>>2]|0;
    $75 = $5;
    (_strcpy($74,$75)|0);
    $76 = $11;
    $77 = ((($76)) + 4|0);
    HEAP32[$77>>2] = 1;
    $78 = $6;
    $79 = $10;
    $80 = (($78) + ($79<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $11;
    $83 = ((($82)) + 16|0);
    HEAP32[$83>>2] = $81;
    $84 = $11;
    $85 = $6;
    $86 = $10;
    $87 = (($85) + ($86<<2)|0);
    $$sink = $84;$$sink1 = $87;
    break;
   } else {
    $72 = $9;
    _log_msg(3617,3,$72);
    _exit(1);
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$$sink1>>2] = $$sink;
 $112 = $11;
 STACKTOP = sp;return ($112|0);
}
function _find_elem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = 0;
 $11 = $4;
 $12 = $6;
 $13 = $7;
 $14 = (_str2hash($11,$12,$13)|0);
 $8 = $14;
 $15 = $5;
 $16 = $8;
 $17 = (($15) + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $9 = $18;
 while(1) {
  $19 = $9;
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   break;
  }
  $21 = $4;
  $22 = $9;
  $23 = HEAP32[$22>>2]|0;
  $24 = (_strcmp($21,$23)|0);
  $25 = ($24|0)!=(0);
  if (!($25)) {
   break;
  }
  $26 = $9;
  $10 = $26;
  $27 = $9;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $9 = $29;
 }
 $30 = $9;
 $31 = ($30|0)!=(0|0);
 $32 = $10;
 $33 = ($32|0)!=(0|0);
 $or$cond = $31 & $33;
 if (!($or$cond)) {
  $49 = $9;
  STACKTOP = sp;return ($49|0);
 }
 $34 = $9;
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $10;
 $38 = ((($37)) + 16|0);
 HEAP32[$38>>2] = $36;
 $39 = $5;
 $40 = $8;
 $41 = (($39) + ($40<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $9;
 $44 = ((($43)) + 16|0);
 HEAP32[$44>>2] = $42;
 $45 = $9;
 $46 = $5;
 $47 = $8;
 $48 = (($46) + ($47<<2)|0);
 HEAP32[$48>>2] = $45;
 $49 = $9;
 STACKTOP = sp;return ($49|0);
}
function _update_word_dep_matrix($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 1;
 while(1) {
  $8 = $6;
  $9 = $4;
  $10 = ($8|0)<=($9|0);
  if (!($10)) {
   break;
  }
  $7 = 1;
  while(1) {
   $11 = $7;
   $12 = $4;
   $13 = ($11|0)<=($12|0);
   if (!($13)) {
    break;
   }
   $14 = $5;
   $15 = ((($14)) + 6948|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $3;
   $18 = $6;
   $19 = (($17) + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $5;
   $22 = ((($21)) + 4892|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = Math_imul($20, $23)|0;
   $25 = $3;
   $26 = $7;
   $27 = (($25) + ($26<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($24) + ($28))|0;
   $30 = (($16) + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 1)|0;
   HEAP32[$30>>2] = $32;
   $33 = $7;
   $34 = (($33) + 1)|0;
   $7 = $34;
  }
  $35 = $6;
  $36 = (($35) + 1)|0;
  $6 = $36;
 }
 STACKTOP = sp;return;
}
function _step_3_join_clusters($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 48|0;
 $3 = sp + 16|0;
 $1 = $0;
 $4 = $1;
 _log_msg(3656,5,$4);
 $5 = $1;
 _set_token($5);
 $6 = $1;
 _join_cluster($6);
 $7 = $1;
 $8 = ((($7)) + 4884|0);
 $9 = HEAP32[$8>>2]|0;
 (_str_format_int_grouped($3,$9)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 (_sprintf($2,3676,$vararg_buffer)|0);
 $10 = $1;
 _log_msg($2,6,$10);
 $11 = $1;
 $12 = ((($11)) + 4888|0);
 $13 = HEAP32[$12>>2]|0;
 (_str_format_int_grouped($3,$13)|0);
 HEAP32[$vararg_buffer1>>2] = $3;
 (_sprintf($2,3739,$vararg_buffer1)|0);
 $14 = $1;
 _log_msg($2,6,$14);
 STACKTOP = sp;return;
}
function _set_token($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $2 = $1;
  $3 = ((($2)) + 2304|0);
  $4 = $1;
  $5 = ((($4)) + 2228|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = ((($7)) + 84|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = ((($10)) + 2256|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_find_elem($3,$6,$9,$12)|0);
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = $1;
  $16 = ((($15)) + 2304|0);
  _gen_random_string($16,9);
 }
 STACKTOP = sp;return;
}
function _join_cluster($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 1;
 while(1) {
  $5 = $2;
  $6 = $1;
  $7 = ((($6)) + 96|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<=($8|0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = ((($10)) + 172|0);
  $12 = $2;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $3 = $14;
  while(1) {
   $15 = $3;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    break;
   }
   $17 = $3;
   $18 = $1;
   _check_cluster_for_join_cluster($17,$18);
   $19 = $3;
   $20 = ((($19)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $3 = $21;
  }
  $22 = $2;
  $23 = (($22) + 1)|0;
  $2 = $23;
 }
 $2 = 1;
 while(1) {
  $24 = $2;
  $25 = $1;
  $26 = ((($25)) + 96|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24|0)<=($27|0);
  if (!($28)) {
   break;
  }
  $29 = $1;
  $30 = ((($29)) + 2832|0);
  $31 = $2;
  $32 = (($30) + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $4 = $33;
  while(1) {
   $34 = $4;
   $35 = ($34|0)!=(0|0);
   if (!($35)) {
    break;
   }
   $36 = $4;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $4;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 4|0);
   HEAP32[$42>>2] = $38;
   $43 = $4;
   $44 = ((($43)) + 28|0);
   $45 = HEAP32[$44>>2]|0;
   $4 = $45;
  }
  $46 = $2;
  $47 = (($46) + 1)|0;
  $2 = $47;
 }
 STACKTOP = sp;return;
}
function _check_cluster_for_join_cluster($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<=($7|0);
  if (!($8)) {
   break;
  }
  $9 = $3;
  $10 = ((($9)) + 2314|0);
  $11 = $4;
  $12 = (($10) + ($11)|0);
  HEAP8[$12>>0] = 0;
  $13 = $4;
  $14 = (($13) + 1)|0;
  $4 = $14;
 }
 $4 = 1;
 while(1) {
  $15 = $4;
  $16 = $2;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15|0)<=($17|0);
  if (!($18)) {
   break;
  }
  $19 = $2;
  $20 = $4;
  $21 = $3;
  $22 = (+_cal_word_weight($19,$20,$21));
  $23 = $3;
  $24 = ((($23)) + 40|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 < $25;
  if ($26) {
   $27 = $3;
   $28 = ((($27)) + 2314|0);
   HEAP8[$28>>0] = 1;
   $29 = $3;
   $30 = ((($29)) + 2314|0);
   $31 = $4;
   $32 = (($30) + ($31)|0);
   HEAP8[$32>>0] = 1;
  }
  $33 = $4;
  $34 = (($33) + 1)|0;
  $4 = $34;
 }
 $35 = $3;
 $36 = ((($35)) + 2314|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37 << 24 >> 24;
 $39 = ($38|0)==(1);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = $2;
 $41 = ((($40)) + 24|0);
 HEAP8[$41>>0] = 1;
 $42 = $2;
 $43 = $3;
 _join_cluster_with_token($42,$43);
 STACKTOP = sp;return;
}
function _cal_word_weight($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6;
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 switch ($9|0) {
 case 1:  {
  $10 = $4;
  $11 = $5;
  $12 = $6;
  $13 = (+_cal_word_weight_function_1($10,$11,$12));
  $3 = $13;
  $19 = $3;
  STACKTOP = sp;return (+$19);
  break;
 }
 case 2:  {
  $14 = $4;
  $15 = $5;
  $16 = $6;
  $17 = (+_cal_word_weight_function_2($14,$15,$16));
  $3 = $17;
  $19 = $3;
  STACKTOP = sp;return (+$19);
  break;
 }
 default: {
  $18 = $6;
  _log_msg(3914,3,$18);
  _exit(1);
  // unreachable;
 }
 }
 return +(0.0);
}
function _join_cluster_with_token($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(20512|0);
 $4 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = ((($8)) + 4884|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$9>>2] = $11;
 HEAP8[$4>>0] = 0;
 $5 = 1;
 while(1) {
  $12 = $5;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12|0)<=($14|0);
  if (!($15)) {
   break;
  }
  $16 = $3;
  $17 = ((($16)) + 2314|0);
  $18 = $5;
  $19 = (($17) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)==(0);
  if ($22) {
   $23 = $2;
   $24 = ((($23)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $5;
   $27 = (($25) + ($26<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   (_strcat($4,$29)|0);
  } else {
   $30 = $3;
   $31 = ((($30)) + 2304|0);
   (_strcat($4,$31)|0);
  }
  $32 = (_strlen($4)|0);
  $6 = $32;
  $33 = $6;
  $34 = (($4) + ($33)|0);
  HEAP8[$34>>0] = 10;
  $35 = $6;
  $36 = (($35) + 1)|0;
  $37 = (($4) + ($36)|0);
  HEAP8[$37>>0] = 0;
  $38 = $5;
  $39 = (($38) + 1)|0;
  $5 = $39;
 }
 $40 = $3;
 $41 = ((($40)) + 2224|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $3;
 $44 = ((($43)) + 2248|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $3;
 $47 = ((($46)) + 2244|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $3;
 $50 = (_add_elem($4,$42,$45,$48,$49)|0);
 $7 = $50;
 $51 = $7;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(1);
 if (!($54)) {
  $62 = $2;
  $63 = $7;
  $64 = $3;
  _adjust_cluster_with_token_instance($62,$63,$64);
  STACKTOP = sp;return;
 }
 $55 = $3;
 $56 = ((($55)) + 4888|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + 1)|0;
 HEAP32[$56>>2] = $58;
 $59 = $2;
 $60 = $7;
 $61 = $3;
 (_create_cluster_with_token_instance($59,$60,$61)|0);
 $62 = $2;
 $63 = $7;
 $64 = $3;
 _adjust_cluster_with_token_instance($62,$63,$64);
 STACKTOP = sp;return;
}
function _create_cluster_with_token_instance($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $$sink5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = (_malloc(36)|0);
 $6 = $8;
 $9 = $6;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $11 = $5;
  _log_msg(3849,3,$11);
  _exit(1);
  // unreachable;
 }
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 $15 = $14<<2;
 $16 = (_malloc($15)|0);
 $17 = $6;
 $18 = ((($17)) + 16|0);
 HEAP32[$18>>2] = $16;
 $19 = $6;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  $23 = $5;
  _log_msg(3849,3,$23);
  _exit(1);
  // unreachable;
 }
 $24 = $3;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 $27 = $26<<2;
 $28 = (_malloc($27)|0);
 $29 = $6;
 $30 = ((($29)) + 32|0);
 HEAP32[$30>>2] = $28;
 $31 = $6;
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = $5;
  _log_msg(3849,3,$35);
  _exit(1);
  // unreachable;
 }
 $36 = $3;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 1)|0;
 $39 = $38<<1;
 $40 = $39<<2;
 $41 = (_malloc($40)|0);
 $42 = $6;
 $43 = ((($42)) + 8|0);
 HEAP32[$43>>2] = $41;
 $44 = $6;
 $45 = ((($44)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0|0);
 if (!($47)) {
  $48 = $5;
  _log_msg(3849,3,$48);
  _exit(1);
  // unreachable;
 }
 $49 = $6;
 $50 = ((($49)) + 16|0);
 $51 = HEAP32[$50>>2]|0;
 HEAP32[$51>>2] = 0;
 $52 = $6;
 $53 = ((($52)) + 32|0);
 $54 = HEAP32[$53>>2]|0;
 HEAP32[$54>>2] = 0;
 $7 = 1;
 while(1) {
  $55 = $7;
  $56 = $3;
  $57 = HEAP32[$56>>2]|0;
  $58 = ($55|0)<=($57|0);
  $59 = $3;
  if (!($58)) {
   break;
  }
  $60 = ((($59)) + 16|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $7;
  $63 = (($61) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $6;
  $66 = ((($65)) + 16|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $7;
  $69 = (($67) + ($68<<2)|0);
  HEAP32[$69>>2] = $64;
  $70 = $3;
  $71 = ((($70)) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $7;
  $74 = $73<<1;
  $75 = (($72) + ($74<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $6;
  $78 = ((($77)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $7;
  $81 = $80<<1;
  $82 = (($79) + ($81<<2)|0);
  HEAP32[$82>>2] = $76;
  $83 = $3;
  $84 = ((($83)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $7;
  $87 = $86<<1;
  $88 = (($87) + 1)|0;
  $89 = (($85) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $6;
  $92 = ((($91)) + 8|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $7;
  $95 = $94<<1;
  $96 = (($95) + 1)|0;
  $97 = (($93) + ($96<<2)|0);
  HEAP32[$97>>2] = $90;
  $98 = $6;
  $99 = ((($98)) + 32|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $7;
  $102 = (($100) + ($101<<2)|0);
  HEAP32[$102>>2] = 0;
  $103 = $7;
  $104 = (($103) + 1)|0;
  $7 = $104;
 }
 $105 = ((($59)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[$106>>2]|0;
 $108 = $6;
 $109 = ((($108)) + 8|0);
 $110 = HEAP32[$109>>2]|0;
 HEAP32[$110>>2] = $107;
 $111 = $3;
 $112 = ((($111)) + 8|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ((($113)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $6;
 $117 = ((($116)) + 8|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ((($118)) + 4|0);
 HEAP32[$119>>2] = $115;
 $120 = $3;
 $121 = HEAP32[$120>>2]|0;
 $122 = $6;
 HEAP32[$122>>2] = $121;
 $123 = $6;
 $124 = ((($123)) + 4|0);
 HEAP32[$124>>2] = 0;
 $125 = $3;
 $126 = ((($125)) + 24|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = $6;
 $129 = ((($128)) + 24|0);
 HEAP8[$129>>0] = $127;
 $130 = $3;
 $131 = ((($130)) + 20|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = $6;
 $134 = ((($133)) + 20|0);
 HEAP32[$134>>2] = $132;
 $135 = $6;
 $136 = $4;
 $137 = ((($136)) + 12|0);
 HEAP32[$137>>2] = $135;
 $138 = $4;
 $139 = $6;
 $140 = ((($139)) + 12|0);
 HEAP32[$140>>2] = $138;
 $141 = $5;
 $142 = ((($141)) + 2832|0);
 $143 = $6;
 $144 = HEAP32[$143>>2]|0;
 $145 = (($142) + ($144<<2)|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)!=(0|0);
 if ($147) {
  $148 = $5;
  $149 = ((($148)) + 2832|0);
  $150 = $6;
  $151 = HEAP32[$150>>2]|0;
  $152 = (($149) + ($151<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $6;
  $155 = ((($154)) + 28|0);
  HEAP32[$155>>2] = $153;
  $156 = $6;
  $157 = $5;
  $158 = ((($157)) + 2832|0);
  $159 = $6;
  $$sink = $156;$$sink2 = $158;$$sink5 = $159;
  $166 = HEAP32[$$sink5>>2]|0;
  $167 = (($$sink2) + ($166<<2)|0);
  HEAP32[$167>>2] = $$sink;
  $168 = $6;
  STACKTOP = sp;return ($168|0);
 } else {
  $160 = $6;
  $161 = ((($160)) + 28|0);
  HEAP32[$161>>2] = 0;
  $162 = $6;
  $163 = $5;
  $164 = ((($163)) + 2832|0);
  $165 = $6;
  $$sink = $162;$$sink2 = $164;$$sink5 = $165;
  $166 = HEAP32[$$sink5>>2]|0;
  $167 = (($$sink2) + ($166<<2)|0);
  HEAP32[$167>>2] = $$sink;
  $168 = $6;
  STACKTOP = sp;return ($168|0);
 }
 return (0)|0;
}
function _adjust_cluster_with_token_instance($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $6;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($14))|0;
 HEAP32[$16>>2] = $18;
 $8 = 0;
 while(1) {
  $19 = $8;
  $20 = $6;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($19|0)<=($21|0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $8;
  $27 = $26<<1;
  $28 = (($25) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $6;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $8;
  $34 = $33<<1;
  $35 = (($32) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($29|0)<($36|0);
  if ($37) {
   $38 = $3;
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $8;
   $42 = $41<<1;
   $43 = (($40) + ($42<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $6;
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $8;
   $49 = $48<<1;
   $50 = (($47) + ($49<<2)|0);
   HEAP32[$50>>2] = $44;
  }
  $51 = $3;
  $52 = ((($51)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $8;
  $55 = $54<<1;
  $56 = (($55) + 1)|0;
  $57 = (($53) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $6;
  $60 = ((($59)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $8;
  $63 = $62<<1;
  $64 = (($63) + 1)|0;
  $65 = (($61) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($58|0)>($66|0);
  if ($67) {
   $68 = $3;
   $69 = ((($68)) + 8|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $8;
   $72 = $71<<1;
   $73 = (($72) + 1)|0;
   $74 = (($70) + ($73<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $6;
   $77 = ((($76)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $8;
   $80 = $79<<1;
   $81 = (($80) + 1)|0;
   $82 = (($78) + ($81<<2)|0);
   HEAP32[$82>>2] = $75;
  }
  $83 = $8;
  $84 = (($83) + 1)|0;
  $8 = $84;
 }
 $8 = 1;
 while(1) {
  $85 = $8;
  $86 = $6;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($85|0)<=($87|0);
  if (!($88)) {
   label = 19;
   break;
  }
  $89 = $5;
  $90 = ((($89)) + 2314|0);
  $91 = $8;
  $92 = (($90) + ($91)|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93 << 24 >> 24;
  $95 = ($94|0)==(1);
  if ($95) {
   $96 = $6;
   $97 = $8;
   $98 = $3;
   $99 = ((($98)) + 16|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $8;
   $102 = (($100) + ($101<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (_check_if_token_key_is_exist($96,$97,$103)|0);
   $105 = ($104|0)!=(0);
   if (!($105)) {
    $106 = (_malloc(8)|0);
    $7 = $106;
    $107 = $7;
    $108 = ($107|0)!=(0|0);
    if (!($108)) {
     label = 13;
     break;
    }
    $110 = $3;
    $111 = ((($110)) + 16|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $8;
    $114 = (($112) + ($113<<2)|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $7;
    HEAP32[$116>>2] = $115;
    $117 = $6;
    $118 = ((($117)) + 32|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $8;
    $121 = (($119) + ($120<<2)|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)!=(0|0);
    if ($123) {
     $124 = $6;
     $125 = ((($124)) + 32|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $8;
     $128 = (($126) + ($127<<2)|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = $7;
     $131 = ((($130)) + 4|0);
     HEAP32[$131>>2] = $129;
     $132 = $7;
     $133 = $6;
     $134 = ((($133)) + 32|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $8;
     $137 = (($135) + ($136<<2)|0);
     $$sink = $132;$$sink1 = $137;
    } else {
     $138 = $7;
     $139 = ((($138)) + 4|0);
     HEAP32[$139>>2] = 0;
     $140 = $7;
     $141 = $6;
     $142 = ((($141)) + 32|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $8;
     $145 = (($143) + ($144<<2)|0);
     $$sink = $140;$$sink1 = $145;
    }
    HEAP32[$$sink1>>2] = $$sink;
   }
  }
  $146 = $8;
  $147 = (($146) + 1)|0;
  $8 = $147;
 }
 if ((label|0) == 13) {
  $109 = $5;
  _log_msg(3784,3,$109);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 19) {
  STACKTOP = sp;return;
 }
}
function _check_if_token_key_is_exist($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (($10) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $7 = $13;
 while(1) {
  $14 = $7;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   label = 6;
   break;
  }
  $16 = $7;
  $17 = HEAP32[$16>>2]|0;
  $18 = $6;
  $19 = ($17|0)==($18|0);
  if ($19) {
   label = 4;
   break;
  }
  $20 = $7;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $7 = $22;
 }
 if ((label|0) == 4) {
  $3 = 1;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _cal_word_weight_function_1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0.0;
 $7 = 1;
 while(1) {
  $9 = $7;
  $10 = $3;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)<=($11|0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = ((($13)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $7;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $4;
  $23 = (($21) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $5;
  $26 = (+_cal_word_dep($18,$24,$25));
  $27 = $6;
  $28 = $27 + $26;
  $6 = $28;
  $29 = $7;
  $30 = (($29) + 1)|0;
  $7 = $30;
 }
 $31 = $6;
 $32 = $3;
 $33 = HEAP32[$32>>2]|0;
 $34 = (+($33|0));
 $35 = $31 / $34;
 $8 = $35;
 $36 = $8;
 STACKTOP = sp;return (+$36);
}
function _cal_word_weight_function_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0.0;
 $10 = $4;
 $11 = $6;
 $12 = ((($11)) + 2828|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)!=($13|0);
 if ($14) {
  $15 = $4;
  $16 = $6;
  _get_unique_frequent_words_out_of_cluster($15,$16);
 }
 $17 = $6;
 $18 = ((($17)) + 4896|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19>>>0)<(1);
 if ($20) {
  $8 = 0;
 }
 $21 = $6;
 $22 = ((($21)) + 4896|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 if ($24) {
  $8 = 0;
  $3 = 1.0;
  $58 = $3;
  STACKTOP = sp;return (+$58);
 }
 $8 = 1;
 while(1) {
  $25 = $8;
  $26 = $6;
  $27 = ((($26)) + 4896|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25>>>0)<=($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $6;
  $31 = ((($30)) + 4896|0);
  $32 = $8;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $4;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $6;
  $44 = (+_cal_word_dep_number_version($34,$42,$43));
  $45 = $7;
  $46 = $45 + $44;
  $7 = $46;
  $47 = $8;
  $48 = (($47) + 1)|0;
  $8 = $48;
 }
 $49 = $7;
 $50 = $49 - 1.0;
 $51 = $6;
 $52 = ((($51)) + 4896|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) - 1)|0;
 $55 = (+($54>>>0));
 $56 = $50 / $55;
 $9 = $56;
 $57 = $9;
 $3 = $57;
 $58 = $3;
 STACKTOP = sp;return (+$58);
}
function _get_unique_frequent_words_out_of_cluster($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $4 = 1;
 while(1) {
  $6 = $4;
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<=($8|0);
  $10 = $5;
  if (!($9)) {
   break;
  }
  $11 = (($10) + 1)|0;
  $5 = $11;
  $12 = $3;
  $13 = ((($12)) + 4896|0);
  $14 = $2;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $4;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $5;
  $23 = (_is_word_repeated($13,$21,$22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $5;
   $26 = (($25) + -1)|0;
   $5 = $26;
  } else {
   $27 = $2;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $4;
   $31 = (($29) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $3;
   $36 = ((($35)) + 4896|0);
   $37 = $4;
   $38 = (($36) + ($37<<2)|0);
   HEAP32[$38>>2] = $34;
  }
  $39 = $4;
  $40 = (($39) + 1)|0;
  $4 = $40;
 }
 $41 = $3;
 $42 = ((($41)) + 4896|0);
 HEAP32[$42>>2] = $10;
 $43 = $2;
 $44 = $3;
 $45 = ((($44)) + 2828|0);
 HEAP32[$45>>2] = $43;
 STACKTOP = sp;return;
}
function _cal_word_dep_number_version($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $10 = ((($9)) + 6948|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = $5;
 $14 = ((($13)) + 4892|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $17 = $3;
 $18 = (($16) + ($17))|0;
 $19 = (($11) + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $7 = $20;
 $21 = $5;
 $22 = ((($21)) + 6948|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $3;
 $25 = $5;
 $26 = ((($25)) + 4892|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = Math_imul($24, $27)|0;
 $29 = $4;
 $30 = (($28) + ($29))|0;
 $31 = (($23) + ($30<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $8 = $32;
 $33 = $8;
 $34 = (+($33>>>0));
 $35 = $7;
 $36 = (+($35>>>0));
 $37 = $34 / $36;
 $6 = $37;
 $38 = $6;
 STACKTOP = sp;return (+$38);
}
function _cal_word_dep($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $10 = ((($9)) + 6948|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = ((($15)) + 4892|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = Math_imul($14, $17)|0;
 $19 = $3;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21))|0;
 $23 = (($11) + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $7 = $24;
 $25 = $5;
 $26 = ((($25)) + 6948|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $5;
 $32 = ((($31)) + 4892|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = Math_imul($30, $33)|0;
 $35 = $4;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($34) + ($37))|0;
 $39 = (($27) + ($38<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $8 = $40;
 $41 = $8;
 $42 = (+($41>>>0));
 $43 = $7;
 $44 = (+($43>>>0));
 $45 = $42 / $44;
 $6 = $45;
 $46 = $6;
 STACKTOP = sp;return (+$46);
}
function _find_words($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6;
 $8 = ((($7)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 switch ($9|0) {
 case 1: case 0:  {
  $10 = $4;
  $11 = $5;
  $12 = $6;
  $13 = (_find_words_debug_0_1($10,$11,$12)|0);
  $3 = $13;
  break;
 }
 case 2:  {
  $14 = $4;
  $15 = $5;
  $16 = $6;
  $17 = (_find_words_debug_2($14,$15,$16)|0);
  $3 = $17;
  break;
 }
 case 3:  {
  $18 = $4;
  $19 = $5;
  $20 = $6;
  $21 = (_find_words_debug_3($18,$19,$20)|0);
  $3 = $21;
  break;
 }
 default: {
  $3 = 0;
 }
 }
 $22 = $3;
 STACKTOP = sp;return ($22|0);
}
function _find_words_debug_0_1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 848|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(848|0);
 $7 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = 0;
 $14 = $4;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 << 24 >> 24;
 $17 = ($16|0)==(0);
 if ($17) {
  $3 = 0;
  $250 = $3;
  STACKTOP = sp;return ($250|0);
 }
 $18 = $4;
 $19 = (_strlen($18)|0);
 $10 = $19;
 $20 = $6;
 $21 = ((($20)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $10;
 $24 = ($22|0)>=($23|0);
 if ($24) {
  $3 = 0;
  $250 = $3;
  STACKTOP = sp;return ($250|0);
 }
 $25 = $6;
 $26 = ((($25)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $6;
  $30 = ((($29)) + 48|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $4;
  $33 = (($32) + ($31)|0);
  $4 = $33;
  $34 = $6;
  $35 = ((($34)) + 48|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $10;
  $38 = (($37) - ($36))|0;
  $10 = $38;
 }
 $39 = $6;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $6;
  $44 = ((($43)) + 140|0);
  $45 = $4;
  $46 = (_regexec($44,$45,100,$7,0)|0);
  $47 = ($46|0)!=(0);
  if ($47) {
   $3 = 0;
   $250 = $3;
   STACKTOP = sp;return ($250|0);
  }
  $48 = $6;
  $49 = ((($48)) + 68|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0|0);
  if ($51) {
   $11 = 0;
   $52 = $6;
   $53 = ((($52)) + 68|0);
   $54 = HEAP32[$53>>2]|0;
   $12 = $54;
   while(1) {
    $55 = $12;
    $56 = ($55|0)!=(0|0);
    if (!($56)) {
     break;
    }
    $57 = $12;
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)!=(0|0);
    $60 = $12;
    $61 = ((($60)) + 4|0);
    $62 = HEAP32[$61>>2]|0;
    do {
     if ($59) {
      $63 = $11;
      $64 = (($63) + ($62))|0;
      $11 = $64;
     } else {
      $65 = ($62|0)!=(0);
      if (!($65)) {
       $66 = $10;
       $67 = $11;
       $68 = (($67) + ($66))|0;
       $11 = $68;
       break;
      }
      $69 = $12;
      $70 = ((($69)) + 4|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($7) + ($71<<3)|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)!=(-1);
      if ($74) {
       $75 = $12;
       $76 = ((($75)) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = (($7) + ($77<<3)|0);
       $79 = ((($78)) + 4|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = ($80|0)!=(-1);
       if ($81) {
        $82 = $12;
        $83 = ((($82)) + 4|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = (($7) + ($84<<3)|0);
        $86 = ((($85)) + 4|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = $12;
        $89 = ((($88)) + 4|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = (($7) + ($90<<3)|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = (($87) - ($92))|0;
        $94 = $11;
        $95 = (($94) + ($93))|0;
        $11 = $95;
       }
      }
     }
    } while(0);
    $96 = $12;
    $97 = ((($96)) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    $12 = $98;
   }
   $8 = 0;
   $99 = $11;
   $100 = (($99) + 1)|0;
   $101 = (_malloc($100)|0);
   $13 = $101;
   $102 = $13;
   $103 = ($102|0)!=(0|0);
   $104 = $6;
   if (!($103)) {
    _log_msg(3972,3,$104);
    _exit(1);
    // unreachable;
   }
   $105 = ((($104)) + 68|0);
   $106 = HEAP32[$105>>2]|0;
   $12 = $106;
   while(1) {
    $107 = $12;
    $108 = ($107|0)!=(0|0);
    if (!($108)) {
     break;
    }
    $109 = $12;
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110|0)!=(0|0);
    do {
     if ($111) {
      $112 = $13;
      $113 = $8;
      $114 = (($112) + ($113)|0);
      $115 = $12;
      $116 = HEAP32[$115>>2]|0;
      $117 = $12;
      $118 = ((($117)) + 4|0);
      $119 = HEAP32[$118>>2]|0;
      (_strncpy($114,$116,$119)|0);
      $120 = $12;
      $121 = ((($120)) + 4|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = $8;
      $124 = (($123) + ($122))|0;
      $8 = $124;
     } else {
      $125 = $12;
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)!=(0);
      if (!($128)) {
       $129 = $13;
       $130 = $8;
       $131 = (($129) + ($130)|0);
       $132 = $4;
       $133 = $10;
       (_strncpy($131,$132,$133)|0);
       $134 = $10;
       $135 = $8;
       $136 = (($135) + ($134))|0;
       $8 = $136;
       break;
      }
      $137 = $12;
      $138 = ((($137)) + 4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = (($7) + ($139<<3)|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)!=(-1);
      if ($142) {
       $143 = $12;
       $144 = ((($143)) + 4|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = (($7) + ($145<<3)|0);
       $147 = ((($146)) + 4|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($148|0)!=(-1);
       if ($149) {
        $150 = $12;
        $151 = ((($150)) + 4|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = (($7) + ($152<<3)|0);
        $154 = ((($153)) + 4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = $12;
        $157 = ((($156)) + 4|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = (($7) + ($158<<3)|0);
        $160 = HEAP32[$159>>2]|0;
        $161 = (($155) - ($160))|0;
        $11 = $161;
        $162 = $13;
        $163 = $8;
        $164 = (($162) + ($163)|0);
        $165 = $4;
        $166 = $12;
        $167 = ((($166)) + 4|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = (($7) + ($168<<3)|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (($165) + ($170)|0);
        $172 = $11;
        (_strncpy($164,$171,$172)|0);
        $173 = $11;
        $174 = $8;
        $175 = (($174) + ($173))|0;
        $8 = $175;
       }
      }
     }
    } while(0);
    $176 = $12;
    $177 = ((($176)) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    $12 = $178;
   }
   $179 = $13;
   $180 = $8;
   $181 = (($179) + ($180)|0);
   HEAP8[$181>>0] = 0;
   $182 = $13;
   $4 = $182;
  }
 }
 $8 = 0;
 while(1) {
  $183 = $8;
  $184 = ($183|0)<(512);
  if (!($184)) {
   break;
  }
  $185 = $6;
  $186 = ((($185)) + 108|0);
  $187 = $4;
  $188 = (_regexec($186,$187,1,$7,0)|0);
  $189 = ($188|0)!=(0);
  $9 = 0;
  if ($189) {
   label = 37;
   break;
  }
  while(1) {
   $212 = $9;
   $213 = HEAP32[$7>>2]|0;
   $214 = ($212|0)<($213|0);
   if (!($214)) {
    break;
   }
   $215 = $4;
   $216 = $9;
   $217 = (($215) + ($216)|0);
   $218 = HEAP8[$217>>0]|0;
   $219 = $5;
   $220 = $8;
   $221 = (($219) + (($220*10248)|0)|0);
   $222 = $9;
   $223 = (($221) + ($222)|0);
   HEAP8[$223>>0] = $218;
   $224 = $9;
   $225 = (($224) + 1)|0;
   $9 = $225;
  }
  $226 = $5;
  $227 = $8;
  $228 = (($226) + (($227*10248)|0)|0);
  $229 = $9;
  $230 = (($228) + ($229)|0);
  HEAP8[$230>>0] = 0;
  $231 = ((($7)) + 4|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = $4;
  $234 = (($233) + ($232)|0);
  $4 = $234;
  $235 = $4;
  $236 = HEAP8[$235>>0]|0;
  $237 = $236 << 24 >> 24;
  $238 = ($237|0)==(0);
  if ($238) {
   break;
  }
  $239 = $8;
  $240 = (($239) + 1)|0;
  $8 = $240;
 }
 if ((label|0) == 37) {
  while(1) {
   label = 0;
   $190 = $4;
   $191 = $9;
   $192 = (($190) + ($191)|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $193 << 24 >> 24;
   $195 = ($194|0)!=(0);
   if (!($195)) {
    break;
   }
   $196 = $4;
   $197 = $9;
   $198 = (($196) + ($197)|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = $5;
   $201 = $8;
   $202 = (($200) + (($201*10248)|0)|0);
   $203 = $9;
   $204 = (($202) + ($203)|0);
   HEAP8[$204>>0] = $199;
   $205 = $9;
   $206 = (($205) + 1)|0;
   $9 = $206;
   label = 37;
  }
  $207 = $5;
  $208 = $8;
  $209 = (($207) + (($208*10248)|0)|0);
  $210 = $9;
  $211 = (($209) + ($210)|0);
  HEAP8[$211>>0] = 0;
 }
 $241 = $6;
 $242 = ((($241)) + 68|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = ($243|0)!=(0|0);
 if ($244) {
  $245 = $13;
  _free($245);
 }
 $246 = $8;
 $247 = ($246|0)==(512);
 $248 = $8;
 if ($247) {
  $3 = $248;
  $250 = $3;
  STACKTOP = sp;return ($250|0);
 } else {
  $249 = (($248) + 1)|0;
  $3 = $249;
  $250 = $3;
  STACKTOP = sp;return ($250|0);
 }
 return (0)|0;
}
function _find_words_debug_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1168|0);
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $7 = sp + 56|0;
 $14 = sp + 904|0;
 $15 = sp + 872|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = 0;
 $17 = $4;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = ($19|0)==(0);
 if ($20) {
  $3 = 0;
  $275 = $3;
  STACKTOP = sp;return ($275|0);
 }
 $21 = $4;
 $22 = (_strlen($21)|0);
 $10 = $22;
 $23 = $6;
 $24 = ((($23)) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $10;
 $27 = ($25|0)>=($26|0);
 if ($27) {
  $3 = 0;
  $275 = $3;
  STACKTOP = sp;return ($275|0);
 }
 $28 = $6;
 $29 = ((($28)) + 48|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $6;
  $33 = ((($32)) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $4;
  $36 = (($35) + ($34)|0);
  $4 = $36;
  $37 = $6;
  $38 = ((($37)) + 48|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $10;
  $41 = (($40) - ($39))|0;
  $10 = $41;
 }
 $42 = $6;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $6;
  $47 = ((($46)) + 140|0);
  $48 = $4;
  $49 = (_regexec($47,$48,100,$7,0)|0);
  $50 = ($49|0)!=(0);
  if ($50) {
   $3 = 0;
   $275 = $3;
   STACKTOP = sp;return ($275|0);
  }
  $51 = $6;
  $52 = ((($51)) + 68|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0|0);
  if ($54) {
   $11 = 0;
   $55 = $6;
   $56 = ((($55)) + 68|0);
   $57 = HEAP32[$56>>2]|0;
   $12 = $57;
   while(1) {
    $58 = $12;
    $59 = ($58|0)!=(0|0);
    if (!($59)) {
     break;
    }
    $60 = $12;
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)!=(0|0);
    $63 = $12;
    $64 = ((($63)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    do {
     if ($62) {
      $66 = $11;
      $67 = (($66) + ($65))|0;
      $11 = $67;
     } else {
      $68 = ($65|0)!=(0);
      if (!($68)) {
       $69 = $10;
       $70 = $11;
       $71 = (($70) + ($69))|0;
       $11 = $71;
       break;
      }
      $72 = $12;
      $73 = ((($72)) + 4|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($7) + ($74<<3)|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76|0)!=(-1);
      if ($77) {
       $78 = $12;
       $79 = ((($78)) + 4|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (($7) + ($80<<3)|0);
       $82 = ((($81)) + 4|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ($83|0)!=(-1);
       if ($84) {
        $85 = $12;
        $86 = ((($85)) + 4|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = (($7) + ($87<<3)|0);
        $89 = ((($88)) + 4|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = $12;
        $92 = ((($91)) + 4|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = (($7) + ($93<<3)|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = (($90) - ($95))|0;
        $97 = $11;
        $98 = (($97) + ($96))|0;
        $11 = $98;
       }
      }
     }
    } while(0);
    $99 = $12;
    $100 = ((($99)) + 8|0);
    $101 = HEAP32[$100>>2]|0;
    $12 = $101;
   }
   $8 = 0;
   $102 = $11;
   $103 = (($102) + 1)|0;
   $104 = (_malloc($103)|0);
   $13 = $104;
   $105 = $13;
   $106 = ($105|0)!=(0|0);
   $107 = $6;
   if (!($106)) {
    _log_msg(3972,3,$107);
    _exit(1);
    // unreachable;
   }
   $108 = ((($107)) + 68|0);
   $109 = HEAP32[$108>>2]|0;
   $12 = $109;
   while(1) {
    $110 = $12;
    $111 = ($110|0)!=(0|0);
    if (!($111)) {
     break;
    }
    $112 = $12;
    $113 = HEAP32[$112>>2]|0;
    $114 = ($113|0)!=(0|0);
    do {
     if ($114) {
      $115 = $13;
      $116 = $8;
      $117 = (($115) + ($116)|0);
      $118 = $12;
      $119 = HEAP32[$118>>2]|0;
      $120 = $12;
      $121 = ((($120)) + 4|0);
      $122 = HEAP32[$121>>2]|0;
      (_strncpy($117,$119,$122)|0);
      $123 = $12;
      $124 = ((($123)) + 4|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = $8;
      $127 = (($126) + ($125))|0;
      $8 = $127;
     } else {
      $128 = $12;
      $129 = ((($128)) + 4|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)!=(0);
      if (!($131)) {
       $132 = $13;
       $133 = $8;
       $134 = (($132) + ($133)|0);
       $135 = $4;
       $136 = $10;
       (_strncpy($134,$135,$136)|0);
       $137 = $10;
       $138 = $8;
       $139 = (($138) + ($137))|0;
       $8 = $139;
       break;
      }
      $140 = $12;
      $141 = ((($140)) + 4|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($7) + ($142<<3)|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($144|0)!=(-1);
      if ($145) {
       $146 = $12;
       $147 = ((($146)) + 4|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = (($7) + ($148<<3)|0);
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($151|0)!=(-1);
       if ($152) {
        $153 = $12;
        $154 = ((($153)) + 4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = (($7) + ($155<<3)|0);
        $157 = ((($156)) + 4|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = $12;
        $160 = ((($159)) + 4|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = (($7) + ($161<<3)|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = (($158) - ($163))|0;
        $11 = $164;
        $165 = $13;
        $166 = $8;
        $167 = (($165) + ($166)|0);
        $168 = $4;
        $169 = $12;
        $170 = ((($169)) + 4|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = (($7) + ($171<<3)|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = (($168) + ($173)|0);
        $175 = $11;
        (_strncpy($167,$174,$175)|0);
        $176 = $11;
        $177 = $8;
        $178 = (($177) + ($176))|0;
        $8 = $178;
       }
      }
     }
    } while(0);
    $179 = $12;
    $180 = ((($179)) + 8|0);
    $181 = HEAP32[$180>>2]|0;
    $12 = $181;
   }
   $182 = $13;
   $183 = $8;
   $184 = (($182) + ($183)|0);
   HEAP8[$184>>0] = 0;
   $185 = $13;
   $4 = $185;
  }
 }
 $8 = 0;
 while(1) {
  $186 = $8;
  $187 = ($186|0)<(512);
  if (!($187)) {
   break;
  }
  $188 = $6;
  $189 = ((($188)) + 108|0);
  $190 = $4;
  $191 = (_regexec($189,$190,1,$7,0)|0);
  $192 = ($191|0)!=(0);
  $9 = 0;
  if ($192) {
   label = 37;
   break;
  }
  while(1) {
   $215 = $9;
   $216 = HEAP32[$7>>2]|0;
   $217 = ($215|0)<($216|0);
   if (!($217)) {
    break;
   }
   $218 = $4;
   $219 = $9;
   $220 = (($218) + ($219)|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $5;
   $223 = $8;
   $224 = (($222) + (($223*10248)|0)|0);
   $225 = $9;
   $226 = (($224) + ($225)|0);
   HEAP8[$226>>0] = $221;
   $227 = $9;
   $228 = (($227) + 1)|0;
   $9 = $228;
  }
  $229 = $5;
  $230 = $8;
  $231 = (($229) + (($230*10248)|0)|0);
  $232 = $9;
  $233 = (($231) + ($232)|0);
  HEAP8[$233>>0] = 0;
  $234 = ((($7)) + 4|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $4;
  $237 = (($236) + ($235)|0);
  $4 = $237;
  $238 = $4;
  $239 = HEAP8[$238>>0]|0;
  $240 = $239 << 24 >> 24;
  $241 = ($240|0)==(0);
  if ($241) {
   break;
  }
  $242 = $8;
  $243 = (($242) + 1)|0;
  $8 = $243;
 }
 if ((label|0) == 37) {
  while(1) {
   label = 0;
   $193 = $4;
   $194 = $9;
   $195 = (($193) + ($194)|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196 << 24 >> 24;
   $198 = ($197|0)!=(0);
   if (!($198)) {
    break;
   }
   $199 = $4;
   $200 = $9;
   $201 = (($199) + ($200)|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $5;
   $204 = $8;
   $205 = (($203) + (($204*10248)|0)|0);
   $206 = $9;
   $207 = (($205) + ($206)|0);
   HEAP8[$207>>0] = $202;
   $208 = $9;
   $209 = (($208) + 1)|0;
   $9 = $209;
   label = 37;
  }
  $210 = $5;
  $211 = $8;
  $212 = (($210) + (($211*10248)|0)|0);
  $213 = $9;
  $214 = (($212) + ($213)|0);
  HEAP8[$214>>0] = 0;
 }
 $244 = $6;
 $245 = ((($244)) + 68|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ($246|0)!=(0|0);
 if ($247) {
  $248 = $13;
  _free($248);
 }
 $249 = HEAP32[6631]|0;
 $250 = (($249) + 1)|0;
 HEAP32[6631] = $250;
 $251 = HEAP32[6631]|0;
 $252 = (($251>>>0) % 200000)&-1;
 $253 = ($252|0)==(0);
 if ($253) {
  $254 = HEAP32[6631]|0;
  (_str_format_int_grouped($15,$254)|0);
  $255 = $6;
  $256 = ((($255)) + 7216|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = ($257|0)!=(0);
  if ($258) {
   $259 = HEAP32[6631]|0;
   $260 = (+($259>>>0));
   $261 = $6;
   $262 = ((($261)) + 7216|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = (+($263>>>0));
   $265 = $260 / $264;
   $16 = $265;
   $266 = $16;
   $267 = $266 * 100.0;
   $268 = $6;
   $269 = ((($268)) + 7220|0);
   HEAPF64[$vararg_buffer>>3] = $267;
   $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr1>>2] = $15;
   $vararg_ptr2 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr2>>2] = $269;
   (_sprintf($14,4013,$vararg_buffer)|0);
  } else {
   HEAP32[$vararg_buffer3>>2] = $15;
   (_sprintf($14,4051,$vararg_buffer3)|0);
  }
  $270 = $6;
  _log_msg($14,7,$270);
 }
 $271 = $8;
 $272 = ($271|0)==(512);
 $273 = $8;
 if ($272) {
  $3 = $273;
  $275 = $3;
  STACKTOP = sp;return ($275|0);
 } else {
  $274 = (($273) + 1)|0;
  $3 = $274;
  $275 = $3;
  STACKTOP = sp;return ($275|0);
 }
 return (0)|0;
}
function _find_words_debug_3($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1168|0);
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $7 = sp + 56|0;
 $14 = sp + 904|0;
 $15 = sp + 872|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = 0;
 $17 = $4;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = ($19|0)==(0);
 if ($20) {
  $3 = 0;
  $283 = $3;
  STACKTOP = sp;return ($283|0);
 }
 $21 = $4;
 $22 = (_strlen($21)|0);
 $10 = $22;
 $23 = $6;
 $24 = ((($23)) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $10;
 $27 = ($25|0)>=($26|0);
 if ($27) {
  $3 = 0;
  $283 = $3;
  STACKTOP = sp;return ($283|0);
 }
 $28 = $6;
 $29 = ((($28)) + 48|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $6;
  $33 = ((($32)) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $4;
  $36 = (($35) + ($34)|0);
  $4 = $36;
  $37 = $6;
  $38 = ((($37)) + 48|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $10;
  $41 = (($40) - ($39))|0;
  $10 = $41;
 }
 $42 = $6;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $6;
  $47 = ((($46)) + 140|0);
  $48 = $4;
  $49 = (_regexec($47,$48,100,$7,0)|0);
  $50 = ($49|0)!=(0);
  if ($50) {
   $3 = 0;
   $283 = $3;
   STACKTOP = sp;return ($283|0);
  }
  $51 = $6;
  $52 = ((($51)) + 68|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0|0);
  if ($54) {
   $11 = 0;
   $55 = $6;
   $56 = ((($55)) + 68|0);
   $57 = HEAP32[$56>>2]|0;
   $12 = $57;
   while(1) {
    $58 = $12;
    $59 = ($58|0)!=(0|0);
    if (!($59)) {
     break;
    }
    $60 = $12;
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)!=(0|0);
    $63 = $12;
    $64 = ((($63)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    do {
     if ($62) {
      $66 = $11;
      $67 = (($66) + ($65))|0;
      $11 = $67;
     } else {
      $68 = ($65|0)!=(0);
      if (!($68)) {
       $69 = $10;
       $70 = $11;
       $71 = (($70) + ($69))|0;
       $11 = $71;
       break;
      }
      $72 = $12;
      $73 = ((($72)) + 4|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($7) + ($74<<3)|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76|0)!=(-1);
      if ($77) {
       $78 = $12;
       $79 = ((($78)) + 4|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (($7) + ($80<<3)|0);
       $82 = ((($81)) + 4|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ($83|0)!=(-1);
       if ($84) {
        $85 = $12;
        $86 = ((($85)) + 4|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = (($7) + ($87<<3)|0);
        $89 = ((($88)) + 4|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = $12;
        $92 = ((($91)) + 4|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = (($7) + ($93<<3)|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = (($90) - ($95))|0;
        $97 = $11;
        $98 = (($97) + ($96))|0;
        $11 = $98;
       }
      }
     }
    } while(0);
    $99 = $12;
    $100 = ((($99)) + 8|0);
    $101 = HEAP32[$100>>2]|0;
    $12 = $101;
   }
   $8 = 0;
   $102 = $11;
   $103 = (($102) + 1)|0;
   $104 = (_malloc($103)|0);
   $13 = $104;
   $105 = $13;
   $106 = ($105|0)!=(0|0);
   $107 = $6;
   if (!($106)) {
    _log_msg(3972,3,$107);
    _exit(1);
    // unreachable;
   }
   $108 = ((($107)) + 68|0);
   $109 = HEAP32[$108>>2]|0;
   $12 = $109;
   while(1) {
    $110 = $12;
    $111 = ($110|0)!=(0|0);
    if (!($111)) {
     break;
    }
    $112 = $12;
    $113 = HEAP32[$112>>2]|0;
    $114 = ($113|0)!=(0|0);
    do {
     if ($114) {
      $115 = $13;
      $116 = $8;
      $117 = (($115) + ($116)|0);
      $118 = $12;
      $119 = HEAP32[$118>>2]|0;
      $120 = $12;
      $121 = ((($120)) + 4|0);
      $122 = HEAP32[$121>>2]|0;
      (_strncpy($117,$119,$122)|0);
      $123 = $12;
      $124 = ((($123)) + 4|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = $8;
      $127 = (($126) + ($125))|0;
      $8 = $127;
     } else {
      $128 = $12;
      $129 = ((($128)) + 4|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)!=(0);
      if (!($131)) {
       $132 = $13;
       $133 = $8;
       $134 = (($132) + ($133)|0);
       $135 = $4;
       $136 = $10;
       (_strncpy($134,$135,$136)|0);
       $137 = $10;
       $138 = $8;
       $139 = (($138) + ($137))|0;
       $8 = $139;
       break;
      }
      $140 = $12;
      $141 = ((($140)) + 4|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($7) + ($142<<3)|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($144|0)!=(-1);
      if ($145) {
       $146 = $12;
       $147 = ((($146)) + 4|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = (($7) + ($148<<3)|0);
       $150 = ((($149)) + 4|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($151|0)!=(-1);
       if ($152) {
        $153 = $12;
        $154 = ((($153)) + 4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = (($7) + ($155<<3)|0);
        $157 = ((($156)) + 4|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = $12;
        $160 = ((($159)) + 4|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = (($7) + ($161<<3)|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = (($158) - ($163))|0;
        $11 = $164;
        $165 = $13;
        $166 = $8;
        $167 = (($165) + ($166)|0);
        $168 = $4;
        $169 = $12;
        $170 = ((($169)) + 4|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = (($7) + ($171<<3)|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = (($168) + ($173)|0);
        $175 = $11;
        (_strncpy($167,$174,$175)|0);
        $176 = $11;
        $177 = $8;
        $178 = (($177) + ($176))|0;
        $8 = $178;
       }
      }
     }
    } while(0);
    $179 = $12;
    $180 = ((($179)) + 8|0);
    $181 = HEAP32[$180>>2]|0;
    $12 = $181;
   }
   $182 = $13;
   $183 = $8;
   $184 = (($182) + ($183)|0);
   HEAP8[$184>>0] = 0;
   $185 = $13;
   $4 = $185;
  }
 }
 $8 = 0;
 while(1) {
  $186 = $8;
  $187 = ($186|0)<(512);
  if (!($187)) {
   break;
  }
  $188 = $6;
  $189 = ((($188)) + 108|0);
  $190 = $4;
  $191 = (_regexec($189,$190,1,$7,0)|0);
  $192 = ($191|0)!=(0);
  $9 = 0;
  if ($192) {
   label = 37;
   break;
  }
  while(1) {
   $215 = $9;
   $216 = HEAP32[$7>>2]|0;
   $217 = ($215|0)<($216|0);
   if (!($217)) {
    break;
   }
   $218 = $4;
   $219 = $9;
   $220 = (($218) + ($219)|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $5;
   $223 = $8;
   $224 = (($222) + (($223*10248)|0)|0);
   $225 = $9;
   $226 = (($224) + ($225)|0);
   HEAP8[$226>>0] = $221;
   $227 = $9;
   $228 = (($227) + 1)|0;
   $9 = $228;
  }
  $229 = $5;
  $230 = $8;
  $231 = (($229) + (($230*10248)|0)|0);
  $232 = $9;
  $233 = (($231) + ($232)|0);
  HEAP8[$233>>0] = 0;
  $234 = ((($7)) + 4|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $4;
  $237 = (($236) + ($235)|0);
  $4 = $237;
  $238 = $4;
  $239 = HEAP8[$238>>0]|0;
  $240 = $239 << 24 >> 24;
  $241 = ($240|0)==(0);
  if ($241) {
   break;
  }
  $242 = $8;
  $243 = (($242) + 1)|0;
  $8 = $243;
 }
 if ((label|0) == 37) {
  while(1) {
   label = 0;
   $193 = $4;
   $194 = $9;
   $195 = (($193) + ($194)|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196 << 24 >> 24;
   $198 = ($197|0)!=(0);
   if (!($198)) {
    break;
   }
   $199 = $4;
   $200 = $9;
   $201 = (($199) + ($200)|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $5;
   $204 = $8;
   $205 = (($203) + (($204*10248)|0)|0);
   $206 = $9;
   $207 = (($205) + ($206)|0);
   HEAP8[$207>>0] = $202;
   $208 = $9;
   $209 = (($208) + 1)|0;
   $9 = $209;
   label = 37;
  }
  $210 = $5;
  $211 = $8;
  $212 = (($210) + (($211*10248)|0)|0);
  $213 = $9;
  $214 = (($212) + ($213)|0);
  HEAP8[$214>>0] = 0;
 }
 $244 = $6;
 $245 = ((($244)) + 68|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ($246|0)!=(0|0);
 if ($247) {
  $248 = $13;
  _free($248);
 }
 $249 = HEAP32[6630]|0;
 $250 = (($249) + 1)|0;
 HEAP32[6630] = $250;
 $251 = (_time((0|0))|0);
 $252 = $6;
 $253 = ((($252)) + 7252|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ($251|0)!=($254|0);
 if ($255) {
  $256 = (_time((0|0))|0);
  $257 = (($256|0) % 5)&-1;
  $258 = ($257|0)==(0);
  if ($258) {
   $259 = (_time((0|0))|0);
   $260 = $6;
   $261 = ((($260)) + 7252|0);
   HEAP32[$261>>2] = $259;
   $262 = HEAP32[6630]|0;
   (_str_format_int_grouped($15,$262)|0);
   $263 = $6;
   $264 = ((($263)) + 7216|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = ($265|0)!=(0);
   if ($266) {
    $267 = HEAP32[6630]|0;
    $268 = (+($267>>>0));
    $269 = $6;
    $270 = ((($269)) + 7216|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = (+($271>>>0));
    $273 = $268 / $272;
    $16 = $273;
    $274 = $16;
    $275 = $274 * 100.0;
    $276 = $6;
    $277 = ((($276)) + 7220|0);
    HEAPF64[$vararg_buffer>>3] = $275;
    $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr1>>2] = $15;
    $vararg_ptr2 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr2>>2] = $277;
    (_sprintf($14,4013,$vararg_buffer)|0);
   } else {
    HEAP32[$vararg_buffer3>>2] = $15;
    (_sprintf($14,4051,$vararg_buffer3)|0);
   }
   $278 = $6;
   _log_msg($14,7,$278);
  }
 }
 $279 = $8;
 $280 = ($279|0)==(512);
 $281 = $8;
 if ($280) {
  $3 = $281;
  $283 = $3;
  STACKTOP = sp;return ($283|0);
 } else {
  $282 = (($281) + 1)|0;
  $3 = $282;
  $283 = $3;
  STACKTOP = sp;return ($283|0);
 }
 return (0)|0;
}
function _is_word_repeated($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 1;
 while(1) {
  $8 = $7;
  $9 = $6;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $4;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $5;
  $16 = ($14|0)==($15|0);
  if ($16) {
   label = 4;
   break;
  }
  $17 = $7;
  $18 = (($17) + 1)|0;
  $7 = $18;
 }
 if ((label|0) == 4) {
  $3 = 1;
  $19 = $3;
  STACKTOP = sp;return ($19|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $19 = $3;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 17904|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(17904|0);
 $vararg_buffer4 = sp + 17584|0;
 $vararg_buffer1 = sp + 17576|0;
 $vararg_buffer = sp + 17568|0;
 $5 = sp;
 $6 = sp + 17648|0;
 $7 = sp + 17616|0;
 $2 = 0;
 $3 = $0;
 $4 = $1;
 $10 = (_step_0_init_input_parameters($5)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  _log_msg(4098,3,$5);
  _exit(1);
  // unreachable;
 }
 $12 = $3;
 $13 = $4;
 $14 = (_step_0_parse_options($12,$13,$5)|0);
 $15 = ($14|0)!=(0);
 if (!($15)) {
  _log_msg(4131,3,$5);
  _print_usage();
  _exit(1);
  // unreachable;
 }
 $16 = (_step_0_validate_parameters($5)|0);
 $17 = ($16|0)!=(0);
 if (!($17)) {
  _log_msg(4152,3,$5);
  _print_usage();
  _exit(1);
  // unreachable;
 }
 $18 = ((($5)) + 92|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = ($20|0)==(1);
 if ($21) {
  $22 = ((($5)) + 104|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 1)|0;
  $25 = 1 << $24;
  $26 = (($25) - 1)|0;
  (_setlogmask($26)|0);
  $27 = ((($5)) + 100|0);
  $28 = HEAP32[$27>>2]|0;
  _openlog(4182,11,$28);
 }
 $29 = ((($5)) + 88|0);
 $30 = HEAP32[$29>>2]|0;
 _srand($30);
 _step_0_generate_seeds($5);
 $31 = (_step_0_cal_total_pass_over_data_set_times($5)|0);
 $32 = ((($5)) + 7212|0);
 HEAP32[$32>>2] = $31;
 _log_msg(4194,5,$5);
 $33 = ((($5)) + 80|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0);
 if ($35) {
  _step_1_create_word_sketch($5);
  $36 = ((($5)) + 7208|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($5)) + 7212|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($37, $39)|0;
  $41 = ((($5)) + 7216|0);
  HEAP32[$41>>2] = $40;
  $42 = ((($5)) + 7220|0);
  $43 = ((($5)) + 7216|0);
  $44 = HEAP32[$43>>2]|0;
  (_str_format_int_grouped($42,$44)|0);
 }
 $45 = (_step_1_create_vocabulary($5)|0);
 $8 = $45;
 $46 = ((($5)) + 7216|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0);
 if (!($48)) {
  $49 = ((($5)) + 7208|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($5)) + 7212|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = Math_imul($50, $52)|0;
  $54 = ((($5)) + 7216|0);
  HEAP32[$54>>2] = $53;
  $55 = ((($5)) + 7220|0);
  $56 = ((($5)) + 7216|0);
  $57 = HEAP32[$56>>2]|0;
  (_str_format_int_grouped($55,$57)|0);
 }
 _log_msg(4206,5,$5);
 $58 = $8;
 $59 = (_step_1_find_frequent_words($5,$58)|0);
 $60 = ((($5)) + 2268|0);
 HEAP32[$60>>2] = $59;
 $61 = ((($5)) + 52|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(1);
 if ($63) {
  _debug_1_print_frequent_words($5);
 }
 $64 = ((($5)) + 2268|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0);
 if (!($66)) {
  _free_and_clean_step_0($5);
  _free_and_clean_step_1($5);
  $2 = 0;
  $94 = $2;
  STACKTOP = sp;return ($94|0);
 }
 $67 = ((($5)) + 76|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)!=(0);
 if ($69) {
  _step_2_create_cluster_candidate_sketch($5);
 }
 _step_2_find_cluster_candidates($5);
 $70 = HEAP8[$5>>0]|0;
 $71 = ($70<<24>>24)!=(0);
 if ($71) {
  _step_2_aggregate_supports($5);
  $72 = ((($5)) + 2272|0);
  $73 = HEAP32[$72>>2]|0;
  (_str_format_int_grouped($7,$73)|0);
  HEAP32[$vararg_buffer>>2] = $7;
  (_sprintf($6,4248,$vararg_buffer)|0);
  _log_msg($6,5,$5);
 }
 $74 = ((($5)) + 52|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)==(1);
 if ($76) {
  _debug_1_print_cluster_candidates($5);
 }
 _log_msg(4277,5,$5);
 $77 = (_step_3_find_clusters_from_candidates($5)|0);
 $78 = ((($5)) + 2264|0);
 HEAP32[$78>>2] = $77;
 $79 = ((($5)) + 2264|0);
 $80 = HEAP32[$79>>2]|0;
 (_str_format_int_grouped($7,$80)|0);
 HEAP32[$vararg_buffer1>>2] = $7;
 (_sprintf($6,4297,$vararg_buffer1)|0);
 _log_msg($6,5,$5);
 $81 = ((($5)) + 40|0);
 $82 = +HEAPF64[$81>>3];
 $83 = $82 != 0.0;
 if ($83) {
  _step_3_join_clusters($5);
 }
 $84 = ((($5)) + 2264|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)!=(0);
 if ($86) {
  _step_3_print_clusters($5);
 }
 $87 = ((($5)) + 12|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)!=(0|0);
 if ($89) {
  _log_msg(4320,5,$5);
  $90 = (_step_4_find_outliers($5)|0);
  $9 = $90;
  $91 = $9;
  (_str_format_int_grouped($7,$91)|0);
  $92 = ((($5)) + 12|0);
  $93 = HEAP32[$92>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $7;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $93;
  (_sprintf($6,4340,$vararg_buffer4)|0);
  _log_msg($6,5,$5);
 }
 _free_and_clean_step_0($5);
 _free_and_clean_step_1($5);
 _free_and_clean_step_2($5);
 _free_and_clean_step_3($5);
 $2 = 0;
 $94 = $2;
 STACKTOP = sp;return ($94|0);
}
function _step_4_find_outliers($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5278032|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5278032|0);
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 5277768|0;
 $6 = sp + 5267528|0;
 $7 = sp + 5247048|0;
 $8 = sp + 72|0;
 $1 = $0;
 $14 = 0;
 $15 = $1;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_fopen($17,4381)|0);
 $2 = $18;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $20 = $1;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  (_sprintf($5,4383,$vararg_buffer)|0);
  $23 = $1;
  _log_msg($5,3,$23);
  _exit(1);
  // unreachable;
 }
 $24 = $1;
 $25 = ((($24)) + 64|0);
 $26 = HEAP32[$25>>2]|0;
 $4 = $26;
 while(1) {
  $27 = $4;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   break;
  }
  $29 = $4;
  $30 = HEAP32[$29>>2]|0;
  $31 = (_fopen($30,4411)|0);
  $3 = $31;
  $32 = ($31|0)!=(0|0);
  L7: do {
   if ($32) {
    while(1) {
     $36 = $3;
     $37 = (_fgets($6,10240,$36)|0);
     $38 = ($37|0)!=(0|0);
     if (!($38)) {
      break L7;
     }
     $39 = (_strlen($6)|0);
     $9 = $39;
     $40 = $9;
     $41 = (($40) - 1)|0;
     $42 = (($6) + ($41)|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43 << 24 >> 24;
     $45 = ($44|0)==(10);
     if ($45) {
      $46 = $9;
      $47 = (($46) - 1)|0;
      $48 = (($6) + ($47)|0);
      HEAP8[$48>>0] = 0;
     }
     $49 = $1;
     $50 = (_find_words($6,$8,$49)|0);
     $10 = $50;
     HEAP8[$7>>0] = 0;
     $11 = 0;
     while(1) {
      $51 = $11;
      $52 = $10;
      $53 = ($51|0)<($52|0);
      if (!($53)) {
       break;
      }
      $54 = $11;
      $55 = (($8) + (($54*10248)|0)|0);
      $56 = $1;
      $57 = ((($56)) + 2228|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = $1;
      $60 = ((($59)) + 84|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = $1;
      $63 = ((($62)) + 2256|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (_find_elem($55,$58,$61,$64)|0);
      $12 = $65;
      $66 = $11;
      $67 = (($8) + (($66*10248)|0)|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68 << 24 >> 24;
      $70 = ($69|0)!=(0);
      $71 = $12;
      $72 = ($71|0)!=(0|0);
      $or$cond = $70 & $72;
      if ($or$cond) {
       $73 = $11;
       $74 = (($8) + (($73*10248)|0)|0);
       (_strcat($7,$74)|0);
       $75 = (_strlen($7)|0);
       $9 = $75;
       $76 = $9;
       $77 = (($7) + ($76)|0);
       HEAP8[$77>>0] = 10;
       $78 = $9;
       $79 = (($78) + 1)|0;
       $80 = (($7) + ($79)|0);
       HEAP8[$80>>0] = 0;
      }
      $81 = $11;
      $82 = (($81) + 1)|0;
      $11 = $82;
     }
     $83 = HEAP8[$7>>0]|0;
     $84 = $83 << 24 >> 24;
     $85 = ($84|0)==(0);
     $86 = $10;
     $87 = ($86|0)!=(0);
     $or$cond3 = $85 & $87;
     if ($or$cond3) {
      $88 = $2;
      HEAP32[$vararg_buffer7>>2] = $6;
      (_fprintf($88,4438,$vararg_buffer7)|0);
      $89 = $14;
      $90 = (($89) + 1)|0;
      $14 = $90;
      continue;
     }
     $91 = $1;
     $92 = ((($91)) + 2224|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $1;
     $95 = ((($94)) + 2248|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = $1;
     $98 = ((($97)) + 2244|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (_find_elem($7,$93,$96,$99)|0);
     $13 = $100;
     $101 = $13;
     $102 = ($101|0)!=(0|0);
     if ($102) {
      $103 = $13;
      $104 = ((($103)) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = $1;
      $107 = ((($106)) + 72|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ($105>>>0)<($108>>>0);
      if (!($109)) {
       continue;
      }
     }
     $110 = $2;
     HEAP32[$vararg_buffer10>>2] = $6;
     (_fprintf($110,4438,$vararg_buffer10)|0);
     $111 = $14;
     $112 = (($111) + 1)|0;
     $14 = $112;
    }
   } else {
    $33 = $4;
    $34 = HEAP32[$33>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $34;
    (_sprintf($5,4413,$vararg_buffer4)|0);
    $35 = $1;
    _log_msg($5,3,$35);
   }
  } while(0);
  $113 = $4;
  $114 = ((($113)) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $4 = $115;
 }
 $116 = $14;
 STACKTOP = sp;return ($116|0);
}
function _log_msg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = (_time((0|0))|0);
 HEAP32[$6>>2] = $8;
 $9 = (_ctime(($6|0))|0);
 $7 = $9;
 $10 = $7;
 $11 = $7;
 $12 = (_strlen($11)|0);
 $13 = (($12) - 1)|0;
 $14 = (($10) + ($13)|0);
 HEAP8[$14>>0] = 0;
 $15 = HEAP32[178]|0;
 $16 = $7;
 $17 = $3;
 HEAP32[$vararg_buffer>>2] = $16;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $17;
 (_fprintf($15,4442,$vararg_buffer)|0);
 $18 = $5;
 $19 = ((($18)) + 92|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($21|0)==(1);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $4;
 $24 = $3;
 HEAP32[$vararg_buffer2>>2] = $24;
 _syslog($23,4784,$vararg_buffer2);
 STACKTOP = sp;return;
}
function _print_usage() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[178]|0;
 (_fprintf($0,26420,$vararg_buffer)|0);
 $1 = HEAP32[178]|0;
 (_fprintf($1,4787,$vararg_buffer1)|0);
 $2 = HEAP32[178]|0;
 (_fprintf($2,26420,$vararg_buffer3)|0);
 $3 = HEAP32[178]|0;
 (_fprintf($3,4878,$vararg_buffer5)|0);
 STACKTOP = sp;return;
}
function _print_cluster_to_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 40|0;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ((($6)) + 6952|0);
 HEAP8[$7>>0] = 0;
 $4 = 1;
 while(1) {
  $8 = $4;
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($8|0)<=($10|0);
  $12 = $2;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  if (!($11)) {
   break;
  }
  $15 = $4;
  $16 = $15<<1;
  $17 = (($16) + 1)|0;
  $18 = (($14) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $2;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $4;
   $25 = $24<<1;
   $26 = (($23) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $2;
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $4;
   $32 = $31<<1;
   $33 = (($32) + 1)|0;
   $34 = (($30) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$vararg_buffer>>2] = $27;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $35;
   (_sprintf($5,4450,$vararg_buffer)|0);
   $36 = $3;
   $37 = ((($36)) + 6952|0);
   (_strcat($37,$5)|0);
  }
  $38 = $2;
  $39 = ((($38)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $4;
  $42 = (($40) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $44;
  (_sprintf($5,4460,$vararg_buffer2)|0);
  $45 = $3;
  $46 = ((($45)) + 6952|0);
  (_strcat($46,$5)|0);
  $47 = $4;
  $48 = (($47) + 1)|0;
  $4 = $48;
 }
 $49 = ((($14)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)!=(0);
 if (!($51)) {
  STACKTOP = sp;return;
 }
 $52 = $2;
 $53 = ((($52)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$54>>2]|0;
 $56 = $2;
 $57 = ((($56)) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $55;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $60;
 (_sprintf($5,4464,$vararg_buffer5)|0);
 $61 = $3;
 $62 = ((($61)) + 6952|0);
 (_strcat($62,$5)|0);
 STACKTOP = sp;return;
}
function _step_3_print_clusters($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(26420,$vararg_buffer)|0);
 $2 = $1;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 0:  {
  $5 = $1;
  _print_clusters_default_config($5);
  break;
 }
 case 1:  {
  $6 = $1;
  _print_clusters_constant_config($6);
  break;
 }
 default: {
 }
 }
 (_printf(26420,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _print_clusters_default_config($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer = sp;
 $2 = sp + 40|0;
 $3 = sp + 8|0;
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 40|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 != 0.0;
 $8 = $1;
 if ($7) {
  _print_clusters_if_join_cluster_default_0($8);
  $9 = $1;
  $10 = ((($9)) + 2264|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = ((($12)) + 4884|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($11) - ($14))|0;
  $16 = $1;
  $17 = ((($16)) + 4888|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($15) + ($18))|0;
  (_str_format_int_grouped($3,$19)|0);
  HEAP32[$vararg_buffer>>2] = $3;
  (_sprintf($2,4473,$vararg_buffer)|0);
  $23 = $1;
  _log_msg($2,6,$23);
  STACKTOP = sp;return;
 } else {
  _print_clusters_default_0($8);
  $20 = $1;
  $21 = ((($20)) + 2264|0);
  $22 = HEAP32[$21>>2]|0;
  (_str_format_int_grouped($3,$22)|0);
  HEAP32[$vararg_buffer>>2] = $3;
  (_sprintf($2,4473,$vararg_buffer)|0);
  $23 = $1;
  _log_msg($2,6,$23);
  STACKTOP = sp;return;
 }
}
function _print_clusters_constant_config($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer = sp;
 $2 = sp + 40|0;
 $3 = sp + 8|0;
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 40|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 != 0.0;
 $8 = $1;
 if ($7) {
  _print_clusters_if_join_cluster_constant_1($8);
  $9 = $1;
  $10 = ((($9)) + 2264|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = ((($12)) + 4884|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($11) - ($14))|0;
  $16 = $1;
  $17 = ((($16)) + 4888|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($15) + ($18))|0;
  (_str_format_int_grouped($3,$19)|0);
  HEAP32[$vararg_buffer>>2] = $3;
  (_sprintf($2,4473,$vararg_buffer)|0);
  $23 = $1;
  _log_msg($2,6,$23);
  STACKTOP = sp;return;
 } else {
  _print_clusters_constant_1($8);
  $20 = $1;
  $21 = ((($20)) + 2264|0);
  $22 = HEAP32[$21>>2]|0;
  (_str_format_int_grouped($3,$22)|0);
  HEAP32[$vararg_buffer>>2] = $3;
  (_sprintf($2,4473,$vararg_buffer)|0);
  $23 = $1;
  _log_msg($2,6,$23);
  STACKTOP = sp;return;
 }
}
function _print_clusters_if_join_cluster_constant_1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 1;
 while(1) {
  $5 = $2;
  $6 = $1;
  $7 = ((($6)) + 96|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<=($8|0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = ((($10)) + 172|0);
  $12 = $2;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $3 = $14;
  while(1) {
   $15 = $3;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    break;
   }
   $17 = $3;
   $18 = ((($17)) + 24|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = $3;
    _print_cluster($22);
   }
   $23 = $3;
   $24 = ((($23)) + 28|0);
   $25 = HEAP32[$24>>2]|0;
   $3 = $25;
  }
  $26 = $1;
  $27 = ((($26)) + 2832|0);
  $28 = $2;
  $29 = (($27) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $4 = $30;
  while(1) {
   $31 = $4;
   $32 = ($31|0)!=(0|0);
   if (!($32)) {
    break;
   }
   $33 = $4;
   $34 = $1;
   _print_cluster_with_token($33,$34);
   $35 = $4;
   $36 = ((($35)) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $4 = $37;
  }
  $38 = $2;
  $39 = (($38) + 1)|0;
  $2 = $39;
 }
 STACKTOP = sp;return;
}
function _print_clusters_constant_1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 1;
 while(1) {
  $4 = $2;
  $5 = $1;
  $6 = ((($5)) + 96|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4|0)<=($7|0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = ((($9)) + 172|0);
  $11 = $2;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $3 = $13;
  while(1) {
   $14 = $3;
   $15 = ($14|0)!=(0|0);
   if (!($15)) {
    break;
   }
   $16 = $3;
   _print_cluster($16);
   $17 = $3;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $3 = $19;
  }
  $20 = $2;
  $21 = (($20) + 1)|0;
  $2 = $21;
 }
 STACKTOP = sp;return;
}
function _print_cluster($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 48|0;
 $1 = $0;
 $3 = 1;
 while(1) {
  $4 = $3;
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)<=($6|0);
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  if (!($7)) {
   break;
  }
  $11 = $3;
  $12 = $11<<1;
  $13 = (($12) + 1)|0;
  $14 = (($10) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $1;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $3;
   $21 = $20<<1;
   $22 = (($19) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $3;
   $28 = $27<<1;
   $29 = (($28) + 1)|0;
   $30 = (($26) + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vararg_buffer>>2] = $23;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $31;
   (_printf(4450,$vararg_buffer)|0);
  }
  $32 = $1;
  $33 = ((($32)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $3;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $38;
  (_printf(4460,$vararg_buffer2)|0);
  $39 = $3;
  $40 = (($39) + 1)|0;
  $3 = $40;
 }
 $41 = ((($10)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0);
 if (!($43)) {
  (_printf(26420,$vararg_buffer9)|0);
  $53 = $1;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  (_str_format_int_grouped($2,$55)|0);
  HEAP32[$vararg_buffer11>>2] = $2;
  (_printf(4502,$vararg_buffer11)|0);
  STACKTOP = sp;return;
 }
 $44 = $1;
 $45 = ((($44)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$46>>2]|0;
 $48 = $1;
 $49 = ((($48)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $47;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $52;
 (_printf(4464,$vararg_buffer5)|0);
 (_printf(26420,$vararg_buffer9)|0);
 $53 = $1;
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 (_str_format_int_grouped($2,$55)|0);
 HEAP32[$vararg_buffer11>>2] = $2;
 (_printf(4502,$vararg_buffer11)|0);
 STACKTOP = sp;return;
}
function _print_cluster_with_token($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer32 = sp + 104|0;
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 128|0;
 $2 = $0;
 $3 = $1;
 $6 = 1;
 while(1) {
  $7 = $6;
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<=($9|0);
  $11 = $2;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  if (!($10)) {
   break;
  }
  $14 = $6;
  $15 = $14<<1;
  $16 = (($15) + 1)|0;
  $17 = (($13) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $2;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $6;
   $24 = $23<<1;
   $25 = (($22) + ($24<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $2;
   $28 = ((($27)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $6;
   $31 = $30<<1;
   $32 = (($31) + 1)|0;
   $33 = (($29) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP32[$vararg_buffer>>2] = $26;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $34;
   (_printf(4450,$vararg_buffer)|0);
  }
  $35 = $2;
  $36 = ((($35)) + 32|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $6;
  $39 = (($37) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0|0);
  do {
   if ($41) {
    $42 = $3;
    $43 = ((($42)) + 1|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44 << 24 >> 24;
    $46 = ($45|0)==(0);
    if (!($46)) {
     (_printf(4517,$vararg_buffer14)|0);
     $82 = $2;
     $83 = ((($82)) + 32|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $6;
     $86 = (($84) + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $5 = $87;
     while(1) {
      $88 = $5;
      $89 = ($88|0)!=(0|0);
      if (!($89)) {
       break;
      }
      $90 = $5;
      $91 = HEAP32[$90>>2]|0;
      $92 = HEAP32[$91>>2]|0;
      HEAP32[$vararg_buffer16>>2] = $92;
      (_printf(4784,$vararg_buffer16)|0);
      $93 = $5;
      $94 = ((($93)) + 4|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($95|0)!=(0|0);
      if ($96) {
       (_printf(4519,$vararg_buffer19)|0);
      }
      $97 = $5;
      $98 = ((($97)) + 4|0);
      $99 = HEAP32[$98>>2]|0;
      $5 = $99;
     }
     (_printf(4521,$vararg_buffer21)|0);
     break;
    }
    $47 = $2;
    $48 = ((($47)) + 32|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $6;
    $51 = (($49) + ($50<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($52)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)!=(0|0);
    if (!($55)) {
     $74 = $2;
     $75 = ((($74)) + 32|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $6;
     $78 = (($76) + ($77<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = HEAP32[$79>>2]|0;
     $81 = HEAP32[$80>>2]|0;
     HEAP32[$vararg_buffer11>>2] = $81;
     (_printf(4460,$vararg_buffer11)|0);
     break;
    }
    (_printf(4517,$vararg_buffer2)|0);
    $56 = $2;
    $57 = ((($56)) + 32|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $6;
    $60 = (($58) + ($59<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $5 = $61;
    while(1) {
     $62 = $5;
     $63 = ($62|0)!=(0|0);
     if (!($63)) {
      break;
     }
     $64 = $5;
     $65 = HEAP32[$64>>2]|0;
     $66 = HEAP32[$65>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $66;
     (_printf(4784,$vararg_buffer4)|0);
     $67 = $5;
     $68 = ((($67)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)!=(0|0);
     if ($70) {
      (_printf(4519,$vararg_buffer7)|0);
     }
     $71 = $5;
     $72 = ((($71)) + 4|0);
     $73 = HEAP32[$72>>2]|0;
     $5 = $73;
    }
    (_printf(4521,$vararg_buffer9)|0);
   } else {
    $100 = $2;
    $101 = ((($100)) + 16|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $6;
    $104 = (($102) + ($103<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = HEAP32[$105>>2]|0;
    HEAP32[$vararg_buffer23>>2] = $106;
    (_printf(4460,$vararg_buffer23)|0);
   }
  } while(0);
  $107 = $6;
  $108 = (($107) + 1)|0;
  $6 = $108;
 }
 $109 = ((($13)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110|0)!=(0);
 if (!($111)) {
  (_printf(26420,$vararg_buffer30)|0);
  $121 = $2;
  $122 = ((($121)) + 4|0);
  $123 = HEAP32[$122>>2]|0;
  (_str_format_int_grouped($4,$123)|0);
  HEAP32[$vararg_buffer32>>2] = $4;
  (_printf(4502,$vararg_buffer32)|0);
  STACKTOP = sp;return;
 }
 $112 = $2;
 $113 = ((($112)) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = HEAP32[$114>>2]|0;
 $116 = $2;
 $117 = ((($116)) + 8|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ((($118)) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$vararg_buffer26>>2] = $115;
 $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
 HEAP32[$vararg_ptr29>>2] = $120;
 (_printf(4464,$vararg_buffer26)|0);
 (_printf(26420,$vararg_buffer30)|0);
 $121 = $2;
 $122 = ((($121)) + 4|0);
 $123 = HEAP32[$122>>2]|0;
 (_str_format_int_grouped($4,$123)|0);
 HEAP32[$vararg_buffer32>>2] = $4;
 (_printf(4502,$vararg_buffer32)|0);
 STACKTOP = sp;return;
}
function _print_clusters_if_join_cluster_default_0($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $0;
 $10 = $1;
 $11 = ((($10)) + 2264|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = ((($13)) + 4884|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12) - ($15))|0;
 $17 = $1;
 $18 = ((($17)) + 4888|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($16) + ($19))|0;
 $9 = $20;
 $21 = $9;
 $22 = $21<<2;
 $23 = (_malloc($22)|0);
 $8 = $23;
 $24 = $8;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  $26 = $1;
  _log_msg(4579,3,$26);
  _exit(1);
  // unreachable;
 }
 $3 = 0;
 $2 = 1;
 while(1) {
  $27 = $2;
  $28 = $1;
  $29 = ((($28)) + 96|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27|0)<=($30|0);
  if (!($31)) {
   break;
  }
  $32 = $1;
  $33 = ((($32)) + 172|0);
  $34 = $2;
  $35 = (($33) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $5 = $36;
  while(1) {
   $37 = $5;
   $38 = ($37|0)!=(0|0);
   if (!($38)) {
    break;
   }
   $39 = $5;
   $40 = ((($39)) + 24|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = ($42|0)==(0);
   if ($43) {
    $44 = $5;
    $45 = ((($44)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $8;
    $48 = $3;
    $49 = (($47) + ($48<<2)|0);
    HEAP32[$49>>2] = $46;
    $50 = $3;
    $51 = (($50) + 1)|0;
    $3 = $51;
   }
   $52 = $5;
   $53 = ((($52)) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   $5 = $54;
  }
  $55 = $1;
  $56 = ((($55)) + 2832|0);
  $57 = $2;
  $58 = (($56) + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $6 = $59;
  while(1) {
   $60 = $6;
   $61 = ($60|0)!=(0|0);
   if (!($61)) {
    break;
   }
   $62 = $6;
   $63 = ((($62)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $8;
   $66 = $3;
   $67 = (($65) + ($66<<2)|0);
   HEAP32[$67>>2] = $64;
   $68 = $3;
   $69 = (($68) + 1)|0;
   $3 = $69;
   $70 = $6;
   $71 = ((($70)) + 28|0);
   $72 = HEAP32[$71>>2]|0;
   $6 = $72;
  }
  $73 = $2;
  $74 = (($73) + 1)|0;
  $2 = $74;
 }
 $75 = $8;
 $76 = $9;
 $77 = $1;
 _sort_elements($75,$76,$77);
 $4 = 0;
 while(1) {
  $78 = $4;
  $79 = $9;
  $80 = ($78>>>0)<($79>>>0);
  $81 = $8;
  if (!($80)) {
   break;
  }
  $82 = $4;
  $83 = (($81) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ((($84)) + 12|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($86)) + 24|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88 << 24 >> 24;
  $90 = ($89|0)==(1);
  $91 = $8;
  $92 = $4;
  $93 = (($91) + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94)) + 12|0);
  $96 = HEAP32[$95>>2]|0;
  if ($90) {
   $7 = $96;
   $97 = $7;
   $98 = $1;
   _print_cluster_with_token($97,$98);
  } else {
   _print_cluster($96);
  }
  $99 = $4;
  $100 = (($99) + 1)|0;
  $4 = $100;
 }
 _free($81);
 STACKTOP = sp;return;
}
function _print_clusters_default_0($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $7 = $1;
 $8 = ((($7)) + 2264|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<2;
 $11 = (_malloc($10)|0);
 $6 = $11;
 $12 = $6;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $14 = $1;
  _log_msg(4524,3,$14);
  _exit(1);
  // unreachable;
 }
 $3 = 0;
 $2 = 1;
 while(1) {
  $15 = $2;
  $16 = $1;
  $17 = ((($16)) + 96|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<=($18|0);
  if (!($19)) {
   break;
  }
  $20 = $1;
  $21 = ((($20)) + 172|0);
  $22 = $2;
  $23 = (($21) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $5 = $24;
  while(1) {
   $25 = $5;
   $26 = ($25|0)!=(0|0);
   if (!($26)) {
    break;
   }
   $27 = $5;
   $28 = ((($27)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $6;
   $31 = $3;
   $32 = (($30) + ($31<<2)|0);
   HEAP32[$32>>2] = $29;
   $33 = $3;
   $34 = (($33) + 1)|0;
   $3 = $34;
   $35 = $5;
   $36 = ((($35)) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $5 = $37;
  }
  $38 = $2;
  $39 = (($38) + 1)|0;
  $2 = $39;
 }
 $40 = $6;
 $41 = $1;
 $42 = ((($41)) + 2264|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $1;
 _sort_elements($40,$43,$44);
 $4 = 0;
 while(1) {
  $45 = $4;
  $46 = $1;
  $47 = ((($46)) + 2264|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($45>>>0)<($48>>>0);
  $50 = $6;
  if (!($49)) {
   break;
  }
  $51 = $4;
  $52 = (($50) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  _print_cluster($55);
  $56 = $4;
  $57 = (($56) + 1)|0;
  $4 = $57;
 }
 _free($50);
 STACKTOP = sp;return;
}
function _step_0_init_input_parameters($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 4652;
 $4 = $1;
 $5 = ((($4)) + 72|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 32|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = $1;
 $9 = ((($8)) + 64|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 88|0);
 HEAP32[$11>>2] = 1;
 $12 = $1;
 $13 = ((($12)) + 84|0);
 HEAP32[$13>>2] = 100000;
 $14 = $1;
 $15 = ((($14)) + 92|0);
 HEAP8[$15>>0] = 0;
 $16 = $1;
 $17 = ((($16)) + 1|0);
 HEAP8[$17>>0] = 0;
 $18 = $3;
 $19 = (_strlen($18)|0);
 $20 = (($19) + 1)|0;
 $21 = (_malloc($20)|0);
 $22 = $1;
 $23 = ((($22)) + 16|0);
 HEAP32[$23>>2] = $21;
 $24 = $1;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 $28 = $1;
 if (!($27)) {
  _log_msg(4659,3,$28);
  _exit(1);
  // unreachable;
 }
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $3;
 (_strcpy($30,$31)|0);
 $32 = $1;
 $33 = ((($32)) + 4|0);
 HEAP32[$33>>2] = 0;
 $34 = $1;
 $35 = ((($34)) + 48|0);
 HEAP32[$35>>2] = 0;
 $36 = $1;
 $37 = ((($36)) + 8|0);
 HEAP32[$37>>2] = 0;
 $38 = $1;
 $39 = ((($38)) + 68|0);
 HEAP32[$39>>2] = 0;
 $40 = $1;
 $41 = ((($40)) + 80|0);
 HEAP32[$41>>2] = 0;
 $42 = $1;
 $43 = ((($42)) + 76|0);
 HEAP32[$43>>2] = 0;
 $44 = $1;
 HEAP8[$44>>0] = 0;
 $45 = $1;
 $46 = ((($45)) + 40|0);
 HEAPF64[$46>>3] = 0.0;
 $47 = $1;
 $48 = ((($47)) + 60|0);
 HEAP32[$48>>2] = 1;
 $49 = $1;
 $50 = ((($49)) + 12|0);
 HEAP32[$50>>2] = 0;
 $51 = $1;
 $52 = ((($51)) + 52|0);
 HEAP32[$52>>2] = 0;
 $53 = $1;
 $54 = ((($53)) + 56|0);
 HEAP32[$54>>2] = 0;
 $55 = $1;
 $56 = ((($55)) + 104|0);
 HEAP32[$56>>2] = 5;
 $57 = $1;
 $58 = ((($57)) + 100|0);
 HEAP32[$58>>2] = 144;
 $59 = $1;
 $60 = ((($59)) + 2256|0);
 HEAP32[$60>>2] = 0;
 $61 = $1;
 $62 = ((($61)) + 2228|0);
 HEAP32[$62>>2] = 0;
 $63 = $1;
 $64 = ((($63)) + 2236|0);
 HEAP32[$64>>2] = 0;
 $65 = $1;
 $66 = ((($65)) + 2252|0);
 HEAP32[$66>>2] = 0;
 $67 = $1;
 $68 = ((($67)) + 7208|0);
 HEAP32[$68>>2] = 0;
 $69 = $1;
 $70 = ((($69)) + 7212|0);
 HEAP32[$70>>2] = 0;
 $71 = $1;
 $72 = ((($71)) + 7216|0);
 HEAP32[$72>>2] = 0;
 $73 = $1;
 $74 = ((($73)) + 7220|0);
 HEAP8[$74>>0] = 0;
 $75 = $1;
 $76 = ((($75)) + 7252|0);
 HEAP32[$76>>2] = 0;
 $77 = $1;
 $78 = ((($77)) + 2268|0);
 HEAP32[$78>>2] = 0;
 $79 = $1;
 $80 = ((($79)) + 2264|0);
 HEAP32[$80>>2] = 0;
 $81 = $1;
 $82 = ((($81)) + 2260|0);
 HEAP32[$82>>2] = 0;
 $83 = $1;
 $84 = ((($83)) + 2232|0);
 HEAP32[$84>>2] = 0;
 $85 = $1;
 $86 = ((($85)) + 2240|0);
 HEAP32[$86>>2] = 0;
 $87 = $1;
 $88 = ((($87)) + 2248|0);
 HEAP32[$88>>2] = 0;
 $89 = $1;
 $90 = ((($89)) + 2224|0);
 HEAP32[$90>>2] = 0;
 $91 = $1;
 $92 = ((($91)) + 2244|0);
 HEAP32[$92>>2] = 0;
 $93 = $1;
 $94 = ((($93)) + 96|0);
 HEAP32[$94>>2] = 0;
 $95 = $1;
 $96 = ((($95)) + 6948|0);
 HEAP32[$96>>2] = 0;
 $97 = $1;
 $98 = ((($97)) + 4892|0);
 HEAP32[$98>>2] = 0;
 $99 = $1;
 $100 = ((($99)) + 2272|0);
 HEAP32[$100>>2] = 0;
 $2 = 0;
 while(1) {
  $101 = $2;
  $102 = ($101|0)<(513);
  $103 = $1;
  if (!($102)) {
   break;
  }
  $104 = ((($103)) + 172|0);
  $105 = $2;
  $106 = (($104) + ($105<<2)|0);
  HEAP32[$106>>2] = 0;
  $107 = $2;
  $108 = (($107) + 1)|0;
  $2 = $108;
 }
 $109 = ((($103)) + 2300|0);
 HEAP32[$109>>2] = 0;
 $110 = $1;
 $111 = ((($110)) + 2296|0);
 HEAP32[$111>>2] = 0;
 $112 = $1;
 $113 = ((($112)) + 2292|0);
 HEAP32[$113>>2] = 0;
 $114 = $1;
 $115 = ((($114)) + 2280|0);
 HEAP32[$115>>2] = 0;
 $116 = $1;
 $117 = ((($116)) + 2276|0);
 HEAP32[$117>>2] = 0;
 $118 = $1;
 $119 = ((($118)) + 2288|0);
 HEAP32[$119>>2] = 0;
 $120 = $1;
 $121 = ((($120)) + 2284|0);
 HEAP32[$121>>2] = 0;
 $122 = $1;
 $123 = ((($122)) + 2304|0);
 (_strcpy($123,4711)|0);
 $2 = 0;
 while(1) {
  $124 = $2;
  $125 = ($124|0)<=(512);
  $126 = $1;
  if (!($125)) {
   break;
  }
  $127 = ((($126)) + 2314|0);
  $128 = $2;
  $129 = (($127) + ($128)|0);
  HEAP8[$129>>0] = 0;
  $130 = $2;
  $131 = (($130) + 1)|0;
  $2 = $131;
 }
 $132 = ((($126)) + 4884|0);
 HEAP32[$132>>2] = 0;
 $133 = $1;
 $134 = ((($133)) + 4888|0);
 HEAP32[$134>>2] = 0;
 $2 = 0;
 while(1) {
  $135 = $2;
  $136 = ($135|0)<(513);
  if (!($136)) {
   break;
  }
  $137 = $1;
  $138 = ((($137)) + 2832|0);
  $139 = $2;
  $140 = (($138) + ($139<<2)|0);
  HEAP32[$140>>2] = 0;
  $141 = $2;
  $142 = (($141) + 1)|0;
  $2 = $142;
 }
 $2 = 0;
 while(1) {
  $143 = $2;
  $144 = ($143|0)<(513);
  $145 = $1;
  if (!($144)) {
   break;
  }
  $146 = ((($145)) + 4896|0);
  $147 = $2;
  $148 = (($146) + ($147<<2)|0);
  HEAP32[$148>>2] = 0;
  $149 = $2;
  $150 = (($149) + 1)|0;
  $2 = $150;
 }
 $151 = ((($145)) + 2828|0);
 HEAP32[$151>>2] = 0;
 $152 = $1;
 $153 = ((($152)) + 6952|0);
 HEAP8[$153>>0] = 0;
 $154 = $1;
 $155 = ((($154)) + 20|0);
 HEAP32[$155>>2] = 0;
 $156 = $1;
 $157 = ((($156)) + 28|0);
 HEAP32[$157>>2] = 0;
 $158 = $1;
 $159 = ((($158)) + 24|0);
 HEAP32[$159>>2] = 0;
 $160 = $1;
 $161 = ((($160)) + 7320|0);
 HEAP8[$161>>0] = 0;
 STACKTOP = sp;return 1;
}
function _step_0_parse_options($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 72|0;
 $9 = sp + 44|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP32[$9>>2] = 0;
 L1: while(1) {
  $10 = $4;
  $11 = $5;
  $12 = (_getopt_long($10,$11,4717,8,$9)|0);
  $7 = $12;
  $13 = ($12|0)!=(-1);
  if (!($13)) {
   label = 48;
   break;
  }
  $14 = $7;
  do {
   switch ($14|0) {
   case 63: case 0:  {
    continue L1;
    break;
   }
   case 1006:  {
    label = 31;
    break L1;
    break;
   }
   case 104:  {
    label = 32;
    break L1;
    break;
   }
   case 97:  {
    $15 = $6;
    HEAP8[$15>>0] = 1;
    continue L1;
    break;
   }
   case 115:  {
    $16 = HEAP32[6774]|0;
    $17 = HEAP32[6774]|0;
    $18 = (_strlen($17)|0);
    $19 = (($18) - 1)|0;
    $20 = (($16) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21 << 24 >> 24;
    $23 = ($22|0)==(37);
    $24 = HEAP32[6774]|0;
    if ($23) {
     $25 = (+_atof($24));
     $26 = $6;
     $27 = ((($26)) + 32|0);
     HEAPF64[$27>>3] = $25;
     continue L1;
    } else {
     $28 = (_atol($24)|0);
     $29 = (_labs($28)|0);
     $30 = $6;
     $31 = ((($30)) + 72|0);
     HEAP32[$31>>2] = $29;
     continue L1;
    }
    break;
   }
   case 105:  {
    $32 = HEAP32[6774]|0;
    $33 = (_atoi($32)|0);
    $34 = (Math_abs(($33|0))|0);
    $35 = $6;
    $36 = ((($35)) + 88|0);
    HEAP32[$36>>2] = $34;
    continue L1;
    break;
   }
   case 119:  {
    $37 = HEAP32[6774]|0;
    $38 = (_atol($37)|0);
    $39 = (_labs($38)|0);
    $40 = $6;
    $41 = ((($40)) + 84|0);
    HEAP32[$41>>2] = $39;
    continue L1;
    break;
   }
   case 1001:  {
    $42 = HEAP32[6774]|0;
    $43 = $6;
    _glob_filenames($42,$43);
    continue L1;
    break;
   }
   case 1002:  {
    $44 = $6;
    $45 = ((($44)) + 92|0);
    HEAP8[$45>>0] = 1;
    $46 = HEAP32[6774]|0;
    $47 = ($46|0)!=(0|0);
    if (!($47)) {
     continue L1;
    }
    $48 = $6;
    _free_syslog_facility($48);
    $49 = HEAP32[6774]|0;
    $50 = (_strlen($49)|0);
    $51 = (($50) + 1)|0;
    $52 = (_malloc($51)|0);
    $53 = $6;
    $54 = ((($53)) + 16|0);
    HEAP32[$54>>2] = $52;
    $55 = $6;
    $56 = ((($55)) + 16|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)!=(0|0);
    $59 = $6;
    if (!($58)) {
     label = 13;
     break L1;
    }
    $60 = ((($59)) + 16|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = HEAP32[6774]|0;
    (_strcpy($61,$62)|0);
    $63 = $6;
    $64 = ((($63)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    _string_lowercase($65);
    continue L1;
    break;
   }
   case 100:  {
    $66 = HEAP32[6774]|0;
    $67 = (_strlen($66)|0);
    $68 = (($67) + 1)|0;
    $69 = (_malloc($68)|0);
    $70 = $6;
    $71 = ((($70)) + 4|0);
    HEAP32[$71>>2] = $69;
    $72 = $6;
    $73 = ((($72)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)!=(0|0);
    $76 = $6;
    if (!($75)) {
     label = 16;
     break L1;
    }
    $77 = ((($76)) + 4|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = HEAP32[6774]|0;
    (_strcpy($78,$79)|0);
    continue L1;
    break;
   }
   case 98:  {
    $80 = HEAP32[6774]|0;
    $81 = (_atoi($80)|0);
    $82 = $6;
    $83 = ((($82)) + 48|0);
    HEAP32[$83>>2] = $81;
    continue L1;
    break;
   }
   case 102:  {
    $84 = HEAP32[6774]|0;
    $85 = (_strlen($84)|0);
    $86 = (($85) + 1)|0;
    $87 = (_malloc($86)|0);
    $88 = $6;
    $89 = ((($88)) + 8|0);
    HEAP32[$89>>2] = $87;
    $90 = $6;
    $91 = ((($90)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)!=(0|0);
    $94 = $6;
    if (!($93)) {
     label = 20;
     break L1;
    }
    $95 = ((($94)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = HEAP32[6774]|0;
    (_strcpy($96,$97)|0);
    continue L1;
    break;
   }
   case 116:  {
    $98 = HEAP32[6774]|0;
    $99 = $6;
    _build_template_chain($98,$99);
    continue L1;
    break;
   }
   case 118:  {
    $100 = HEAP32[6774]|0;
    $101 = (_atol($100)|0);
    $102 = (_labs($101)|0);
    $103 = $6;
    $104 = ((($103)) + 80|0);
    HEAP32[$104>>2] = $102;
    continue L1;
    break;
   }
   case 99:  {
    $105 = HEAP32[6774]|0;
    $106 = (_atol($105)|0);
    $107 = (_labs($106)|0);
    $108 = $6;
    $109 = ((($108)) + 76|0);
    HEAP32[$109>>2] = $107;
    continue L1;
    break;
   }
   case 1003:  {
    $110 = HEAP32[6774]|0;
    $111 = (+_atof($110));
    $112 = $6;
    $113 = ((($112)) + 40|0);
    HEAPF64[$113>>3] = $111;
    continue L1;
    break;
   }
   case 1004:  {
    $114 = HEAP32[6774]|0;
    $115 = (_atoi($114)|0);
    $116 = $6;
    $117 = ((($116)) + 60|0);
    HEAP32[$117>>2] = $115;
    continue L1;
    break;
   }
   case 1005:  {
    $118 = HEAP32[6774]|0;
    $119 = (+_atof($118));
    $120 = $6;
    $121 = ((($120)) + 32|0);
    HEAPF64[$121>>3] = $119;
    continue L1;
    break;
   }
   case 111:  {
    $122 = HEAP32[6774]|0;
    $123 = (_strlen($122)|0);
    $124 = (($123) + 1)|0;
    $125 = (_malloc($124)|0);
    $126 = $6;
    $127 = ((($126)) + 12|0);
    HEAP32[$127>>2] = $125;
    $128 = $6;
    $129 = ((($128)) + 12|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($130|0)!=(0|0);
    $132 = $6;
    if (!($131)) {
     label = 29;
     break L1;
    }
    $133 = ((($132)) + 12|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = HEAP32[6774]|0;
    (_strcpy($134,$135)|0);
    continue L1;
    break;
   }
   case 1007:  {
    $136 = $6;
    $137 = ((($136)) + 52|0);
    HEAP32[$137>>2] = 1;
    $138 = HEAP32[6774]|0;
    $139 = ($138|0)!=(0|0);
    if (!($139)) {
     continue L1;
    }
    $140 = HEAP32[6774]|0;
    $141 = (_atoi($140)|0);
    $142 = $6;
    $143 = ((($142)) + 52|0);
    HEAP32[$143>>2] = $141;
    continue L1;
    break;
   }
   case 1008:  {
    $144 = HEAP32[6774]|0;
    $145 = (_strlen($144)|0);
    $146 = (($145) + 1)|0;
    $147 = (_malloc($146)|0);
    $148 = $6;
    $149 = ((($148)) + 20|0);
    HEAP32[$149>>2] = $147;
    $150 = $6;
    $151 = ((($150)) + 20|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)!=(0|0);
    $154 = $6;
    if (!($153)) {
     label = 36;
     break L1;
    }
    $155 = ((($154)) + 20|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = HEAP32[6774]|0;
    (_strcpy($156,$157)|0);
    continue L1;
    break;
   }
   case 1009:  {
    $158 = HEAP32[6774]|0;
    $159 = (_strlen($158)|0);
    $160 = (($159) + 1)|0;
    $161 = (_malloc($160)|0);
    $162 = $6;
    $163 = ((($162)) + 28|0);
    HEAP32[$163>>2] = $161;
    $164 = $6;
    $165 = ((($164)) + 28|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)!=(0|0);
    $168 = $6;
    if (!($167)) {
     label = 39;
     break L1;
    }
    $169 = ((($168)) + 28|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = HEAP32[6774]|0;
    (_strcpy($170,$171)|0);
    continue L1;
    break;
   }
   case 1010:  {
    $172 = HEAP32[6774]|0;
    $173 = (_strlen($172)|0);
    $174 = (($173) + 1)|0;
    $175 = (_malloc($174)|0);
    $176 = $6;
    $177 = ((($176)) + 24|0);
    HEAP32[$177>>2] = $175;
    $178 = $6;
    $179 = ((($178)) + 24|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($180|0)!=(0|0);
    $182 = $6;
    if (!($181)) {
     label = 42;
     break L1;
    }
    $183 = ((($182)) + 24|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = HEAP32[6774]|0;
    (_strcpy($184,$185)|0);
    continue L1;
    break;
   }
   case 1011:  {
    $186 = $6;
    $187 = ((($186)) + 56|0);
    HEAP32[$187>>2] = 1;
    $188 = HEAP32[6774]|0;
    $189 = ($188|0)!=(0|0);
    if (!($189)) {
     continue L1;
    }
    $190 = HEAP32[6774]|0;
    $191 = (_atoi($190)|0);
    $192 = $6;
    $193 = ((($192)) + 56|0);
    HEAP32[$193>>2] = $191;
    continue L1;
    break;
   }
   case 1012:  {
    $194 = $6;
    $195 = ((($194)) + 1|0);
    HEAP8[$195>>0] = 1;
    continue L1;
    break;
   }
   default: {
    label = 47;
    break L1;
   }
   }
  } while(0);
 }
 switch (label|0) {
  case 13: {
   _log_msg(4740,3,$59);
   _exit(1);
   // unreachable;
   break;
  }
  case 16: {
   _log_msg(4740,3,$76);
   _exit(1);
   // unreachable;
   break;
  }
  case 20: {
   _log_msg(4740,3,$94);
   _exit(1);
   // unreachable;
   break;
  }
  case 29: {
   _log_msg(4740,3,$132);
   _exit(1);
   // unreachable;
   break;
  }
  case 31: {
   HEAP32[$vararg_buffer>>2] = 4787;
   (_printf(4784,$vararg_buffer)|0);
   (_printf(26420,$vararg_buffer1)|0);
   _exit(0);
   // unreachable;
   break;
  }
  case 32: {
   HEAP32[$vararg_buffer3>>2] = 4878;
   (_printf(4784,$vararg_buffer3)|0);
   HEAP32[$vararg_buffer6>>2] = 5547;
   (_printf(4784,$vararg_buffer6)|0);
   (_printf(26420,$vararg_buffer9)|0);
   _exit(0);
   // unreachable;
   break;
  }
  case 36: {
   _log_msg(4740,3,$154);
   _exit(1);
   // unreachable;
   break;
  }
  case 39: {
   _log_msg(4740,3,$168);
   _exit(1);
   // unreachable;
   break;
  }
  case 42: {
   _log_msg(4740,3,$182);
   _exit(1);
   // unreachable;
   break;
  }
  case 47: {
   _abort();
   // unreachable;
   break;
  }
  case 48: {
   $196 = HEAP32[126]|0;
   $197 = $4;
   $198 = ($196|0)<($197|0);
   if (!($198)) {
    $3 = 1;
    $208 = $3;
    STACKTOP = sp;return ($208|0);
   }
   while(1) {
    $199 = HEAP32[126]|0;
    $200 = $4;
    $201 = ($199|0)<($200|0);
    if (!($201)) {
     break;
    }
    $202 = $5;
    $203 = HEAP32[126]|0;
    $204 = (($203) + 1)|0;
    HEAP32[126] = $204;
    $205 = (($202) + ($203<<2)|0);
    $206 = HEAP32[$205>>2]|0;
    (_strcat($8,$206)|0);
    (_strcat($8,15712)|0);
   }
   HEAP32[$vararg_buffer11>>2] = $8;
   (_sprintf($8,15714,$vararg_buffer11)|0);
   $207 = $6;
   _log_msg($8,3,$207);
   $3 = 0;
   $208 = $3;
   STACKTOP = sp;return ($208|0);
   break;
  }
 }
 return (0)|0;
}
function _glob_filenames($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 (_glob($7,16,0,$4)|0);
 $8 = ((($4)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $6 = 0;
 while(1) {
  $10 = $6;
  $11 = HEAP32[$4>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $5;
  $14 = $6;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $3;
  _build_input_file_chain($16,$17);
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 _globfree($4);
 STACKTOP = sp;return;
}
function _build_template_chain($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $8 = $2;
  $9 = $4;
  $10 = (($8) + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   label = 21;
   break;
  }
  $13 = $3;
  $14 = ((($13)) + 68|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  $17 = (_malloc(12)|0);
  if ($16) {
   $18 = HEAP32[6632]|0;
   $19 = ((($18)) + 8|0);
   HEAP32[$19>>2] = $17;
   $20 = HEAP32[6632]|0;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0|0);
   if (!($23)) {
    label = 5;
    break;
   }
   $25 = HEAP32[6632]|0;
   $26 = ((($25)) + 8|0);
   $$sink1 = $26;
  } else {
   $27 = $3;
   $28 = ((($27)) + 68|0);
   HEAP32[$28>>2] = $17;
   $29 = $3;
   $30 = ((($29)) + 68|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   $33 = $3;
   if (!($32)) {
    label = 8;
    break;
   }
   $34 = ((($33)) + 68|0);
   $$sink1 = $34;
  }
  $35 = HEAP32[$$sink1>>2]|0;
  HEAP32[6632] = $35;
  $36 = $2;
  $37 = $4;
  $38 = (($36) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = ($40|0)!=(36);
  if ($41) {
   $42 = $4;
   $5 = $42;
   while(1) {
    $43 = $2;
    $44 = $4;
    $45 = (($43) + ($44)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 << 24 >> 24;
    $48 = ($47|0)!=(0);
    if ($48) {
     $49 = $2;
     $50 = $4;
     $51 = (($49) + ($50)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52 << 24 >> 24;
     $54 = ($53|0)!=(36);
     $95 = $54;
    } else {
     $95 = 0;
    }
    $55 = $4;
    if (!($95)) {
     break;
    }
    $56 = (($55) + 1)|0;
    $4 = $56;
   }
   $57 = $5;
   $58 = (($55) - ($57))|0;
   $6 = $58;
   $59 = $6;
   $60 = (($59) + 1)|0;
   $61 = (_malloc($60)|0);
   $62 = HEAP32[6632]|0;
   HEAP32[$62>>2] = $61;
   $63 = HEAP32[6632]|0;
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)!=(0|0);
   if (!($65)) {
    label = 17;
    break;
   }
   $67 = HEAP32[6632]|0;
   $68 = HEAP32[$67>>2]|0;
   $69 = $2;
   $70 = $5;
   $71 = (($69) + ($70)|0);
   $72 = $6;
   (_strncpy($68,$71,$72)|0);
   $73 = HEAP32[6632]|0;
   $74 = HEAP32[$73>>2]|0;
   $75 = $6;
   $76 = (($74) + ($75)|0);
   HEAP8[$76>>0] = 0;
   $77 = $6;
   $78 = HEAP32[6632]|0;
   $79 = ((($78)) + 4|0);
   HEAP32[$79>>2] = $77;
  } else {
   $80 = HEAP32[6632]|0;
   HEAP32[$80>>2] = 0;
   $81 = $2;
   $82 = $4;
   $83 = (($81) + ($82)|0);
   $84 = ((($83)) + 1|0);
   $85 = (_strtol($84,$7,10)|0);
   $86 = HEAP32[6632]|0;
   $87 = ((($86)) + 4|0);
   HEAP32[$87>>2] = $85;
   $88 = HEAP32[$7>>2]|0;
   $89 = $2;
   $90 = $88;
   $91 = $89;
   $92 = (($90) - ($91))|0;
   $4 = $92;
  }
  $93 = HEAP32[6632]|0;
  $94 = ((($93)) + 8|0);
  HEAP32[$94>>2] = 0;
 }
 if ((label|0) == 5) {
  $24 = $3;
  _log_msg(15739,3,$24);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 8) {
  _log_msg(15739,3,$33);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 17) {
  $66 = $3;
  _log_msg(15739,3,$66);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 21) {
  STACKTOP = sp;return;
 }
}
function _build_input_file_chain($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer = sp;
 $5 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ((($6)) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $10 = (_malloc(12)|0);
  $11 = $3;
  $12 = ((($11)) + 64|0);
  HEAP32[$12>>2] = $10;
  $13 = $3;
  $14 = ((($13)) + 64|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   $17 = $3;
   _log_msg(15790,3,$17);
   _exit(1);
   // unreachable;
  }
  $18 = $2;
  $19 = (_strlen($18)|0);
  $20 = (($19) + 1)|0;
  $21 = (_malloc($20)|0);
  $22 = $3;
  $23 = ((($22)) + 64|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$24>>2] = $21;
  $25 = $3;
  $26 = ((($25)) + 64|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  $30 = $3;
  if (!($29)) {
   _log_msg(15790,3,$30);
   _exit(1);
   // unreachable;
  }
  $31 = ((($30)) + 64|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $34 = $2;
  (_strcpy($33,$34)|0);
  $35 = $3;
  $36 = ((($35)) + 64|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 4|0);
  HEAP32[$38>>2] = 0;
  $39 = $3;
  $40 = ((($39)) + 64|0);
  $41 = HEAP32[$40>>2]|0;
  $$sink1 = $41;
  $78 = ((($$sink1)) + 8|0);
  HEAP32[$78>>2] = 0;
  $79 = $2;
  HEAP32[$vararg_buffer>>2] = $79;
  (_sprintf($5,15843,$vararg_buffer)|0);
  $80 = $3;
  _log_msg($5,6,$80);
  STACKTOP = sp;return;
 }
 $42 = $3;
 $43 = ((($42)) + 64|0);
 $44 = HEAP32[$43>>2]|0;
 $4 = $44;
 while(1) {
  $45 = $4;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0|0);
  if (!($48)) {
   break;
  }
  $49 = $4;
  $50 = ((($49)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $4 = $51;
 }
 $52 = (_malloc(12)|0);
 $53 = $4;
 $54 = ((($53)) + 8|0);
 HEAP32[$54>>2] = $52;
 $55 = $4;
 $56 = ((($55)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0|0);
 if (!($58)) {
  $59 = $3;
  _log_msg(15790,3,$59);
  _exit(1);
  // unreachable;
 }
 $60 = $4;
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $4 = $62;
 $63 = $2;
 $64 = (_strlen($63)|0);
 $65 = (($64) + 1)|0;
 $66 = (_malloc($65)|0);
 $67 = $4;
 HEAP32[$67>>2] = $66;
 $68 = $4;
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)!=(0|0);
 if (!($70)) {
  $71 = $3;
  _log_msg(15790,3,$71);
  _exit(1);
  // unreachable;
 }
 $72 = $4;
 $73 = HEAP32[$72>>2]|0;
 $74 = $2;
 (_strcpy($73,$74)|0);
 $75 = $4;
 $76 = ((($75)) + 4|0);
 HEAP32[$76>>2] = 0;
 $77 = $4;
 $$sink1 = $77;
 $78 = ((($$sink1)) + 8|0);
 HEAP32[$78>>2] = 0;
 $79 = $2;
 HEAP32[$vararg_buffer>>2] = $79;
 (_sprintf($5,15843,$vararg_buffer)|0);
 $80 = $3;
 _log_msg($5,6,$80);
 STACKTOP = sp;return;
}
function _step_0_validate_parameters($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 4652;
 $4 = $2;
 $5 = ((($4)) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)<=(0);
 if ($7) {
  $8 = $2;
  $9 = ((($8)) + 32|0);
  $10 = +HEAPF64[$9>>3];
  $11 = $10 <= 0.0;
  if ($11) {
   $12 = $2;
   _log_msg(16060,3,$12);
   $1 = 0;
   $155 = $1;
   STACKTOP = sp;return ($155|0);
  }
 }
 $13 = $2;
 $14 = ((($13)) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 $17 = $2;
 if (!($16)) {
  _log_msg(16140,3,$17);
  $1 = 0;
  $155 = $1;
  STACKTOP = sp;return ($155|0);
 }
 $18 = ((($17)) + 88|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19>>>0)<=(0);
 $21 = $2;
 if ($20) {
  _log_msg(16165,3,$21);
  $1 = 0;
  $155 = $1;
  STACKTOP = sp;return ($155|0);
 }
 $22 = ((($21)) + 84|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23>>>0)<=(0);
 $25 = $2;
 if ($24) {
  _log_msg(16241,3,$25);
  $1 = 0;
  $155 = $1;
  STACKTOP = sp;return ($155|0);
 }
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 $29 = (_strcmp($27,$28)|0);
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $2;
  $32 = (_change_syslog_facility_number($31)|0);
  $33 = ($32|0)!=(0);
  if (!($33)) {
   $1 = 0;
   $155 = $1;
   STACKTOP = sp;return ($155|0);
  }
 }
 $34 = $2;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 $38 = $2;
 $39 = ((($38)) + 108|0);
 if ($37) {
  $40 = $2;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (_regcomp($39,$42,1)|0);
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = $2;
   _log_msg(16311,3,$45);
   $1 = 0;
   $155 = $1;
   STACKTOP = sp;return ($155|0);
  }
 } else {
  (_regcomp($39,16374,1)|0);
 }
 $46 = $2;
 $47 = ((($46)) + 48|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)<(0);
 $50 = $2;
 if ($49) {
  _log_msg(16379,3,$50);
  $1 = 0;
  $155 = $1;
  STACKTOP = sp;return ($155|0);
 }
 $51 = ((($50)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = $2;
  $55 = ((($54)) + 140|0);
  $56 = $2;
  $57 = ((($56)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_regcomp($55,$58,1)|0);
  $60 = ($59|0)!=(0);
  if ($60) {
   $61 = $2;
   _log_msg(16449,3,$61);
   $1 = 0;
   $155 = $1;
   STACKTOP = sp;return ($155|0);
  }
 }
 $62 = $2;
 $63 = ((($62)) + 20|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0|0);
 do {
  if ($65) {
   $66 = $2;
   $67 = ((($66)) + 28|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)!=(0|0);
   if ($69) {
    $70 = $2;
    $71 = ((($70)) + 24|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)!=(0|0);
    if ($73) {
     break;
    }
   }
   $74 = $2;
   _log_msg(16510,3,$74);
   $1 = 0;
   $155 = $1;
   STACKTOP = sp;return ($155|0);
  }
 } while(0);
 $75 = $2;
 $76 = ((($75)) + 20|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)!=(0|0);
 if ($78) {
  $79 = $2;
  $80 = ((($79)) + 7256|0);
  $81 = $2;
  $82 = ((($81)) + 20|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (_regcomp($80,$83,1)|0);
  $85 = ($84|0)!=(0);
  if ($85) {
   $86 = $2;
   _log_msg(16590,3,$86);
   $1 = 0;
   $155 = $1;
   STACKTOP = sp;return ($155|0);
  }
 }
 $87 = $2;
 $88 = ((($87)) + 28|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0|0);
 if ($90) {
  $91 = $2;
  $92 = ((($91)) + 7288|0);
  $93 = $2;
  $94 = ((($93)) + 28|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (_regcomp($92,$95,1)|0);
  $97 = ($96|0)!=(0);
  if ($97) {
   $98 = $2;
   _log_msg(16643,3,$98);
   $1 = 0;
   $155 = $1;
   STACKTOP = sp;return ($155|0);
  }
 }
 $99 = $2;
 $100 = (_validate_parameters_template($99)|0);
 $101 = ($100|0)!=(0);
 if (!($101)) {
  $1 = 0;
  $155 = $1;
  STACKTOP = sp;return ($155|0);
 }
 $102 = $2;
 $103 = ((($102)) + 40|0);
 $104 = +HEAPF64[$103>>3];
 $105 = $104 < 0.0;
 if (!($105)) {
  $106 = $2;
  $107 = ((($106)) + 40|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $108 > 1.0;
  if (!($109)) {
   $111 = $2;
   $112 = ((($111)) + 60|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($113|0)!=(1);
   if ($114) {
    $115 = $2;
    $116 = ((($115)) + 60|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)!=(2);
    if ($118) {
     $119 = $2;
     _log_msg(16752,3,$119);
     $1 = 0;
     $155 = $1;
     STACKTOP = sp;return ($155|0);
    }
   }
   $120 = $2;
   $121 = ((($120)) + 52|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ($122|0)!=(0);
   do {
    if ($123) {
     $124 = $2;
     $125 = ((($124)) + 52|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($126|0)!=(1);
     if ($127) {
      $128 = $2;
      $129 = ((($128)) + 52|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)!=(2);
      if ($131) {
       $132 = $2;
       $133 = ((($132)) + 52|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)!=(3);
       if (!($135)) {
        break;
       }
       $136 = $2;
       _log_msg(16803,3,$136);
       $1 = 0;
       $155 = $1;
       STACKTOP = sp;return ($155|0);
      }
     }
    }
   } while(0);
   $137 = $2;
   $138 = ((($137)) + 56|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($139|0)!=(0);
   if ($140) {
    $141 = $2;
    $142 = ((($141)) + 56|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)!=(1);
    if ($144) {
     $145 = $2;
     _log_msg(16855,3,$145);
     $1 = 0;
     $155 = $1;
     STACKTOP = sp;return ($155|0);
    }
   }
   $146 = $2;
   $147 = ((($146)) + 76|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = ($148|0)!=(0);
   do {
    if ($149) {
     $150 = $2;
     $151 = HEAP8[$150>>0]|0;
     $152 = $151 << 24 >> 24;
     $153 = ($152|0)!=(0);
     if (!($153)) {
      break;
     }
     $154 = $2;
     _log_msg(16904,3,$154);
     $1 = 0;
     $155 = $1;
     STACKTOP = sp;return ($155|0);
    }
   } while(0);
   $1 = 1;
   $155 = $1;
   STACKTOP = sp;return ($155|0);
  }
 }
 $110 = $2;
 _log_msg(16696,3,$110);
 $1 = 0;
 $155 = $1;
 STACKTOP = sp;return ($155|0);
}
function _change_syslog_facility_number($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = ($4>>>0)<(24);
  if (!($5)) {
   break;
  }
  $6 = $2;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $3;
  $10 = (408 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strcmp($8,$11)|0);
  $13 = ($12|0)!=(0);
  $14 = $3;
  if (!($13)) {
   label = 4;
   break;
  }
  $38 = ($14|0)==(23);
  if ($38) {
   label = 29;
   break;
  }
  $40 = $3;
  $41 = (($40) + 1)|0;
  $3 = $41;
 }
 if ((label|0) == 29) {
  $39 = $2;
  _log_msg(17054,3,$39);
  $1 = 0;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 }
 if ((label|0) == 4) {
  do {
   switch ($14|0) {
   case 0:  {
    $15 = $2;
    $$sink = 0;$$sink2 = $15;
    break;
   }
   case 1:  {
    $16 = $2;
    $$sink = 8;$$sink2 = $16;
    break;
   }
   case 2:  {
    $17 = $2;
    $$sink = 16;$$sink2 = $17;
    break;
   }
   case 3:  {
    $18 = $2;
    $$sink = 24;$$sink2 = $18;
    break;
   }
   case 4:  {
    $19 = $2;
    $$sink = 32;$$sink2 = $19;
    break;
   }
   case 5:  {
    $20 = $2;
    $$sink = 40;$$sink2 = $20;
    break;
   }
   case 6:  {
    $21 = $2;
    $$sink = 48;$$sink2 = $21;
    break;
   }
   case 7:  {
    $22 = $2;
    $$sink = 56;$$sink2 = $22;
    break;
   }
   case 8:  {
    $23 = $2;
    $$sink = 64;$$sink2 = $23;
    break;
   }
   case 9:  {
    $24 = $2;
    $$sink = 72;$$sink2 = $24;
    break;
   }
   case 10:  {
    $25 = $2;
    $$sink = 80;$$sink2 = $25;
    break;
   }
   case 11:  {
    $26 = $2;
    $$sink = 88;$$sink2 = $26;
    break;
   }
   case 15: case 14: case 13: case 12:  {
    $27 = $2;
    $$sink = 144;$$sink2 = $27;
    break;
   }
   case 16:  {
    $28 = $2;
    $$sink = 128;$$sink2 = $28;
    break;
   }
   case 17:  {
    $29 = $2;
    $$sink = 136;$$sink2 = $29;
    break;
   }
   case 18:  {
    $30 = $2;
    $$sink = 144;$$sink2 = $30;
    break;
   }
   case 19:  {
    $31 = $2;
    $$sink = 152;$$sink2 = $31;
    break;
   }
   case 20:  {
    $32 = $2;
    $$sink = 160;$$sink2 = $32;
    break;
   }
   case 21:  {
    $33 = $2;
    $$sink = 168;$$sink2 = $33;
    break;
   }
   case 22:  {
    $34 = $2;
    $$sink = 176;$$sink2 = $34;
    break;
   }
   case 23:  {
    $35 = $2;
    $$sink = 184;$$sink2 = $35;
    break;
   }
   default: {
    $36 = $2;
    $$sink = 144;$$sink2 = $36;
   }
   }
  } while(0);
  $37 = ((($$sink2)) + 100|0);
  HEAP32[$37>>2] = $$sink;
 }
 $1 = 1;
 $42 = $1;
 STACKTOP = sp;return ($42|0);
}
function _validate_parameters_template($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $3 = $7;
 while(1) {
  $8 = $3;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 8;
   break;
  }
  $10 = $3;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   $13 = $3;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)<(0);
   if ($16) {
    label = 6;
    break;
   }
   $17 = $3;
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)>(99);
   if ($20) {
    label = 6;
    break;
   }
  }
  $22 = $3;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $3 = $24;
 }
 if ((label|0) == 6) {
  HEAP32[$vararg_buffer>>2] = 99;
  (_sprintf($4,16970,$vararg_buffer)|0);
  $21 = $2;
  _log_msg($4,3,$21);
  $1 = 0;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 8) {
  $1 = 1;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _step_0_generate_seeds($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (_rand()|0);
 $3 = $1;
 $4 = ((($3)) + 2256|0);
 HEAP32[$4>>2] = $2;
 $5 = (_rand()|0);
 $6 = $1;
 $7 = ((($6)) + 2252|0);
 HEAP32[$7>>2] = $5;
 $8 = (_rand()|0);
 $9 = $1;
 $10 = ((($9)) + 2240|0);
 HEAP32[$10>>2] = $8;
 $11 = (_rand()|0);
 $12 = $1;
 $13 = ((($12)) + 2244|0);
 HEAP32[$13>>2] = $11;
 $14 = (_rand()|0);
 $15 = $1;
 $16 = ((($15)) + 2292|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return;
}
function _step_0_cal_total_pass_over_data_set_times($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 2;
 $3 = $1;
 $4 = ((($3)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $8 = (($7) + 1)|0;
  $2 = $8;
 }
 $9 = $1;
 $10 = ((($9)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 $15 = $1;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $21 = $2;
  STACKTOP = sp;return ($21|0);
 }
 $19 = $2;
 $20 = (($19) + 1)|0;
 $2 = $20;
 $21 = $2;
 STACKTOP = sp;return ($21|0);
}
function _string_lowercase($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $2 = $1;
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = (_tolower($7)|0);
  $9 = $8&255;
  $10 = $1;
  HEAP8[$10>>0] = $9;
  $11 = $1;
  $12 = ((($11)) + 1|0);
  $1 = $12;
 }
 STACKTOP = sp;return;
}
function _str_format_int_grouped($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $4 = sp + 32|0;
 $2 = $0;
 $3 = $1;
 $5 = $4;
 $10 = $2;
 $6 = $10;
 $7 = 44;
 $11 = $3;
 HEAP32[$vararg_buffer>>2] = $11;
 $12 = (_sprintf($4,17257,$vararg_buffer)|0);
 $8 = $12;
 $13 = $5;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)==(45);
 if ($16) {
  $17 = $5;
  $18 = ((($17)) + 1|0);
  $5 = $18;
  $19 = HEAP8[$17>>0]|0;
  $20 = $6;
  $21 = ((($20)) + 1|0);
  $6 = $21;
  HEAP8[$20>>0] = $19;
  $22 = $8;
  $23 = (($22) + -1)|0;
  $8 = $23;
 }
 $24 = $8;
 $25 = (($24|0) % 3)&-1;
 $26 = (2 - ($25))|0;
 $9 = $26;
 while(1) {
  $27 = $5;
  $28 = HEAP8[$27>>0]|0;
  $29 = ($28<<24>>24)!=(0);
  if (!($29)) {
   break;
  }
  $30 = $5;
  $31 = ((($30)) + 1|0);
  $5 = $31;
  $32 = HEAP8[$30>>0]|0;
  $33 = $6;
  $34 = ((($33)) + 1|0);
  $6 = $34;
  HEAP8[$33>>0] = $32;
  $35 = $9;
  $36 = ($35|0)==(1);
  if ($36) {
   $37 = $6;
   $38 = ((($37)) + 1|0);
   $6 = $38;
   HEAP8[$37>>0] = 44;
  }
  $39 = $9;
  $40 = (($39) + 1)|0;
  $41 = (($40|0) % 3)&-1;
  $9 = $41;
 }
 $42 = $6;
 $43 = ((($42)) + -1|0);
 $6 = $43;
 HEAP8[$43>>0] = 0;
 $44 = $6;
 $45 = $2;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 STACKTOP = sp;return ($48|0);
}
function _str2hash($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $3;
  $8 = $6;
  $9 = (($7) + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)!=(0);
  $13 = $5;
  if (!($12)) {
   break;
  }
  $14 = $5;
  $15 = $14 << 5;
  $16 = $5;
  $17 = $16 >>> 2;
  $18 = (($15) + ($17))|0;
  $19 = $3;
  $20 = $6;
  $21 = (($19) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = (($18) + ($23))|0;
  $25 = $13 ^ $24;
  $5 = $25;
  $26 = $6;
  $27 = (($26) + 1)|0;
  $6 = $27;
 }
 $28 = $4;
 $29 = (($13>>>0) % ($28>>>0))&-1;
 STACKTOP = sp;return ($29|0);
}
function _sort_elements($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $4;
  $12 = (($11) - 1)|0;
  $13 = ($10>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $7;
  $8 = $14;
  $15 = $7;
  $16 = (($15) + 1)|0;
  $6 = $16;
  while(1) {
   $17 = $6;
   $18 = $4;
   $19 = ($17>>>0)<($18>>>0);
   $20 = $3;
   if (!($19)) {
    break;
   }
   $21 = $6;
   $22 = (($20) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $3;
   $27 = $8;
   $28 = (($26) + ($27<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($25>>>0)>($31>>>0);
   if ($32) {
    $33 = $6;
    $8 = $33;
   }
   $34 = $6;
   $35 = (($34) + 1)|0;
   $6 = $35;
  }
  $36 = $7;
  $37 = (($20) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $9 = $38;
  $39 = $3;
  $40 = $8;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $3;
  $44 = $7;
  $45 = (($43) + ($44<<2)|0);
  HEAP32[$45>>2] = $42;
  $46 = $9;
  $47 = $3;
  $48 = $8;
  $49 = (($47) + ($48<<2)|0);
  HEAP32[$49>>2] = $46;
  $50 = $7;
  $51 = (($50) + 1)|0;
  $7 = $51;
 }
 STACKTOP = sp;return;
}
function _gen_random_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $3;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = (_rand()|0);
  $9 = (($8>>>0) % 62)&-1;
  $10 = (17261 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $2;
  $13 = $4;
  $14 = (($12) + ($13)|0);
  HEAP8[$14>>0] = $11;
  $15 = $4;
  $16 = (($15) + 1)|0;
  $4 = $16;
 }
 $17 = $2;
 $18 = $3;
 $19 = (($17) + ($18)|0);
 HEAP8[$19>>0] = 0;
 STACKTOP = sp;return;
}
function _is_word_filtered($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ((($5)) + 7256|0);
 $7 = $3;
 $8 = (_regexec($6,$7,0,0,0)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $10 = $4;
  $11 = ((($10)) + 7288|0);
  $12 = $3;
  $13 = (_regexec($11,$12,0,0,0)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   $2 = 1;
   $15 = $2;
   STACKTOP = sp;return ($15|0);
  }
 }
 $2 = 0;
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function _word_search_replace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(816|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ((($6)) + 7320|0);
 $8 = $2;
 (_strcpy($7,$8)|0);
 $5 = 0;
 while(1) {
  $9 = $3;
  $10 = ((($9)) + 7288|0);
  $11 = $3;
  $12 = ((($11)) + 7320|0);
  $13 = (_regexec($10,$12,1,$4,0)|0);
  $14 = ($13|0)!=(0);
  if ($14) {
   label = 6;
   break;
  }
  $15 = $5;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = HEAP32[$4>>2]|0;
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = ((($4)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)<(0);
   $23 = $22 << 31 >> 31;
   $24 = $3;
   $25 = (_check_endless_loop($17,$19,$21,$23,$24)|0);
   $26 = ($25|0)!=(0);
   if (!($26)) {
    label = 6;
    break;
   }
  }
  $27 = HEAP32[$4>>2]|0;
  $28 = ($27|0)<(0);
  $29 = $28 << 31 >> 31;
  $30 = ((($4)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)<(0);
  $33 = $32 << 31 >> 31;
  $34 = $3;
  $35 = ((($34)) + 7320|0);
  $36 = $3;
  $37 = ((($36)) + 24|0);
  $38 = HEAP32[$37>>2]|0;
  _replace_string_for_word_search($27,$29,$31,$33,$35,$38);
  $39 = $5;
  $40 = (($39) + 1)|0;
  $5 = $40;
 }
 if ((label|0) == 6) {
  $41 = $3;
  $42 = ((($41)) + 7320|0);
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _check_endless_loop($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $9 = sp;
 $11 = $6;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = $7;
 $16 = $15;
 HEAP32[$16>>2] = $2;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $3;
 $8 = $4;
 $10 = 0;
 $19 = $6;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = $9;
 $26 = $25;
 HEAP32[$26>>2] = $21;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 while(1) {
  $29 = $9;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = $7;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = ($34|0)<($40|0);
  $42 = ($31>>>0)<($37>>>0);
  $43 = ($34|0)==($40|0);
  $44 = $43 & $42;
  $45 = $41 | $44;
  if (!($45)) {
   label = 6;
   break;
  }
  $46 = $8;
  $47 = ((($46)) + 7320|0);
  $48 = $9;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($47) + ($50)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55 << 24 >> 24;
  $57 = $8;
  $58 = ((($57)) + 24|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $10;
  $61 = (($59) + ($60)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = ($56|0)!=($63|0);
  if ($64) {
   label = 4;
   break;
  }
  $65 = $10;
  $66 = (($65) + 1)|0;
  $10 = $66;
  $67 = $9;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = (($67) + 4)|0;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  $73 = (_i64Add(($69|0),($72|0),1,0)|0);
  $74 = tempRet0;
  $75 = $9;
  $76 = $75;
  HEAP32[$76>>2] = $73;
  $77 = (($75) + 4)|0;
  $78 = $77;
  HEAP32[$78>>2] = $74;
 }
 if ((label|0) == 4) {
  $5 = 1;
  $79 = $5;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 6) {
  $5 = 0;
  $79 = $5;
  STACKTOP = sp;return ($79|0);
 }
 return (0)|0;
}
function _replace_string_for_word_search($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(10304|0);
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $10 = sp + 48|0;
 $15 = sp;
 $16 = $6;
 $17 = $16;
 HEAP32[$17>>2] = $0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $1;
 $20 = $7;
 $21 = $20;
 HEAP32[$21>>2] = $2;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $3;
 $8 = $4;
 $9 = $5;
 HEAP8[$10>>0] = 0;
 $11 = 0;
 $24 = $8;
 $25 = (_strlen($24)|0);
 $13 = $25;
 $26 = $9;
 $27 = (_strlen($26)|0);
 $14 = $27;
 $28 = $7;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $15;
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $33;
 while(1) {
  $38 = $15;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + 4)|0;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = $13;
  $45 = ($44|0)<(0);
  $46 = $45 << 31 >> 31;
  $47 = ($43|0)<($46|0);
  $48 = ($40>>>0)<($44>>>0);
  $49 = ($43|0)==($46|0);
  $50 = $49 & $48;
  $51 = $47 | $50;
  if (!($51)) {
   break;
  }
  $52 = $8;
  $53 = $15;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + 4)|0;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($52) + ($55)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $11;
  $62 = (($10) + ($61)|0);
  HEAP8[$62>>0] = $60;
  $63 = $11;
  $64 = (($63) + 1)|0;
  $11 = $64;
  $65 = $15;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = (_i64Add(($67|0),($70|0),1,0)|0);
  $72 = tempRet0;
  $73 = $15;
  $74 = $73;
  HEAP32[$74>>2] = $71;
  $75 = (($73) + 4)|0;
  $76 = $75;
  HEAP32[$76>>2] = $72;
 }
 $77 = $11;
 $78 = (($10) + ($77)|0);
 HEAP8[$78>>0] = 0;
 $12 = 0;
 while(1) {
  $79 = $12;
  $80 = $14;
  $81 = ($79|0)<($80|0);
  if (!($81)) {
   break;
  }
  $82 = $9;
  $83 = $12;
  $84 = (($82) + ($83)|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $8;
  $87 = $6;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($87) + 4)|0;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = (($86) + ($89)|0);
  HEAP8[$93>>0] = $85;
  $94 = $6;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = (($94) + 4)|0;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (_i64Add(($96|0),($99|0),1,0)|0);
  $101 = tempRet0;
  $102 = $6;
  $103 = $102;
  HEAP32[$103>>2] = $100;
  $104 = (($102) + 4)|0;
  $105 = $104;
  HEAP32[$105>>2] = $101;
  $106 = $12;
  $107 = (($106) + 1)|0;
  $12 = $107;
 }
 $108 = $8;
 $109 = $6;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $112 = (($109) + 4)|0;
 $113 = $112;
 $114 = HEAP32[$113>>2]|0;
 $115 = (($108) + ($111)|0);
 HEAP8[$115>>0] = 0;
 $116 = $8;
 (_strcat($116,$10)|0);
 STACKTOP = sp;return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0172$lcssa$i = 0, $$01724$i = 0, $$0173$lcssa$i = 0, $$01733$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0;
 var $$024367$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0, $$124466$i = 0;
 var $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i199 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$4236$i = 0, $$4329$lcssa$i = 0;
 var $$43298$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43357$i = 0, $$49$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i207 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i208Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0, $$sink1$i$i = 0;
 var $$sink12$i = 0, $$sink2$i = 0, $$sink2$i202 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i206 = 0, $not$$i = 0, $not$3$i = 0;
 var $or$cond$i = 0, $or$cond$i200 = 0, $or$cond1$i = 0, $or$cond1$i198 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[6633]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (26572 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[6633] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(26540)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (26572 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[6633] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(26552)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (26572 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[6633] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(26540)>>2] = $76;
     HEAP32[(26552)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(26536)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (26836 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(0|0);
     $$sink12$i = $131&1;
     $132 = (((($124)) + 16|0) + ($$sink12$i<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)==(0|0);
     if ($134) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01724$i = $124;$$01733$i = $128;$136 = $133;
      while(1) {
       $135 = ((($136)) + 4|0);
       $137 = HEAP32[$135>>2]|0;
       $138 = $137 & -8;
       $139 = (($138) - ($6))|0;
       $140 = ($139>>>0)<($$01733$i>>>0);
       $$$0173$i = $140 ? $139 : $$01733$i;
       $$$0172$i = $140 ? $136 : $$01724$i;
       $141 = ((($136)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       $$sink1$i = $143&1;
       $144 = (((($136)) + 16|0) + ($$sink1$i<<2)|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($145|0)==(0|0);
       if ($146) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01724$i = $$$0172$i;$$01733$i = $$$0173$i;$136 = $145;
       }
      }
     }
     $147 = (($$0172$lcssa$i) + ($6)|0);
     $148 = ($147>>>0)>($$0172$lcssa$i>>>0);
     if ($148) {
      $149 = ((($$0172$lcssa$i)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ((($$0172$lcssa$i)) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==($$0172$lcssa$i|0);
      do {
       if ($153) {
        $158 = ((($$0172$lcssa$i)) + 20|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)==(0|0);
        if ($160) {
         $161 = ((($$0172$lcssa$i)) + 16|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==(0|0);
         if ($163) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $162;$$1178$i = $161;
         }
        } else {
         $$1176$i = $159;$$1178$i = $158;
        }
        while(1) {
         $164 = ((($$1176$i)) + 20|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($165|0)==(0|0);
         if (!($166)) {
          $$1176$i = $165;$$1178$i = $164;
          continue;
         }
         $167 = ((($$1176$i)) + 16|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          break;
         } else {
          $$1176$i = $168;$$1178$i = $167;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $154 = ((($$0172$lcssa$i)) + 8|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ((($155)) + 12|0);
        HEAP32[$156>>2] = $152;
        $157 = ((($152)) + 8|0);
        HEAP32[$157>>2] = $155;
        $$3$i = $152;
       }
      } while(0);
      $170 = ($150|0)==(0|0);
      do {
       if (!($170)) {
        $171 = ((($$0172$lcssa$i)) + 28|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (26836 + ($172<<2)|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($$0172$lcssa$i|0)==($174|0);
        if ($175) {
         HEAP32[$173>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $176 = 1 << $172;
          $177 = $176 ^ -1;
          $178 = $98 & $177;
          HEAP32[(26536)>>2] = $178;
          break;
         }
        } else {
         $179 = ((($150)) + 16|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($180|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $181&1;
         $182 = (((($150)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$182>>2] = $$3$i;
         $183 = ($$3$i|0)==(0|0);
         if ($183) {
          break;
         }
        }
        $184 = ((($$3$i)) + 24|0);
        HEAP32[$184>>2] = $150;
        $185 = ((($$0172$lcssa$i)) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ($186|0)==(0|0);
        if (!($187)) {
         $188 = ((($$3$i)) + 16|0);
         HEAP32[$188>>2] = $186;
         $189 = ((($186)) + 24|0);
         HEAP32[$189>>2] = $$3$i;
        }
        $190 = ((($$0172$lcssa$i)) + 20|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($191|0)==(0|0);
        if (!($192)) {
         $193 = ((($$3$i)) + 20|0);
         HEAP32[$193>>2] = $191;
         $194 = ((($191)) + 24|0);
         HEAP32[$194>>2] = $$3$i;
        }
       }
      } while(0);
      $195 = ($$0173$lcssa$i>>>0)<(16);
      if ($195) {
       $196 = (($$0173$lcssa$i) + ($6))|0;
       $197 = $196 | 3;
       $198 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = (($$0172$lcssa$i) + ($196)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 | 1;
       HEAP32[$200>>2] = $202;
      } else {
       $203 = $6 | 3;
       $204 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$204>>2] = $203;
       $205 = $$0173$lcssa$i | 1;
       $206 = ((($147)) + 4|0);
       HEAP32[$206>>2] = $205;
       $207 = (($147) + ($$0173$lcssa$i)|0);
       HEAP32[$207>>2] = $$0173$lcssa$i;
       $208 = ($33|0)==(0);
       if (!($208)) {
        $209 = HEAP32[(26552)>>2]|0;
        $210 = $33 >>> 3;
        $211 = $210 << 1;
        $212 = (26572 + ($211<<2)|0);
        $213 = 1 << $210;
        $214 = $8 & $213;
        $215 = ($214|0)==(0);
        if ($215) {
         $216 = $8 | $213;
         HEAP32[6633] = $216;
         $$pre$i = ((($212)) + 8|0);
         $$0$i = $212;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $217 = ((($212)) + 8|0);
         $218 = HEAP32[$217>>2]|0;
         $$0$i = $218;$$pre$phi$iZ2D = $217;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $209;
        $219 = ((($$0$i)) + 12|0);
        HEAP32[$219>>2] = $209;
        $220 = ((($209)) + 8|0);
        HEAP32[$220>>2] = $$0$i;
        $221 = ((($209)) + 12|0);
        HEAP32[$221>>2] = $212;
       }
       HEAP32[(26540)>>2] = $$0173$lcssa$i;
       HEAP32[(26552)>>2] = $147;
      }
      $222 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $222;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $223 = ($0>>>0)>(4294967231);
   if ($223) {
    $$0192 = -1;
   } else {
    $224 = (($0) + 11)|0;
    $225 = $224 & -8;
    $226 = HEAP32[(26536)>>2]|0;
    $227 = ($226|0)==(0);
    if ($227) {
     $$0192 = $225;
    } else {
     $228 = (0 - ($225))|0;
     $229 = $224 >>> 8;
     $230 = ($229|0)==(0);
     if ($230) {
      $$0336$i = 0;
     } else {
      $231 = ($225>>>0)>(16777215);
      if ($231) {
       $$0336$i = 31;
      } else {
       $232 = (($229) + 1048320)|0;
       $233 = $232 >>> 16;
       $234 = $233 & 8;
       $235 = $229 << $234;
       $236 = (($235) + 520192)|0;
       $237 = $236 >>> 16;
       $238 = $237 & 4;
       $239 = $238 | $234;
       $240 = $235 << $238;
       $241 = (($240) + 245760)|0;
       $242 = $241 >>> 16;
       $243 = $242 & 2;
       $244 = $239 | $243;
       $245 = (14 - ($244))|0;
       $246 = $240 << $243;
       $247 = $246 >>> 15;
       $248 = (($245) + ($247))|0;
       $249 = $248 << 1;
       $250 = (($248) + 7)|0;
       $251 = $225 >>> $250;
       $252 = $251 & 1;
       $253 = $252 | $249;
       $$0336$i = $253;
      }
     }
     $254 = (26836 + ($$0336$i<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)==(0|0);
     L74: do {
      if ($256) {
       $$2333$i = 0;$$3$i199 = 0;$$3328$i = $228;
       label = 57;
      } else {
       $257 = ($$0336$i|0)==(31);
       $258 = $$0336$i >>> 1;
       $259 = (25 - ($258))|0;
       $260 = $257 ? 0 : $259;
       $261 = $225 << $260;
       $$0320$i = 0;$$0325$i = $228;$$0331$i = $255;$$0337$i = $261;$$0340$i = 0;
       while(1) {
        $262 = ((($$0331$i)) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $263 & -8;
        $265 = (($264) - ($225))|0;
        $266 = ($265>>>0)<($$0325$i>>>0);
        if ($266) {
         $267 = ($265|0)==(0);
         if ($267) {
          $$43298$i = 0;$$43357$i = $$0331$i;$$49$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $265;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $268 = ((($$0331$i)) + 20|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = $$0337$i >>> 31;
        $271 = (((($$0331$i)) + 16|0) + ($270<<2)|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($269|0)==(0|0);
        $274 = ($269|0)==($272|0);
        $or$cond1$i198 = $273 | $274;
        $$1341$i = $or$cond1$i198 ? $$0340$i : $269;
        $275 = ($272|0)==(0|0);
        $not$3$i = $275 ^ 1;
        $276 = $not$3$i&1;
        $$0337$$i = $$0337$i << $276;
        if ($275) {
         $$2333$i = $$1341$i;$$3$i199 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $272;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $277 = ($$2333$i|0)==(0|0);
      $278 = ($$3$i199|0)==(0|0);
      $or$cond$i200 = $277 & $278;
      if ($or$cond$i200) {
       $279 = 2 << $$0336$i;
       $280 = (0 - ($279))|0;
       $281 = $279 | $280;
       $282 = $226 & $281;
       $283 = ($282|0)==(0);
       if ($283) {
        $$0192 = $225;
        break;
       }
       $284 = (0 - ($282))|0;
       $285 = $282 & $284;
       $286 = (($285) + -1)|0;
       $287 = $286 >>> 12;
       $288 = $287 & 16;
       $289 = $286 >>> $288;
       $290 = $289 >>> 5;
       $291 = $290 & 8;
       $292 = $291 | $288;
       $293 = $289 >>> $291;
       $294 = $293 >>> 2;
       $295 = $294 & 4;
       $296 = $292 | $295;
       $297 = $293 >>> $295;
       $298 = $297 >>> 1;
       $299 = $298 & 2;
       $300 = $296 | $299;
       $301 = $297 >>> $299;
       $302 = $301 >>> 1;
       $303 = $302 & 1;
       $304 = $300 | $303;
       $305 = $301 >>> $303;
       $306 = (($304) + ($305))|0;
       $307 = (26836 + ($306<<2)|0);
       $308 = HEAP32[$307>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $308;
      } else {
       $$4$ph$i = $$3$i199;$$4335$ph$i = $$2333$i;
      }
      $309 = ($$4335$ph$i|0)==(0|0);
      if ($309) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$43298$i = $$3328$i;$$43357$i = $$4335$ph$i;$$49$i = $$4$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $310 = ((($$43357$i)) + 4|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = $311 & -8;
       $313 = (($312) - ($225))|0;
       $314 = ($313>>>0)<($$43298$i>>>0);
       $$$4329$i = $314 ? $313 : $$43298$i;
       $$4335$$4$i = $314 ? $$43357$i : $$49$i;
       $315 = ((($$43357$i)) + 16|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = ($316|0)==(0|0);
       $$sink2$i202 = $317&1;
       $318 = (((($$43357$i)) + 16|0) + ($$sink2$i202<<2)|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = ($319|0)==(0|0);
       if ($320) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$43298$i = $$$4329$i;$$43357$i = $319;$$49$i = $$4335$$4$i;
        label = 61;
       }
      }
     }
     $321 = ($$4$lcssa$i|0)==(0|0);
     if ($321) {
      $$0192 = $225;
     } else {
      $322 = HEAP32[(26540)>>2]|0;
      $323 = (($322) - ($225))|0;
      $324 = ($$4329$lcssa$i>>>0)<($323>>>0);
      if ($324) {
       $325 = (($$4$lcssa$i) + ($225)|0);
       $326 = ($325>>>0)>($$4$lcssa$i>>>0);
       if (!($326)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $327 = ((($$4$lcssa$i)) + 24|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($$4$lcssa$i)) + 12|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = ($330|0)==($$4$lcssa$i|0);
       do {
        if ($331) {
         $336 = ((($$4$lcssa$i)) + 20|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = ($337|0)==(0|0);
         if ($338) {
          $339 = ((($$4$lcssa$i)) + 16|0);
          $340 = HEAP32[$339>>2]|0;
          $341 = ($340|0)==(0|0);
          if ($341) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $340;$$1351$i = $339;
          }
         } else {
          $$1347$i = $337;$$1351$i = $336;
         }
         while(1) {
          $342 = ((($$1347$i)) + 20|0);
          $343 = HEAP32[$342>>2]|0;
          $344 = ($343|0)==(0|0);
          if (!($344)) {
           $$1347$i = $343;$$1351$i = $342;
           continue;
          }
          $345 = ((($$1347$i)) + 16|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($346|0)==(0|0);
          if ($347) {
           break;
          } else {
           $$1347$i = $346;$$1351$i = $345;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $332 = ((($$4$lcssa$i)) + 8|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ((($333)) + 12|0);
         HEAP32[$334>>2] = $330;
         $335 = ((($330)) + 8|0);
         HEAP32[$335>>2] = $333;
         $$3349$i = $330;
        }
       } while(0);
       $348 = ($328|0)==(0|0);
       do {
        if ($348) {
         $431 = $226;
        } else {
         $349 = ((($$4$lcssa$i)) + 28|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = (26836 + ($350<<2)|0);
         $352 = HEAP32[$351>>2]|0;
         $353 = ($$4$lcssa$i|0)==($352|0);
         if ($353) {
          HEAP32[$351>>2] = $$3349$i;
          $cond$i206 = ($$3349$i|0)==(0|0);
          if ($cond$i206) {
           $354 = 1 << $350;
           $355 = $354 ^ -1;
           $356 = $226 & $355;
           HEAP32[(26536)>>2] = $356;
           $431 = $356;
           break;
          }
         } else {
          $357 = ((($328)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)!=($$4$lcssa$i|0);
          $$sink3$i = $359&1;
          $360 = (((($328)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$360>>2] = $$3349$i;
          $361 = ($$3349$i|0)==(0|0);
          if ($361) {
           $431 = $226;
           break;
          }
         }
         $362 = ((($$3349$i)) + 24|0);
         HEAP32[$362>>2] = $328;
         $363 = ((($$4$lcssa$i)) + 16|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if (!($365)) {
          $366 = ((($$3349$i)) + 16|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
         }
         $368 = ((($$4$lcssa$i)) + 20|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = ($369|0)==(0|0);
         if ($370) {
          $431 = $226;
         } else {
          $371 = ((($$3349$i)) + 20|0);
          HEAP32[$371>>2] = $369;
          $372 = ((($369)) + 24|0);
          HEAP32[$372>>2] = $$3349$i;
          $431 = $226;
         }
        }
       } while(0);
       $373 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($373) {
         $374 = (($$4329$lcssa$i) + ($225))|0;
         $375 = $374 | 3;
         $376 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$376>>2] = $375;
         $377 = (($$4$lcssa$i) + ($374)|0);
         $378 = ((($377)) + 4|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = $379 | 1;
         HEAP32[$378>>2] = $380;
        } else {
         $381 = $225 | 3;
         $382 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$382>>2] = $381;
         $383 = $$4329$lcssa$i | 1;
         $384 = ((($325)) + 4|0);
         HEAP32[$384>>2] = $383;
         $385 = (($325) + ($$4329$lcssa$i)|0);
         HEAP32[$385>>2] = $$4329$lcssa$i;
         $386 = $$4329$lcssa$i >>> 3;
         $387 = ($$4329$lcssa$i>>>0)<(256);
         if ($387) {
          $388 = $386 << 1;
          $389 = (26572 + ($388<<2)|0);
          $390 = HEAP32[6633]|0;
          $391 = 1 << $386;
          $392 = $390 & $391;
          $393 = ($392|0)==(0);
          if ($393) {
           $394 = $390 | $391;
           HEAP32[6633] = $394;
           $$pre$i207 = ((($389)) + 8|0);
           $$0345$i = $389;$$pre$phi$i208Z2D = $$pre$i207;
          } else {
           $395 = ((($389)) + 8|0);
           $396 = HEAP32[$395>>2]|0;
           $$0345$i = $396;$$pre$phi$i208Z2D = $395;
          }
          HEAP32[$$pre$phi$i208Z2D>>2] = $325;
          $397 = ((($$0345$i)) + 12|0);
          HEAP32[$397>>2] = $325;
          $398 = ((($325)) + 8|0);
          HEAP32[$398>>2] = $$0345$i;
          $399 = ((($325)) + 12|0);
          HEAP32[$399>>2] = $389;
          break;
         }
         $400 = $$4329$lcssa$i >>> 8;
         $401 = ($400|0)==(0);
         if ($401) {
          $$0339$i = 0;
         } else {
          $402 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($402) {
           $$0339$i = 31;
          } else {
           $403 = (($400) + 1048320)|0;
           $404 = $403 >>> 16;
           $405 = $404 & 8;
           $406 = $400 << $405;
           $407 = (($406) + 520192)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 4;
           $410 = $409 | $405;
           $411 = $406 << $409;
           $412 = (($411) + 245760)|0;
           $413 = $412 >>> 16;
           $414 = $413 & 2;
           $415 = $410 | $414;
           $416 = (14 - ($415))|0;
           $417 = $411 << $414;
           $418 = $417 >>> 15;
           $419 = (($416) + ($418))|0;
           $420 = $419 << 1;
           $421 = (($419) + 7)|0;
           $422 = $$4329$lcssa$i >>> $421;
           $423 = $422 & 1;
           $424 = $423 | $420;
           $$0339$i = $424;
          }
         }
         $425 = (26836 + ($$0339$i<<2)|0);
         $426 = ((($325)) + 28|0);
         HEAP32[$426>>2] = $$0339$i;
         $427 = ((($325)) + 16|0);
         $428 = ((($427)) + 4|0);
         HEAP32[$428>>2] = 0;
         HEAP32[$427>>2] = 0;
         $429 = 1 << $$0339$i;
         $430 = $431 & $429;
         $432 = ($430|0)==(0);
         if ($432) {
          $433 = $431 | $429;
          HEAP32[(26536)>>2] = $433;
          HEAP32[$425>>2] = $325;
          $434 = ((($325)) + 24|0);
          HEAP32[$434>>2] = $425;
          $435 = ((($325)) + 12|0);
          HEAP32[$435>>2] = $325;
          $436 = ((($325)) + 8|0);
          HEAP32[$436>>2] = $325;
          break;
         }
         $437 = HEAP32[$425>>2]|0;
         $438 = ($$0339$i|0)==(31);
         $439 = $$0339$i >>> 1;
         $440 = (25 - ($439))|0;
         $441 = $438 ? 0 : $440;
         $442 = $$4329$lcssa$i << $441;
         $$0322$i = $442;$$0323$i = $437;
         while(1) {
          $443 = ((($$0323$i)) + 4|0);
          $444 = HEAP32[$443>>2]|0;
          $445 = $444 & -8;
          $446 = ($445|0)==($$4329$lcssa$i|0);
          if ($446) {
           label = 97;
           break;
          }
          $447 = $$0322$i >>> 31;
          $448 = (((($$0323$i)) + 16|0) + ($447<<2)|0);
          $449 = $$0322$i << 1;
          $450 = HEAP32[$448>>2]|0;
          $451 = ($450|0)==(0|0);
          if ($451) {
           label = 96;
           break;
          } else {
           $$0322$i = $449;$$0323$i = $450;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$448>>2] = $325;
          $452 = ((($325)) + 24|0);
          HEAP32[$452>>2] = $$0323$i;
          $453 = ((($325)) + 12|0);
          HEAP32[$453>>2] = $325;
          $454 = ((($325)) + 8|0);
          HEAP32[$454>>2] = $325;
          break;
         }
         else if ((label|0) == 97) {
          $455 = ((($$0323$i)) + 8|0);
          $456 = HEAP32[$455>>2]|0;
          $457 = ((($456)) + 12|0);
          HEAP32[$457>>2] = $325;
          HEAP32[$455>>2] = $325;
          $458 = ((($325)) + 8|0);
          HEAP32[$458>>2] = $456;
          $459 = ((($325)) + 12|0);
          HEAP32[$459>>2] = $$0323$i;
          $460 = ((($325)) + 24|0);
          HEAP32[$460>>2] = 0;
          break;
         }
        }
       } while(0);
       $461 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $461;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $225;
      }
     }
    }
   }
  }
 } while(0);
 $462 = HEAP32[(26540)>>2]|0;
 $463 = ($462>>>0)<($$0192>>>0);
 if (!($463)) {
  $464 = (($462) - ($$0192))|0;
  $465 = HEAP32[(26552)>>2]|0;
  $466 = ($464>>>0)>(15);
  if ($466) {
   $467 = (($465) + ($$0192)|0);
   HEAP32[(26552)>>2] = $467;
   HEAP32[(26540)>>2] = $464;
   $468 = $464 | 1;
   $469 = ((($467)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($465) + ($462)|0);
   HEAP32[$470>>2] = $464;
   $471 = $$0192 | 3;
   $472 = ((($465)) + 4|0);
   HEAP32[$472>>2] = $471;
  } else {
   HEAP32[(26540)>>2] = 0;
   HEAP32[(26552)>>2] = 0;
   $473 = $462 | 3;
   $474 = ((($465)) + 4|0);
   HEAP32[$474>>2] = $473;
   $475 = (($465) + ($462)|0);
   $476 = ((($475)) + 4|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 | 1;
   HEAP32[$476>>2] = $478;
  }
  $479 = ((($465)) + 8|0);
  $$0 = $479;
  STACKTOP = sp;return ($$0|0);
 }
 $480 = HEAP32[(26544)>>2]|0;
 $481 = ($480>>>0)>($$0192>>>0);
 if ($481) {
  $482 = (($480) - ($$0192))|0;
  HEAP32[(26544)>>2] = $482;
  $483 = HEAP32[(26556)>>2]|0;
  $484 = (($483) + ($$0192)|0);
  HEAP32[(26556)>>2] = $484;
  $485 = $482 | 1;
  $486 = ((($484)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = $$0192 | 3;
  $488 = ((($483)) + 4|0);
  HEAP32[$488>>2] = $487;
  $489 = ((($483)) + 8|0);
  $$0 = $489;
  STACKTOP = sp;return ($$0|0);
 }
 $490 = HEAP32[6751]|0;
 $491 = ($490|0)==(0);
 if ($491) {
  HEAP32[(27012)>>2] = 4096;
  HEAP32[(27008)>>2] = 4096;
  HEAP32[(27016)>>2] = -1;
  HEAP32[(27020)>>2] = -1;
  HEAP32[(27024)>>2] = 0;
  HEAP32[(26976)>>2] = 0;
  $492 = $1;
  $493 = $492 & -16;
  $494 = $493 ^ 1431655768;
  HEAP32[6751] = $494;
  $498 = 4096;
 } else {
  $$pre$i195 = HEAP32[(27012)>>2]|0;
  $498 = $$pre$i195;
 }
 $495 = (($$0192) + 48)|0;
 $496 = (($$0192) + 47)|0;
 $497 = (($498) + ($496))|0;
 $499 = (0 - ($498))|0;
 $500 = $497 & $499;
 $501 = ($500>>>0)>($$0192>>>0);
 if (!($501)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $502 = HEAP32[(26972)>>2]|0;
 $503 = ($502|0)==(0);
 if (!($503)) {
  $504 = HEAP32[(26964)>>2]|0;
  $505 = (($504) + ($500))|0;
  $506 = ($505>>>0)<=($504>>>0);
  $507 = ($505>>>0)>($502>>>0);
  $or$cond1$i = $506 | $507;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $508 = HEAP32[(26976)>>2]|0;
 $509 = $508 & 4;
 $510 = ($509|0)==(0);
 L167: do {
  if ($510) {
   $511 = HEAP32[(26556)>>2]|0;
   $512 = ($511|0)==(0|0);
   L169: do {
    if ($512) {
     label = 118;
    } else {
     $$0$i20$i = (26980);
     while(1) {
      $513 = HEAP32[$$0$i20$i>>2]|0;
      $514 = ($513>>>0)>($511>>>0);
      if (!($514)) {
       $515 = ((($$0$i20$i)) + 4|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = (($513) + ($516)|0);
       $518 = ($517>>>0)>($511>>>0);
       if ($518) {
        break;
       }
      }
      $519 = ((($$0$i20$i)) + 8|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = ($520|0)==(0|0);
      if ($521) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $520;
      }
     }
     $544 = (($497) - ($480))|0;
     $545 = $544 & $499;
     $546 = ($545>>>0)<(2147483647);
     if ($546) {
      $547 = (_sbrk(($545|0))|0);
      $548 = HEAP32[$$0$i20$i>>2]|0;
      $549 = HEAP32[$515>>2]|0;
      $550 = (($548) + ($549)|0);
      $551 = ($547|0)==($550|0);
      if ($551) {
       $552 = ($547|0)==((-1)|0);
       if ($552) {
        $$2234243136$i = $545;
       } else {
        $$723947$i = $545;$$748$i = $547;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $547;$$2253$ph$i = $545;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $522 = (_sbrk(0)|0);
     $523 = ($522|0)==((-1)|0);
     if ($523) {
      $$2234243136$i = 0;
     } else {
      $524 = $522;
      $525 = HEAP32[(27008)>>2]|0;
      $526 = (($525) + -1)|0;
      $527 = $526 & $524;
      $528 = ($527|0)==(0);
      $529 = (($526) + ($524))|0;
      $530 = (0 - ($525))|0;
      $531 = $529 & $530;
      $532 = (($531) - ($524))|0;
      $533 = $528 ? 0 : $532;
      $$$i = (($533) + ($500))|0;
      $534 = HEAP32[(26964)>>2]|0;
      $535 = (($$$i) + ($534))|0;
      $536 = ($$$i>>>0)>($$0192>>>0);
      $537 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $536 & $537;
      if ($or$cond$i) {
       $538 = HEAP32[(26972)>>2]|0;
       $539 = ($538|0)==(0);
       if (!($539)) {
        $540 = ($535>>>0)<=($534>>>0);
        $541 = ($535>>>0)>($538>>>0);
        $or$cond2$i = $540 | $541;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $542 = (_sbrk(($$$i|0))|0);
       $543 = ($542|0)==($522|0);
       if ($543) {
        $$723947$i = $$$i;$$748$i = $522;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $542;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $553 = (0 - ($$2253$ph$i))|0;
     $554 = ($$2247$ph$i|0)!=((-1)|0);
     $555 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $555 & $554;
     $556 = ($495>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $556 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $566 = ($$2247$ph$i|0)==((-1)|0);
      if ($566) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $557 = HEAP32[(27012)>>2]|0;
     $558 = (($496) - ($$2253$ph$i))|0;
     $559 = (($558) + ($557))|0;
     $560 = (0 - ($557))|0;
     $561 = $559 & $560;
     $562 = ($561>>>0)<(2147483647);
     if (!($562)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $563 = (_sbrk(($561|0))|0);
     $564 = ($563|0)==((-1)|0);
     if ($564) {
      (_sbrk(($553|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $565 = (($561) + ($$2253$ph$i))|0;
      $$723947$i = $565;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $567 = HEAP32[(26976)>>2]|0;
   $568 = $567 | 4;
   HEAP32[(26976)>>2] = $568;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $569 = ($500>>>0)<(2147483647);
  if ($569) {
   $570 = (_sbrk(($500|0))|0);
   $571 = (_sbrk(0)|0);
   $572 = ($570|0)!=((-1)|0);
   $573 = ($571|0)!=((-1)|0);
   $or$cond5$i = $572 & $573;
   $574 = ($570>>>0)<($571>>>0);
   $or$cond11$i = $574 & $or$cond5$i;
   $575 = $571;
   $576 = $570;
   $577 = (($575) - ($576))|0;
   $578 = (($$0192) + 40)|0;
   $579 = ($577>>>0)>($578>>>0);
   $$$4236$i = $579 ? $577 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $580 = ($570|0)==((-1)|0);
   $not$$i = $579 ^ 1;
   $581 = $580 | $not$$i;
   $or$cond49$i = $581 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $570;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $582 = HEAP32[(26964)>>2]|0;
  $583 = (($582) + ($$723947$i))|0;
  HEAP32[(26964)>>2] = $583;
  $584 = HEAP32[(26968)>>2]|0;
  $585 = ($583>>>0)>($584>>>0);
  if ($585) {
   HEAP32[(26968)>>2] = $583;
  }
  $586 = HEAP32[(26556)>>2]|0;
  $587 = ($586|0)==(0|0);
  do {
   if ($587) {
    $588 = HEAP32[(26548)>>2]|0;
    $589 = ($588|0)==(0|0);
    $590 = ($$748$i>>>0)<($588>>>0);
    $or$cond12$i = $589 | $590;
    if ($or$cond12$i) {
     HEAP32[(26548)>>2] = $$748$i;
    }
    HEAP32[(26980)>>2] = $$748$i;
    HEAP32[(26984)>>2] = $$723947$i;
    HEAP32[(26992)>>2] = 0;
    $591 = HEAP32[6751]|0;
    HEAP32[(26568)>>2] = $591;
    HEAP32[(26564)>>2] = -1;
    HEAP32[(26584)>>2] = (26572);
    HEAP32[(26580)>>2] = (26572);
    HEAP32[(26592)>>2] = (26580);
    HEAP32[(26588)>>2] = (26580);
    HEAP32[(26600)>>2] = (26588);
    HEAP32[(26596)>>2] = (26588);
    HEAP32[(26608)>>2] = (26596);
    HEAP32[(26604)>>2] = (26596);
    HEAP32[(26616)>>2] = (26604);
    HEAP32[(26612)>>2] = (26604);
    HEAP32[(26624)>>2] = (26612);
    HEAP32[(26620)>>2] = (26612);
    HEAP32[(26632)>>2] = (26620);
    HEAP32[(26628)>>2] = (26620);
    HEAP32[(26640)>>2] = (26628);
    HEAP32[(26636)>>2] = (26628);
    HEAP32[(26648)>>2] = (26636);
    HEAP32[(26644)>>2] = (26636);
    HEAP32[(26656)>>2] = (26644);
    HEAP32[(26652)>>2] = (26644);
    HEAP32[(26664)>>2] = (26652);
    HEAP32[(26660)>>2] = (26652);
    HEAP32[(26672)>>2] = (26660);
    HEAP32[(26668)>>2] = (26660);
    HEAP32[(26680)>>2] = (26668);
    HEAP32[(26676)>>2] = (26668);
    HEAP32[(26688)>>2] = (26676);
    HEAP32[(26684)>>2] = (26676);
    HEAP32[(26696)>>2] = (26684);
    HEAP32[(26692)>>2] = (26684);
    HEAP32[(26704)>>2] = (26692);
    HEAP32[(26700)>>2] = (26692);
    HEAP32[(26712)>>2] = (26700);
    HEAP32[(26708)>>2] = (26700);
    HEAP32[(26720)>>2] = (26708);
    HEAP32[(26716)>>2] = (26708);
    HEAP32[(26728)>>2] = (26716);
    HEAP32[(26724)>>2] = (26716);
    HEAP32[(26736)>>2] = (26724);
    HEAP32[(26732)>>2] = (26724);
    HEAP32[(26744)>>2] = (26732);
    HEAP32[(26740)>>2] = (26732);
    HEAP32[(26752)>>2] = (26740);
    HEAP32[(26748)>>2] = (26740);
    HEAP32[(26760)>>2] = (26748);
    HEAP32[(26756)>>2] = (26748);
    HEAP32[(26768)>>2] = (26756);
    HEAP32[(26764)>>2] = (26756);
    HEAP32[(26776)>>2] = (26764);
    HEAP32[(26772)>>2] = (26764);
    HEAP32[(26784)>>2] = (26772);
    HEAP32[(26780)>>2] = (26772);
    HEAP32[(26792)>>2] = (26780);
    HEAP32[(26788)>>2] = (26780);
    HEAP32[(26800)>>2] = (26788);
    HEAP32[(26796)>>2] = (26788);
    HEAP32[(26808)>>2] = (26796);
    HEAP32[(26804)>>2] = (26796);
    HEAP32[(26816)>>2] = (26804);
    HEAP32[(26812)>>2] = (26804);
    HEAP32[(26824)>>2] = (26812);
    HEAP32[(26820)>>2] = (26812);
    HEAP32[(26832)>>2] = (26820);
    HEAP32[(26828)>>2] = (26820);
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(26556)>>2] = $600;
    HEAP32[(26544)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($$748$i) + ($592)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(27020)>>2]|0;
    HEAP32[(26560)>>2] = $606;
   } else {
    $$024367$i = (26980);
    while(1) {
     $607 = HEAP32[$$024367$i>>2]|0;
     $608 = ((($$024367$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 143;
      break;
     }
     $612 = ((($$024367$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024367$i = $613;
     }
    }
    if ((label|0) == 143) {
     $615 = ((($$024367$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($607>>>0)<=($586>>>0);
      $620 = ($$748$i>>>0)>($586>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(26544)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($586)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($586) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(26556)>>2] = $631;
       HEAP32[(26544)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($586) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(27020)>>2]|0;
       HEAP32[(26560)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(26548)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(26548)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124466$i = (26980);
    while(1) {
     $641 = HEAP32[$$124466$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 151;
      break;
     }
     $643 = ((($$124466$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      $$0$i$i$i = (26980);
      break;
     } else {
      $$124466$i = $644;
     }
    }
    if ((label|0) == 151) {
     $646 = ((($$124466$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124466$i>>2] = $$748$i;
      $650 = ((($$124466$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($586|0)==($668|0);
      do {
       if ($676) {
        $677 = HEAP32[(26544)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(26544)>>2] = $678;
        HEAP32[(26556)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(26552)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(26540)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(26540)>>2] = $684;
         HEAP32[(26552)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L234: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[6633]|0;
            $703 = $702 & $701;
            HEAP32[6633] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (26836 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(26536)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(26536)>>2] = $736;
             break L234;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)!=($668|0);
             $$sink1$i$i = $739&1;
             $740 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$740>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L234;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0260$i$i = $754;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0260$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0260$i$i)|0);
        HEAP32[$760>>2] = $$0260$i$i;
        $761 = $$0260$i$i >>> 3;
        $762 = ($$0260$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (26572 + ($763<<2)|0);
         $765 = HEAP32[6633]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[6633] = $769;
          $$pre$i17$i = ((($764)) + 8|0);
          $$0268$i$i = $764;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0268$i$i = $771;$$pre$phi$i18$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $772 = ((($$0268$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0268$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0260$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0269$i$i = 0;
         } else {
          $777 = ($$0260$i$i>>>0)>(16777215);
          if ($777) {
           $$0269$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0260$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0269$i$i = $799;
         }
        } while(0);
        $800 = (26836 + ($$0269$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0269$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(26536)>>2]|0;
        $805 = 1 << $$0269$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(26536)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ($$0269$i$i|0)==(31);
        $814 = $$0269$i$i >>> 1;
        $815 = (25 - ($814))|0;
        $816 = $813 ? 0 : $815;
        $817 = $$0260$i$i << $816;
        $$0261$i$i = $817;$$0262$i$i = $812;
        while(1) {
         $818 = ((($$0262$i$i)) + 4|0);
         $819 = HEAP32[$818>>2]|0;
         $820 = $819 & -8;
         $821 = ($820|0)==($$0260$i$i|0);
         if ($821) {
          label = 192;
          break;
         }
         $822 = $$0261$i$i >>> 31;
         $823 = (((($$0262$i$i)) + 16|0) + ($822<<2)|0);
         $824 = $$0261$i$i << 1;
         $825 = HEAP32[$823>>2]|0;
         $826 = ($825|0)==(0|0);
         if ($826) {
          label = 191;
          break;
         } else {
          $$0261$i$i = $824;$$0262$i$i = $825;
         }
        }
        if ((label|0) == 191) {
         HEAP32[$823>>2] = $672;
         $827 = ((($672)) + 24|0);
         HEAP32[$827>>2] = $$0262$i$i;
         $828 = ((($672)) + 12|0);
         HEAP32[$828>>2] = $672;
         $829 = ((($672)) + 8|0);
         HEAP32[$829>>2] = $672;
         break;
        }
        else if ((label|0) == 192) {
         $830 = ((($$0262$i$i)) + 8|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = ((($831)) + 12|0);
         HEAP32[$832>>2] = $672;
         HEAP32[$830>>2] = $672;
         $833 = ((($672)) + 8|0);
         HEAP32[$833>>2] = $831;
         $834 = ((($672)) + 12|0);
         HEAP32[$834>>2] = $$0262$i$i;
         $835 = ((($672)) + 24|0);
         HEAP32[$835>>2] = 0;
         break;
        }
       }
      } while(0);
      $960 = ((($660)) + 8|0);
      $$0 = $960;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (26980);
     }
    }
    while(1) {
     $836 = HEAP32[$$0$i$i$i>>2]|0;
     $837 = ($836>>>0)>($586>>>0);
     if (!($837)) {
      $838 = ((($$0$i$i$i)) + 4|0);
      $839 = HEAP32[$838>>2]|0;
      $840 = (($836) + ($839)|0);
      $841 = ($840>>>0)>($586>>>0);
      if ($841) {
       break;
      }
     }
     $842 = ((($$0$i$i$i)) + 8|0);
     $843 = HEAP32[$842>>2]|0;
     $$0$i$i$i = $843;
    }
    $844 = ((($840)) + -47|0);
    $845 = ((($844)) + 8|0);
    $846 = $845;
    $847 = $846 & 7;
    $848 = ($847|0)==(0);
    $849 = (0 - ($846))|0;
    $850 = $849 & 7;
    $851 = $848 ? 0 : $850;
    $852 = (($844) + ($851)|0);
    $853 = ((($586)) + 16|0);
    $854 = ($852>>>0)<($853>>>0);
    $855 = $854 ? $586 : $852;
    $856 = ((($855)) + 8|0);
    $857 = ((($855)) + 24|0);
    $858 = (($$723947$i) + -40)|0;
    $859 = ((($$748$i)) + 8|0);
    $860 = $859;
    $861 = $860 & 7;
    $862 = ($861|0)==(0);
    $863 = (0 - ($860))|0;
    $864 = $863 & 7;
    $865 = $862 ? 0 : $864;
    $866 = (($$748$i) + ($865)|0);
    $867 = (($858) - ($865))|0;
    HEAP32[(26556)>>2] = $866;
    HEAP32[(26544)>>2] = $867;
    $868 = $867 | 1;
    $869 = ((($866)) + 4|0);
    HEAP32[$869>>2] = $868;
    $870 = (($$748$i) + ($858)|0);
    $871 = ((($870)) + 4|0);
    HEAP32[$871>>2] = 40;
    $872 = HEAP32[(27020)>>2]|0;
    HEAP32[(26560)>>2] = $872;
    $873 = ((($855)) + 4|0);
    HEAP32[$873>>2] = 27;
    ;HEAP32[$856>>2]=HEAP32[(26980)>>2]|0;HEAP32[$856+4>>2]=HEAP32[(26980)+4>>2]|0;HEAP32[$856+8>>2]=HEAP32[(26980)+8>>2]|0;HEAP32[$856+12>>2]=HEAP32[(26980)+12>>2]|0;
    HEAP32[(26980)>>2] = $$748$i;
    HEAP32[(26984)>>2] = $$723947$i;
    HEAP32[(26992)>>2] = 0;
    HEAP32[(26988)>>2] = $856;
    $875 = $857;
    while(1) {
     $874 = ((($875)) + 4|0);
     HEAP32[$874>>2] = 7;
     $876 = ((($875)) + 8|0);
     $877 = ($876>>>0)<($840>>>0);
     if ($877) {
      $875 = $874;
     } else {
      break;
     }
    }
    $878 = ($855|0)==($586|0);
    if (!($878)) {
     $879 = $855;
     $880 = $586;
     $881 = (($879) - ($880))|0;
     $882 = HEAP32[$873>>2]|0;
     $883 = $882 & -2;
     HEAP32[$873>>2] = $883;
     $884 = $881 | 1;
     $885 = ((($586)) + 4|0);
     HEAP32[$885>>2] = $884;
     HEAP32[$855>>2] = $881;
     $886 = $881 >>> 3;
     $887 = ($881>>>0)<(256);
     if ($887) {
      $888 = $886 << 1;
      $889 = (26572 + ($888<<2)|0);
      $890 = HEAP32[6633]|0;
      $891 = 1 << $886;
      $892 = $890 & $891;
      $893 = ($892|0)==(0);
      if ($893) {
       $894 = $890 | $891;
       HEAP32[6633] = $894;
       $$pre$i$i = ((($889)) + 8|0);
       $$0206$i$i = $889;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $895 = ((($889)) + 8|0);
       $896 = HEAP32[$895>>2]|0;
       $$0206$i$i = $896;$$pre$phi$i$iZ2D = $895;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $586;
      $897 = ((($$0206$i$i)) + 12|0);
      HEAP32[$897>>2] = $586;
      $898 = ((($586)) + 8|0);
      HEAP32[$898>>2] = $$0206$i$i;
      $899 = ((($586)) + 12|0);
      HEAP32[$899>>2] = $889;
      break;
     }
     $900 = $881 >>> 8;
     $901 = ($900|0)==(0);
     if ($901) {
      $$0207$i$i = 0;
     } else {
      $902 = ($881>>>0)>(16777215);
      if ($902) {
       $$0207$i$i = 31;
      } else {
       $903 = (($900) + 1048320)|0;
       $904 = $903 >>> 16;
       $905 = $904 & 8;
       $906 = $900 << $905;
       $907 = (($906) + 520192)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 4;
       $910 = $909 | $905;
       $911 = $906 << $909;
       $912 = (($911) + 245760)|0;
       $913 = $912 >>> 16;
       $914 = $913 & 2;
       $915 = $910 | $914;
       $916 = (14 - ($915))|0;
       $917 = $911 << $914;
       $918 = $917 >>> 15;
       $919 = (($916) + ($918))|0;
       $920 = $919 << 1;
       $921 = (($919) + 7)|0;
       $922 = $881 >>> $921;
       $923 = $922 & 1;
       $924 = $923 | $920;
       $$0207$i$i = $924;
      }
     }
     $925 = (26836 + ($$0207$i$i<<2)|0);
     $926 = ((($586)) + 28|0);
     HEAP32[$926>>2] = $$0207$i$i;
     $927 = ((($586)) + 20|0);
     HEAP32[$927>>2] = 0;
     HEAP32[$853>>2] = 0;
     $928 = HEAP32[(26536)>>2]|0;
     $929 = 1 << $$0207$i$i;
     $930 = $928 & $929;
     $931 = ($930|0)==(0);
     if ($931) {
      $932 = $928 | $929;
      HEAP32[(26536)>>2] = $932;
      HEAP32[$925>>2] = $586;
      $933 = ((($586)) + 24|0);
      HEAP32[$933>>2] = $925;
      $934 = ((($586)) + 12|0);
      HEAP32[$934>>2] = $586;
      $935 = ((($586)) + 8|0);
      HEAP32[$935>>2] = $586;
      break;
     }
     $936 = HEAP32[$925>>2]|0;
     $937 = ($$0207$i$i|0)==(31);
     $938 = $$0207$i$i >>> 1;
     $939 = (25 - ($938))|0;
     $940 = $937 ? 0 : $939;
     $941 = $881 << $940;
     $$0201$i$i = $941;$$0202$i$i = $936;
     while(1) {
      $942 = ((($$0202$i$i)) + 4|0);
      $943 = HEAP32[$942>>2]|0;
      $944 = $943 & -8;
      $945 = ($944|0)==($881|0);
      if ($945) {
       label = 213;
       break;
      }
      $946 = $$0201$i$i >>> 31;
      $947 = (((($$0202$i$i)) + 16|0) + ($946<<2)|0);
      $948 = $$0201$i$i << 1;
      $949 = HEAP32[$947>>2]|0;
      $950 = ($949|0)==(0|0);
      if ($950) {
       label = 212;
       break;
      } else {
       $$0201$i$i = $948;$$0202$i$i = $949;
      }
     }
     if ((label|0) == 212) {
      HEAP32[$947>>2] = $586;
      $951 = ((($586)) + 24|0);
      HEAP32[$951>>2] = $$0202$i$i;
      $952 = ((($586)) + 12|0);
      HEAP32[$952>>2] = $586;
      $953 = ((($586)) + 8|0);
      HEAP32[$953>>2] = $586;
      break;
     }
     else if ((label|0) == 213) {
      $954 = ((($$0202$i$i)) + 8|0);
      $955 = HEAP32[$954>>2]|0;
      $956 = ((($955)) + 12|0);
      HEAP32[$956>>2] = $586;
      HEAP32[$954>>2] = $586;
      $957 = ((($586)) + 8|0);
      HEAP32[$957>>2] = $955;
      $958 = ((($586)) + 12|0);
      HEAP32[$958>>2] = $$0202$i$i;
      $959 = ((($586)) + 24|0);
      HEAP32[$959>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $961 = HEAP32[(26544)>>2]|0;
  $962 = ($961>>>0)>($$0192>>>0);
  if ($962) {
   $963 = (($961) - ($$0192))|0;
   HEAP32[(26544)>>2] = $963;
   $964 = HEAP32[(26556)>>2]|0;
   $965 = (($964) + ($$0192)|0);
   HEAP32[(26556)>>2] = $965;
   $966 = $963 | 1;
   $967 = ((($965)) + 4|0);
   HEAP32[$967>>2] = $966;
   $968 = $$0192 | 3;
   $969 = ((($964)) + 4|0);
   HEAP32[$969>>2] = $968;
   $970 = ((($964)) + 8|0);
   $$0 = $970;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $971 = (___errno_location()|0);
 HEAP32[$971>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond373 = 0;
 var $cond374 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(26548)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(26552)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1347 = $15;$88 = $14;
     break;
    }
    HEAP32[(26540)>>2] = $15;
    $83 = $80 & -2;
    HEAP32[$79>>2] = $83;
    $84 = $15 | 1;
    $85 = ((($14)) + 4|0);
    HEAP32[$85>>2] = $84;
    $86 = (($14) + ($15)|0);
    HEAP32[$86>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[6633]|0;
     $29 = $28 & $27;
     HEAP32[6633] = $29;
     $$1 = $14;$$1347 = $15;$88 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$88 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$88 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (26836 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond373 = ($$3|0)==(0|0);
     if ($cond373) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(26536)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(26536)>>2] = $62;
      $$1 = $14;$$1347 = $15;$88 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)!=($14|0);
     $$sink3 = $65&1;
     $66 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$66>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1347 = $15;$88 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1347 = $15;$88 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1347 = $15;$88 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$88 = $2;
  }
 } while(0);
 $87 = ($88>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(26556)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(26544)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(26544)>>2] = $98;
   HEAP32[(26556)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(26552)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(26552)>>2] = 0;
   HEAP32[(26540)>>2] = 0;
   return;
  }
  $103 = HEAP32[(26552)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(26540)>>2]|0;
   $106 = (($105) + ($$1347))|0;
   HEAP32[(26540)>>2] = $106;
   HEAP32[(26552)>>2] = $88;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($88) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1347))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[6633]|0;
     $122 = $121 & $120;
     HEAP32[6633] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $138;$$1367 = $134;
       }
      } else {
       $$1363 = $136;$$1367 = $135;
      }
      while(1) {
       $140 = ((($$1363)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if (!($142)) {
        $$1363 = $141;$$1367 = $140;
        continue;
       }
       $143 = ((($$1363)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)==(0|0);
       if ($145) {
        break;
       } else {
        $$1363 = $144;$$1367 = $143;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3365 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (26836 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3365;
      $cond374 = ($$3365|0)==(0|0);
      if ($cond374) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(26536)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(26536)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)!=($7|0);
      $$sink5 = $158&1;
      $159 = (((($126)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$159>>2] = $$3365;
      $160 = ($$3365|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3365)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3365)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3365;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3365)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3365;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($88) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(26552)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(26540)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1347 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($88) + ($$1347)|0);
  HEAP32[$180>>2] = $$1347;
  $$2 = $$1347;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (26572 + ($183<<2)|0);
  $185 = HEAP32[6633]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[6633] = $189;
   $$pre = ((($184)) + 8|0);
   $$0368 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0368 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0368)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0368;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0361 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0361 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0361 = $219;
  }
 }
 $220 = (26836 + ($$0361<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0361;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(26536)>>2]|0;
 $225 = 1 << $$0361;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(26536)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ($$0361|0)==(31);
   $234 = $$0361 >>> 1;
   $235 = (25 - ($234))|0;
   $236 = $233 ? 0 : $235;
   $237 = $$2 << $236;
   $$0348 = $237;$$0349 = $232;
   while(1) {
    $238 = ((($$0349)) + 4|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 & -8;
    $241 = ($240|0)==($$2|0);
    if ($241) {
     label = 73;
     break;
    }
    $242 = $$0348 >>> 31;
    $243 = (((($$0349)) + 16|0) + ($242<<2)|0);
    $244 = $$0348 << 1;
    $245 = HEAP32[$243>>2]|0;
    $246 = ($245|0)==(0|0);
    if ($246) {
     label = 72;
     break;
    } else {
     $$0348 = $244;$$0349 = $245;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$243>>2] = $$1;
    $247 = ((($$1)) + 24|0);
    HEAP32[$247>>2] = $$0349;
    $248 = ((($$1)) + 12|0);
    HEAP32[$248>>2] = $$1;
    $249 = ((($$1)) + 8|0);
    HEAP32[$249>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $250 = ((($$0349)) + 8|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ((($251)) + 12|0);
    HEAP32[$252>>2] = $$1;
    HEAP32[$250>>2] = $$1;
    $253 = ((($$1)) + 8|0);
    HEAP32[$253>>2] = $251;
    $254 = ((($$1)) + 12|0);
    HEAP32[$254>>2] = $$0349;
    $255 = ((($$1)) + 24|0);
    HEAP32[$255>>2] = 0;
    break;
   }
  }
 } while(0);
 $256 = HEAP32[(26564)>>2]|0;
 $257 = (($256) + -1)|0;
 HEAP32[(26564)>>2] = $257;
 $258 = ($257|0)==(0);
 if ($258) {
  $$0195$in$i = (26988);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $259 = ($$0195$i|0)==(0|0);
  $260 = ((($$0195$i)) + 8|0);
  if ($259) {
   break;
  } else {
   $$0195$in$i = $260;
  }
 }
 HEAP32[(26564)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(27012)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(26556)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(26544)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(26556)>>2] = $33;
  HEAP32[(26544)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(26552)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(26540)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(26540)>>2] = $storemerge1;
  HEAP32[(26552)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[6633]|0;
    $81 = $80 & $79;
    HEAP32[6633] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (26836 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(26536)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(26536)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)!=($5|0);
     $$sink1 = $117&1;
     $118 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$118>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $68 | $132;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(26552)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    HEAP32[(26540)>>2] = $12;
    $79 = $76 & -2;
    HEAP32[$75>>2] = $79;
    $80 = $12 | 1;
    $81 = ((($11)) + 4|0);
    HEAP32[$81>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[6633]|0;
     $25 = $24 & $23;
     HEAP32[6633] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (26836 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(26536)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(26536)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)!=($11|0);
     $$sink2 = $61&1;
     $62 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$62>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1365 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(26556)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(26544)>>2]|0;
   $89 = (($88) + ($$1365))|0;
   HEAP32[(26544)>>2] = $89;
   HEAP32[(26556)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(26552)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(26552)>>2] = 0;
   HEAP32[(26540)>>2] = 0;
   return;
  }
  $94 = HEAP32[(26552)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(26540)>>2]|0;
   $97 = (($96) + ($$1365))|0;
   HEAP32[(26540)>>2] = $97;
   HEAP32[(26552)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1365))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[6633]|0;
     $113 = $112 & $111;
     HEAP32[6633] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $129;$$1384 = $125;
       }
      } else {
       $$1380 = $127;$$1384 = $126;
      }
      while(1) {
       $131 = ((($$1380)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if (!($133)) {
        $$1380 = $132;$$1384 = $131;
        continue;
       }
       $134 = ((($$1380)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($135|0)==(0|0);
       if ($136) {
        break;
       } else {
        $$1380 = $135;$$1384 = $134;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3382 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (26836 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3382;
      $cond3 = ($$3382|0)==(0|0);
      if ($cond3) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(26536)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(26536)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)!=($2|0);
      $$sink4 = $149&1;
      $150 = (((($117)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$150>>2] = $$3382;
      $151 = ($$3382|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3382)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3382)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3382;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3382)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3382;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(26552)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(26540)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1365 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1365)|0);
  HEAP32[$171>>2] = $$1365;
  $$2 = $$1365;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (26572 + ($174<<2)|0);
  $176 = HEAP32[6633]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[6633] = $180;
   $$pre = ((($175)) + 8|0);
   $$0385 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0385 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0385)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0385;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0378 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0378 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0378 = $210;
  }
 }
 $211 = (26836 + ($$0378<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0378;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(26536)>>2]|0;
 $216 = 1 << $$0378;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(26536)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ($$0378|0)==(31);
 $225 = $$0378 >>> 1;
 $226 = (25 - ($225))|0;
 $227 = $224 ? 0 : $226;
 $228 = $$2 << $227;
 $$0366 = $228;$$0367 = $223;
 while(1) {
  $229 = ((($$0367)) + 4|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $230 & -8;
  $232 = ($231|0)==($$2|0);
  if ($232) {
   label = 69;
   break;
  }
  $233 = $$0366 >>> 31;
  $234 = (((($$0367)) + 16|0) + ($233<<2)|0);
  $235 = $$0366 << 1;
  $236 = HEAP32[$234>>2]|0;
  $237 = ($236|0)==(0|0);
  if ($237) {
   label = 68;
   break;
  } else {
   $$0366 = $235;$$0367 = $236;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$234>>2] = $$1;
  $238 = ((($$1)) + 24|0);
  HEAP32[$238>>2] = $$0367;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $$1;
  $240 = ((($$1)) + 8|0);
  HEAP32[$240>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $241 = ((($$0367)) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ((($242)) + 12|0);
  HEAP32[$243>>2] = $$1;
  HEAP32[$241>>2] = $$1;
  $244 = ((($$1)) + 8|0);
  HEAP32[$244>>2] = $242;
  $245 = ((($$1)) + 12|0);
  HEAP32[$245>>2] = $$0367;
  $246 = ((($$1)) + 24|0);
  HEAP32[$246>>2] = 0;
  return;
 }
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_737($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$27 = $17;
   while(1) {
    $26 = ($27|0)<(0);
    if ($26) {
     break;
    }
    $35 = (($$04855) - ($27))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($27>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($27) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$27 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27100|0);
}
function _dummy_737($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 2;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _strtox_767($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 $11 = $4;
 $12 = $6;
 $13 = (($12) + ($1)|0);
 $$sink = $or$cond ? $13 : $11;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0;
 var $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165167 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((17325) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165167 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((17325) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($$166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154222 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154222*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$7>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$6>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $$2161$be = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $$2161$be = $81;
        }
        $82 = (($$2161$be) + -48)|0;
        $83 = ($82>>>0)<(10);
        $84 = ($73>>>0)<(429496729);
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
      } else {
       $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
      }
      $86 = (($$2161$lcssa) + -48)|0;
      $87 = ($86>>>0)<(10);
      if ($87) {
       $$3162215 = $$2161$lcssa;$88 = $291;$89 = $292;$93 = $86;
       while(1) {
        $90 = (___muldi3(($88|0),($89|0),10,0)|0);
        $91 = tempRet0;
        $92 = ($93|0)<(0);
        $94 = $92 << 31 >> 31;
        $95 = $93 ^ -1;
        $96 = $94 ^ -1;
        $97 = ($91>>>0)>($96>>>0);
        $98 = ($90>>>0)>($95>>>0);
        $99 = ($91|0)==($96|0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165168 = 10;$$8 = $$3162215;$293 = $88;$294 = $89;
         label = 72;
         break L43;
        }
        $102 = (_i64Add(($90|0),($91|0),($93|0),($94|0))|0);
        $103 = tempRet0;
        $104 = HEAP32[$6>>2]|0;
        $105 = HEAP32[$7>>2]|0;
        $106 = ($104>>>0)<($105>>>0);
        if ($106) {
         $107 = ((($104)) + 1|0);
         HEAP32[$6>>2] = $107;
         $108 = HEAP8[$104>>0]|0;
         $109 = $108&255;
         $$3162$be = $109;
        } else {
         $110 = (___shgetc($0)|0);
         $$3162$be = $110;
        }
        $111 = (($$3162$be) + -48)|0;
        $112 = ($111>>>0)<(10);
        $113 = ($103>>>0)<(429496729);
        $114 = ($102>>>0)<(2576980378);
        $115 = ($103|0)==(429496729);
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;$88 = $102;$89 = $103;$93 = $111;
        } else {
         break;
        }
       }
       $118 = ($111>>>0)>(9);
       if ($118) {
        $$1158 = $$0157;$263 = $103;$265 = $102;
       } else {
        $$1165168 = 10;$$8 = $$3162$be;$293 = $102;$294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;$263 = $292;$265 = $291;
      }
     } else {
      $$1160169 = $$1160;$$1165167 = $$1165;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165167) + -1)|0;
     $120 = $119 & $$1165167;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165167*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (17581 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((17325) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($$1165167>>>0)>($134>>>0);
      if ($135) {
       $$1155192 = 0;$138 = $134;
       while(1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((17325) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($$1165167>>>0)>($148>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$158 = 0;$160 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$158 = 0;$160 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($$1165167>>>0)<=($154>>>0);
      $157 = ($153>>>0)<($158>>>0);
      $159 = ($152>>>0)<($160>>>0);
      $161 = ($153|0)==($158|0);
      $162 = $161 & $159;
      $163 = $157 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165168 = $$1165167;$$8 = $$4163$lcssa;$293 = $160;$294 = $158;
       label = 72;
       break;
      } else {
       $164 = $160;$165 = $158;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $166 | $168;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((17325) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($$1165167>>>0)<=($180>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165168 = $$1165167;$$8 = $$5$be;$293 = $170;$294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((17325) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($$1165167>>>0)>($124>>>0);
     if ($125) {
      $$2156210 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156210, $$1165167)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((17325) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($$1165167>>>0)>($199>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$295 = $188;$296 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$295 = 0;$296 = 0;
     }
     $203 = $204&255;
     $205 = ($$1165167>>>0)>($203>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165167|0),0)|0);
      $207 = tempRet0;
      $$7198 = $$6$lcssa;$209 = $296;$211 = $295;$218 = $204;
      while(1) {
       $208 = ($209>>>0)>($207>>>0);
       $210 = ($211>>>0)>($206>>>0);
       $212 = ($209|0)==($207|0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165168 = $$1165167;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($211|0),($209|0),($$1165167|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165168 = $$1165167;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((17325) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($$1165167>>>0)>($236>>>0);
       if ($237) {
        $$7198 = $$7$be;$209 = $226;$211 = $225;$218 = $235;
       } else {
        $$1165168 = $$1165167;$$8 = $$7$be;$293 = $225;$294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165168 = $$1165167;$$8 = $$6$lcssa;$293 = $295;$294 = $296;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((17325) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($$1165168>>>0)>($240>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((17325) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($$1165168>>>0)>($251>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$263 = $4;$265 = $3;
    } else {
     $$1158 = $$0157;$263 = $294;$265 = $293;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $262 = ($263>>>0)<($4>>>0);
   $264 = ($265>>>0)<($3>>>0);
   $266 = ($263|0)==($4|0);
   $267 = $266 & $264;
   $268 = $262 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($263>>>0)>($4>>>0);
    $278 = ($265>>>0)>($3>>>0);
    $279 = ($263|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $265 ^ $$1158;
   $286 = $263 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$pre30 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$sink = $$pre;$26 = $$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$sink = $21;$26 = $21;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$sink = $23;$26 = $21;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $25 = ($26|0)==(0|0);
   $$phi$trans$insert29 = ((($0)) + 4|0);
   if ($25) {
    $$pre30 = HEAP32[$$phi$trans$insert29>>2]|0;
    $36 = $$pre30;
   } else {
    $27 = HEAP32[$$phi$trans$insert29>>2]|0;
    $28 = $26;
    $29 = ((($0)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($7|0)==($38|0);
   if ($39) {
    $$0 = $7;
   } else {
    $40 = $7&255;
    HEAP8[$35>>0] = $40;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 7]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 7]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_767($0,$1,$2,-2147483648,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$10 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $9 = ($10<<24>>24)==($6<<24>>24);
     $or$cond21 = $9 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $10;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$10 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=972; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 7]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0;
 var $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$279$ = 0, $$286 = 0, $$287 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre = 0, $$pre342 = 0, $$pre344 = 0, $$pre345 = 0, $$pre345$pre = 0, $$pre346 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge308 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond281 = 0, $storemerge274 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP32[$5>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   label = 88;
   break;
  } else {
   $23 = $21;$25 = $20;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249303 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249303;
      break L12;
     }
     $30 = ((($$0249303)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249303 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $20;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$20,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$$0269 = $$0269$phi;
   continue;
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre342 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269;$$sink = 1;
  } else {
   $44 = ((($$pre342)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre342)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269;$$sink = 1;
   }
  }
  $51 = (($$pre342) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge308 = $55 | $58;
  if ($brmerge308) {
   $$0262$lcssa = 0;$$lcssa291 = $52;$$lcssa292 = $51;
  } else {
   $$0262309 = 0;$60 = $52;$65 = $51;
   while(1) {
    $59 = $60 << 24 >> 24;
    $61 = (($59) + -32)|0;
    $62 = 1 << $61;
    $63 = $62 | $$0262309;
    $64 = ((($65)) + 1|0);
    HEAP32[$5>>2] = $64;
    $66 = HEAP8[$64>>0]|0;
    $67 = $66 << 24 >> 24;
    $68 = (($67) + -32)|0;
    $69 = ($68>>>0)>(31);
    $70 = 1 << $68;
    $71 = $70 & 75913;
    $72 = ($71|0)==(0);
    $brmerge = $69 | $72;
    if ($brmerge) {
     $$0262$lcssa = $63;$$lcssa291 = $66;$$lcssa292 = $64;
     break;
    } else {
     $$0262309 = $63;$60 = $66;$65 = $64;
    }
   }
  }
  $73 = ($$lcssa291<<24>>24)==(42);
  if ($73) {
   $74 = ((($$lcssa292)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75 << 24 >> 24;
   $77 = (_isdigit($76)|0);
   $78 = ($77|0)==(0);
   if ($78) {
    label = 23;
   } else {
    $79 = HEAP32[$5>>2]|0;
    $80 = ((($79)) + 2|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81<<24>>24)==(36);
    if ($82) {
     $83 = ((($79)) + 1|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = (($85) + -48)|0;
     $87 = (($4) + ($86<<2)|0);
     HEAP32[$87>>2] = 10;
     $88 = HEAP8[$83>>0]|0;
     $89 = $88 << 24 >> 24;
     $90 = (($89) + -48)|0;
     $91 = (($3) + ($90<<3)|0);
     $92 = $91;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($92) + 4)|0;
     $96 = $95;
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($79)) + 3|0);
     $$0259 = $94;$$2271 = 1;$storemerge274 = $98;
    } else {
     label = 23;
    }
   }
   if ((label|0) == 23) {
    label = 0;
    $99 = ($$1270|0)==(0);
    if (!($99)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $100 = $arglist_current;
     $101 = ((0) + 4|0);
     $expanded4 = $101;
     $expanded = (($expanded4) - 1)|0;
     $102 = (($100) + ($expanded))|0;
     $103 = ((0) + 4|0);
     $expanded8 = $103;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $104 = $102 & $expanded6;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $arglist_next = ((($105)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $363 = $106;
    } else {
     $363 = 0;
    }
    $107 = HEAP32[$5>>2]|0;
    $108 = ((($107)) + 1|0);
    $$0259 = $363;$$2271 = 0;$storemerge274 = $108;
   }
   HEAP32[$5>>2] = $storemerge274;
   $109 = ($$0259|0)<(0);
   $110 = $$0262$lcssa | 8192;
   $111 = (0 - ($$0259))|0;
   $$$0262 = $109 ? $110 : $$0262$lcssa;
   $$$0259 = $109 ? $111 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$115 = $storemerge274;
  } else {
   $112 = (_getint($5)|0);
   $113 = ($112|0)<(0);
   if ($113) {
    $$0 = -1;
    break;
   }
   $$pre344 = HEAP32[$5>>2]|0;
   $$1260 = $112;$$1263 = $$0262$lcssa;$$3272 = $$1270;$115 = $$pre344;
  }
  $114 = HEAP8[$115>>0]|0;
  $116 = ($114<<24>>24)==(46);
  do {
   if ($116) {
    $117 = ((($115)) + 1|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = ($118<<24>>24)==(42);
    if (!($119)) {
     $155 = ((($115)) + 1|0);
     HEAP32[$5>>2] = $155;
     $156 = (_getint($5)|0);
     $$pre345$pre = HEAP32[$5>>2]|0;
     $$0254 = $156;$$pre345 = $$pre345$pre;
     break;
    }
    $120 = ((($115)) + 2|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121 << 24 >> 24;
    $123 = (_isdigit($122)|0);
    $124 = ($123|0)==(0);
    if (!($124)) {
     $125 = HEAP32[$5>>2]|0;
     $126 = ((($125)) + 3|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = ($127<<24>>24)==(36);
     if ($128) {
      $129 = ((($125)) + 2|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = (($131) + -48)|0;
      $133 = (($4) + ($132<<2)|0);
      HEAP32[$133>>2] = 10;
      $134 = HEAP8[$129>>0]|0;
      $135 = $134 << 24 >> 24;
      $136 = (($135) + -48)|0;
      $137 = (($3) + ($136<<3)|0);
      $138 = $137;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = (($138) + 4)|0;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($125)) + 4|0);
      HEAP32[$5>>2] = $144;
      $$0254 = $140;$$pre345 = $144;
      break;
     }
    }
    $145 = ($$3272|0)==(0);
    if (!($145)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $146 = $arglist_current2;
     $147 = ((0) + 4|0);
     $expanded11 = $147;
     $expanded10 = (($expanded11) - 1)|0;
     $148 = (($146) + ($expanded10))|0;
     $149 = ((0) + 4|0);
     $expanded15 = $149;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $150 = $148 & $expanded13;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $arglist_next3 = ((($151)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $364 = $152;
    } else {
     $364 = 0;
    }
    $153 = HEAP32[$5>>2]|0;
    $154 = ((($153)) + 2|0);
    HEAP32[$5>>2] = $154;
    $$0254 = $364;$$pre345 = $154;
   } else {
    $$0254 = -1;$$pre345 = $115;
   }
  } while(0);
  $$0252 = 0;$158 = $$pre345;
  while(1) {
   $157 = HEAP8[$158>>0]|0;
   $159 = $157 << 24 >> 24;
   $160 = (($159) + -65)|0;
   $161 = ($160>>>0)>(57);
   if ($161) {
    $$0 = -1;
    break L1;
   }
   $162 = ((($158)) + 1|0);
   HEAP32[$5>>2] = $162;
   $163 = HEAP8[$158>>0]|0;
   $164 = $163 << 24 >> 24;
   $165 = (($164) + -65)|0;
   $166 = ((17590 + (($$0252*58)|0)|0) + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($168) + -1)|0;
   $170 = ($169>>>0)<(8);
   if ($170) {
    $$0252 = $168;$158 = $162;
   } else {
    break;
   }
  }
  $171 = ($167<<24>>24)==(0);
  if ($171) {
   $$0 = -1;
   break;
  }
  $172 = ($167<<24>>24)==(19);
  $173 = ($$0253|0)>(-1);
  do {
   if ($172) {
    if ($173) {
     $$0 = -1;
     break L1;
    } else {
     label = 50;
    }
   } else {
    if ($173) {
     $174 = (($4) + ($$0253<<2)|0);
     HEAP32[$174>>2] = $168;
     $175 = (($3) + ($$0253<<3)|0);
     $176 = $175;
     $177 = $176;
     $178 = HEAP32[$177>>2]|0;
     $179 = (($176) + 4)|0;
     $180 = $179;
     $181 = HEAP32[$180>>2]|0;
     $182 = $6;
     $183 = $182;
     HEAP32[$183>>2] = $178;
     $184 = (($182) + 4)|0;
     $185 = $184;
     HEAP32[$185>>2] = $181;
     label = 50;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$168,$2);
    $$pre346 = HEAP32[$5>>2]|0;
    $187 = $$pre346;
   }
  } while(0);
  if ((label|0) == 50) {
   label = 0;
   if ($10) {
    $187 = $162;
   } else {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
    continue;
   }
  }
  $186 = ((($187)) + -1|0);
  $188 = HEAP8[$186>>0]|0;
  $189 = $188 << 24 >> 24;
  $190 = ($$0252|0)!=(0);
  $191 = $189 & 15;
  $192 = ($191|0)==(3);
  $or$cond276 = $190 & $192;
  $193 = $189 & -33;
  $$0235 = $or$cond276 ? $193 : $189;
  $194 = $$1263 & 8192;
  $195 = ($194|0)==(0);
  $196 = $$1263 & -65537;
  $$1263$ = $195 ? $$1263 : $196;
  L73: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $203 = HEAP32[$6>>2]|0;
     HEAP32[$203>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 1:  {
     $204 = HEAP32[$6>>2]|0;
     HEAP32[$204>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 2:  {
     $205 = ($$1248|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = HEAP32[$6>>2]|0;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $$1248;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 3:  {
     $212 = $$1248&65535;
     $213 = HEAP32[$6>>2]|0;
     HEAP16[$213>>1] = $212;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 4:  {
     $214 = $$1248&255;
     $215 = HEAP32[$6>>2]|0;
     HEAP8[$215>>0] = $214;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 6:  {
     $216 = HEAP32[$6>>2]|0;
     HEAP32[$216>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 7:  {
     $217 = ($$1248|0)<(0);
     $218 = $217 << 31 >> 31;
     $219 = HEAP32[$6>>2]|0;
     $220 = $219;
     $221 = $220;
     HEAP32[$221>>2] = $$1248;
     $222 = (($220) + 4)|0;
     $223 = $222;
     HEAP32[$223>>2] = $218;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $224 = ($$0254>>>0)>(8);
    $225 = $224 ? $$0254 : 8;
    $226 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $225;$$3265 = $226;
    label = 62;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 62;
    break;
   }
   case 111:  {
    $242 = $6;
    $243 = $242;
    $244 = HEAP32[$243>>2]|0;
    $245 = (($242) + 4)|0;
    $246 = $245;
    $247 = HEAP32[$246>>2]|0;
    $248 = (_fmt_o($244,$247,$11)|0);
    $249 = $$1263$ & 8;
    $250 = ($249|0)==(0);
    $251 = $248;
    $252 = (($12) - ($251))|0;
    $253 = ($$0254|0)>($252|0);
    $254 = (($252) + 1)|0;
    $255 = $250 | $253;
    $$0254$$0254$ = $255 ? $$0254 : $254;
    $$0228 = $248;$$1233 = 0;$$1238 = 18054;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$281 = $244;$283 = $247;
    label = 68;
    break;
   }
   case 105: case 100:  {
    $256 = $6;
    $257 = $256;
    $258 = HEAP32[$257>>2]|0;
    $259 = (($256) + 4)|0;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = ($261|0)<(0);
    if ($262) {
     $263 = (_i64Subtract(0,0,($258|0),($261|0))|0);
     $264 = tempRet0;
     $265 = $6;
     $266 = $265;
     HEAP32[$266>>2] = $263;
     $267 = (($265) + 4)|0;
     $268 = $267;
     HEAP32[$268>>2] = $264;
     $$0232 = 1;$$0237 = 18054;$275 = $263;$276 = $264;
     label = 67;
     break L73;
    } else {
     $269 = $$1263$ & 2048;
     $270 = ($269|0)==(0);
     $271 = $$1263$ & 1;
     $272 = ($271|0)==(0);
     $$ = $272 ? 18054 : (18056);
     $$$ = $270 ? $$ : (18055);
     $273 = $$1263$ & 2049;
     $274 = ($273|0)!=(0);
     $$279$ = $274&1;
     $$0232 = $$279$;$$0237 = $$$;$275 = $258;$276 = $261;
     label = 67;
     break L73;
    }
    break;
   }
   case 117:  {
    $197 = $6;
    $198 = $197;
    $199 = HEAP32[$198>>2]|0;
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $$0232 = 0;$$0237 = 18054;$275 = $199;$276 = $202;
    label = 67;
    break;
   }
   case 99:  {
    $292 = $6;
    $293 = $292;
    $294 = HEAP32[$293>>2]|0;
    $295 = (($292) + 4)|0;
    $296 = $295;
    $297 = HEAP32[$296>>2]|0;
    $298 = $294&255;
    HEAP8[$13>>0] = $298;
    $$2 = $13;$$2234 = 0;$$2239 = 18054;$$2251 = $11;$$5 = 1;$$6268 = $196;
    break;
   }
   case 109:  {
    $299 = (___errno_location()|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = (_strerror($300)|0);
    $$1 = $301;
    label = 72;
    break;
   }
   case 115:  {
    $302 = HEAP32[$6>>2]|0;
    $303 = ($302|0)!=(0|0);
    $304 = $303 ? $302 : 18064;
    $$1 = $304;
    label = 72;
    break;
   }
   case 67:  {
    $311 = $6;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = (($311) + 4)|0;
    $315 = $314;
    $316 = HEAP32[$315>>2]|0;
    HEAP32[$8>>2] = $313;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258354 = -1;$365 = $8;
    label = 76;
    break;
   }
   case 83:  {
    $$pre348 = HEAP32[$6>>2]|0;
    $317 = ($$0254|0)==(0);
    if ($317) {
     _pad_673($0,32,$$1260,0,$$1263$);
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$4258354 = $$0254;$365 = $$pre348;
     label = 76;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $339 = +HEAPF64[$6>>3];
    $340 = (_fmt_fp($0,$339,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $340;$$0247 = $$1248;$$0269 = $$3272;
    continue L1;
    break;
   }
   default: {
    $$2 = $20;$$2234 = 0;$$2239 = 18054;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L97: do {
   if ((label|0) == 62) {
    label = 0;
    $227 = $6;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = (($227) + 4)|0;
    $231 = $230;
    $232 = HEAP32[$231>>2]|0;
    $233 = $$1236 & 32;
    $234 = (_fmt_x($229,$232,$11,$233)|0);
    $235 = ($229|0)==(0);
    $236 = ($232|0)==(0);
    $237 = $235 & $236;
    $238 = $$3265 & 8;
    $239 = ($238|0)==(0);
    $or$cond278 = $239 | $237;
    $240 = $$1236 >> 4;
    $241 = (18054 + ($240)|0);
    $$286 = $or$cond278 ? 18054 : $241;
    $$287 = $or$cond278 ? 0 : 2;
    $$0228 = $234;$$1233 = $$287;$$1238 = $$286;$$2256 = $$1255;$$4266 = $$3265;$281 = $229;$283 = $232;
    label = 68;
   }
   else if ((label|0) == 67) {
    label = 0;
    $277 = (_fmt_u($275,$276,$11)|0);
    $$0228 = $277;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$281 = $275;$283 = $276;
    label = 68;
   }
   else if ((label|0) == 72) {
    label = 0;
    $305 = (_memchr($$1,0,$$0254)|0);
    $306 = ($305|0)==(0|0);
    $307 = $305;
    $308 = $$1;
    $309 = (($307) - ($308))|0;
    $310 = (($$1) + ($$0254)|0);
    $$3257 = $306 ? $$0254 : $309;
    $$1250 = $306 ? $310 : $305;
    $$2 = $$1;$$2234 = 0;$$2239 = 18054;$$2251 = $$1250;$$5 = $$3257;$$6268 = $196;
   }
   else if ((label|0) == 76) {
    label = 0;
    $$0229316 = $365;$$0240315 = 0;$$1244314 = 0;
    while(1) {
     $318 = HEAP32[$$0229316>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $$0240$lcssa = $$0240315;$$2245 = $$1244314;
      break;
     }
     $320 = (_wctomb($9,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($$4258354) - ($$0240315))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond281 = $321 | $323;
     if ($or$cond281) {
      $$0240$lcssa = $$0240315;$$2245 = $320;
      break;
     }
     $324 = ((($$0229316)) + 4|0);
     $325 = (($320) + ($$0240315))|0;
     $326 = ($$4258354>>>0)>($325>>>0);
     if ($326) {
      $$0229316 = $324;$$0240315 = $325;$$1244314 = $320;
     } else {
      $$0240$lcssa = $325;$$2245 = $320;
      break;
     }
    }
    $327 = ($$2245|0)<(0);
    if ($327) {
     $$0 = -1;
     break L1;
    }
    _pad_673($0,32,$$1260,$$0240$lcssa,$$1263$);
    $328 = ($$0240$lcssa|0)==(0);
    if ($328) {
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$1230327 = $365;$$1241326 = 0;
     while(1) {
      $329 = HEAP32[$$1230327>>2]|0;
      $330 = ($329|0)==(0);
      if ($330) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $331 = (_wctomb($9,$329)|0);
      $332 = (($331) + ($$1241326))|0;
      $333 = ($332|0)>($$0240$lcssa|0);
      if ($333) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $334 = ((($$1230327)) + 4|0);
      _out($0,$9,$331);
      $335 = ($332>>>0)<($$0240$lcssa>>>0);
      if ($335) {
       $$1230327 = $334;$$1241326 = $332;
      } else {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 68) {
   label = 0;
   $278 = ($$2256|0)>(-1);
   $279 = $$4266 & -65537;
   $$$4266 = $278 ? $279 : $$4266;
   $280 = ($281|0)!=(0);
   $282 = ($283|0)!=(0);
   $284 = $280 | $282;
   $285 = ($$2256|0)!=(0);
   $or$cond = $285 | $284;
   $286 = $$0228;
   $287 = (($12) - ($286))|0;
   $288 = $284 ^ 1;
   $289 = $288&1;
   $290 = (($287) + ($289))|0;
   $291 = ($$2256|0)>($290|0);
   $$2256$ = $291 ? $$2256 : $290;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 85) {
   label = 0;
   $336 = $$1263$ ^ 8192;
   _pad_673($0,32,$$1260,$$0240$lcssa356,$336);
   $337 = ($$1260|0)>($$0240$lcssa356|0);
   $338 = $337 ? $$1260 : $$0240$lcssa356;
   $$0243 = $338;$$0247 = $$1248;$$0269 = $$3272;
   continue;
  }
  $341 = $$2251;
  $342 = $$2;
  $343 = (($341) - ($342))|0;
  $344 = ($$5|0)<($343|0);
  $$$5 = $344 ? $343 : $$5;
  $345 = (($$$5) + ($$2234))|0;
  $346 = ($$1260|0)<($345|0);
  $$2261 = $346 ? $345 : $$1260;
  _pad_673($0,32,$$2261,$345,$$6268);
  _out($0,$$2239,$$2234);
  $347 = $$6268 ^ 65536;
  _pad_673($0,48,$$2261,$345,$347);
  _pad_673($0,48,$$$5,$343,0);
  _out($0,$$2,$343);
  $348 = $$6268 ^ 8192;
  _pad_673($0,32,$$2261,$345,$348);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;
 }
 L116: do {
  if ((label|0) == 88) {
   $349 = ($0|0)==(0|0);
   if ($349) {
    $350 = ($$0269|0)==(0);
    if ($350) {
     $$0 = 0;
    } else {
     $$2242302 = 1;
     while(1) {
      $351 = (($4) + ($$2242302<<2)|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = ($352|0)==(0);
      if ($353) {
       $$2242$lcssa = $$2242302;
       break;
      }
      $355 = (($3) + ($$2242302<<3)|0);
      _pop_arg($355,$352,$2);
      $356 = (($$2242302) + 1)|0;
      $357 = ($$2242302|0)<(9);
      if ($357) {
       $$2242302 = $356;
      } else {
       $$2242$lcssa = $356;
       break;
      }
     }
     $354 = ($$2242$lcssa|0)<(10);
     if ($354) {
      $$3300 = $$2242$lcssa;
      while(1) {
       $360 = (($4) + ($$3300<<2)|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = ($361|0)==(0);
       if (!($362)) {
        $$0 = -1;
        break L116;
       }
       $358 = (($$3300) + 1)|0;
       $359 = ($$3300|0)<(9);
       if ($359) {
        $$3300 = $358;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (18102 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_107()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_673($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$564 = 0.0, $$$3484 = 0, $$$3484699 = 0, $$$3484700 = 0, $$$3501 = 0, $$$4502 = 0, $$$543 = 0.0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488 = 0, $$0488655 = 0, $$0488657 = 0;
 var $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0510 = 0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0;
 var $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$549 = 0, $$2476$$551 = 0, $$2483$ph = 0;
 var $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0;
 var $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$557 = 0, $$5605 = 0, $$561 = 0, $$564 = 0.0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0;
 var $$9$ph = 0, $$lcssa675 = 0, $$neg = 0, $$neg568 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre690 = 0, $$pre693 = 0, $$pre697 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond542 = 0, $or$cond545 = 0, $or$cond556 = 0, $or$cond6 = 0, $scevgep686 = 0, $scevgep686687 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_674($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = - $1;
  $$0471 = $14;$$0520 = 1;$$0521 = 18071;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (18072) : (18077);
  $$$ = $16 ? $$ : (18074);
  $19 = $4 & 2049;
  $20 = ($19|0)!=(0);
  $$534$ = $20&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_674($$0471)|0);
 $21 = tempRet0;
 $22 = $21 & 2146435072;
 $23 = (0)==(0);
 $24 = ($22|0)==(2146435072);
 $25 = $23 & $24;
 do {
  if ($25) {
   $26 = $5 & 32;
   $27 = ($26|0)!=(0);
   $28 = $27 ? 18090 : 18094;
   $29 = ($$0471 != $$0471) | (0.0 != 0.0);
   $30 = $27 ? 26236 : 18098;
   $$0510 = $29 ? $30 : $28;
   $31 = (($$0520) + 3)|0;
   $32 = $4 & -65537;
   _pad_673($0,32,$2,$31,$32);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $33 = $4 ^ 8192;
   _pad_673($0,32,$2,$31,$33);
   $$sink560 = $31;
  } else {
   $34 = (+_frexpl($$0471,$7));
   $35 = $34 * 2.0;
   $36 = $35 != 0.0;
   if ($36) {
    $37 = HEAP32[$7>>2]|0;
    $38 = (($37) + -1)|0;
    HEAP32[$7>>2] = $38;
   }
   $39 = $5 | 32;
   $40 = ($39|0)==(97);
   if ($40) {
    $41 = $5 & 32;
    $42 = ($41|0)==(0);
    $43 = ((($$0521)) + 9|0);
    $$0521$ = $42 ? $$0521 : $43;
    $44 = $$0520 | 2;
    $45 = ($3>>>0)>(11);
    $46 = (12 - ($3))|0;
    $47 = ($46|0)==(0);
    $48 = $45 | $47;
    do {
     if ($48) {
      $$1472 = $35;
     } else {
      $$0509585 = 8.0;$$1508586 = $46;
      while(1) {
       $49 = (($$1508586) + -1)|0;
       $50 = $$0509585 * 16.0;
       $51 = ($49|0)==(0);
       if ($51) {
        break;
       } else {
        $$0509585 = $50;$$1508586 = $49;
       }
      }
      $52 = HEAP8[$$0521$>>0]|0;
      $53 = ($52<<24>>24)==(45);
      if ($53) {
       $54 = - $35;
       $55 = $54 - $50;
       $56 = $50 + $55;
       $57 = - $56;
       $$1472 = $57;
       break;
      } else {
       $58 = $35 + $50;
       $59 = $58 - $50;
       $$1472 = $59;
       break;
      }
     }
    } while(0);
    $60 = HEAP32[$7>>2]|0;
    $61 = ($60|0)<(0);
    $62 = (0 - ($60))|0;
    $63 = $61 ? $62 : $60;
    $64 = ($63|0)<(0);
    $65 = $64 << 31 >> 31;
    $66 = (_fmt_u($63,$65,$11)|0);
    $67 = ($66|0)==($11|0);
    if ($67) {
     $68 = ((($10)) + 11|0);
     HEAP8[$68>>0] = 48;
     $$0511 = $68;
    } else {
     $$0511 = $66;
    }
    $69 = $60 >> 31;
    $70 = $69 & 2;
    $71 = (($70) + 43)|0;
    $72 = $71&255;
    $73 = ((($$0511)) + -1|0);
    HEAP8[$73>>0] = $72;
    $74 = (($5) + 15)|0;
    $75 = $74&255;
    $76 = ((($$0511)) + -2|0);
    HEAP8[$76>>0] = $75;
    $77 = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (18102 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $41 | $83;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = $89 == 0.0;
      $or$cond3$not = $77 & $93;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $94 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $94;
      }
     } else {
      $$1524 = $86;
     }
     $95 = $89 != 0.0;
     if ($95) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $96 = ($3|0)==(0);
    $$pre693 = $$1524;
    if ($96) {
     label = 24;
    } else {
     $97 = (-2 - ($9))|0;
     $98 = (($97) + ($$pre693))|0;
     $99 = ($98|0)<($3|0);
     if ($99) {
      $100 = (($3) + 2)|0;
      $$pre690 = (($$pre693) - ($9))|0;
      $$pre$phi691Z2D = $$pre690;$$sink = $100;
     } else {
      label = 24;
     }
    }
    if ((label|0) == 24) {
     $101 = (($$pre693) - ($9))|0;
     $$pre$phi691Z2D = $101;$$sink = $101;
    }
    $102 = $11;
    $103 = $76;
    $104 = (($102) - ($103))|0;
    $105 = (($104) + ($44))|0;
    $106 = (($105) + ($$sink))|0;
    _pad_673($0,32,$2,$106,$4);
    _out($0,$$0521$,$44);
    $107 = $4 ^ 65536;
    _pad_673($0,48,$2,$106,$107);
    _out($0,$8,$$pre$phi691Z2D);
    $108 = (($$sink) - ($$pre$phi691Z2D))|0;
    _pad_673($0,48,$108,0,0);
    _out($0,$76,$104);
    $109 = $4 ^ 8192;
    _pad_673($0,32,$2,$106,$109);
    $$sink560 = $106;
    break;
   }
   $110 = ($3|0)<(0);
   $$540 = $110 ? 6 : $3;
   if ($36) {
    $111 = $35 * 268435456.0;
    $112 = HEAP32[$7>>2]|0;
    $113 = (($112) + -28)|0;
    HEAP32[$7>>2] = $113;
    $$3 = $111;$$pr = $113;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $35;$$pr = $$pre;
   }
   $114 = ($$pr|0)<(0);
   $115 = ((($6)) + 288|0);
   $$561 = $114 ? $6 : $115;
   $$0498 = $$561;$$4 = $$3;
   while(1) {
    $116 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $116;
    $117 = ((($$0498)) + 4|0);
    $118 = (+($116>>>0));
    $119 = $$4 - $118;
    $120 = $119 * 1.0E+9;
    $121 = $120 != 0.0;
    if ($121) {
     $$0498 = $117;$$4 = $120;
    } else {
     break;
    }
   }
   $122 = ($$pr|0)>(0);
   if ($122) {
    $$1482663 = $$561;$$1499662 = $117;$124 = $$pr;
    while(1) {
     $123 = ($124|0)<(29);
     $125 = $123 ? $124 : 29;
     $$0488655 = ((($$1499662)) + -4|0);
     $126 = ($$0488655>>>0)<($$1482663>>>0);
     if ($126) {
      $$2483$ph = $$1482663;
     } else {
      $$0488657 = $$0488655;$$0497656 = 0;
      while(1) {
       $127 = HEAP32[$$0488657>>2]|0;
       $128 = (_bitshift64Shl(($127|0),0,($125|0))|0);
       $129 = tempRet0;
       $130 = (_i64Add(($128|0),($129|0),($$0497656|0),0)|0);
       $131 = tempRet0;
       $132 = (___uremdi3(($130|0),($131|0),1000000000,0)|0);
       $133 = tempRet0;
       HEAP32[$$0488657>>2] = $132;
       $134 = (___udivdi3(($130|0),($131|0),1000000000,0)|0);
       $135 = tempRet0;
       $$0488 = ((($$0488657)) + -4|0);
       $136 = ($$0488>>>0)<($$1482663>>>0);
       if ($136) {
        break;
       } else {
        $$0488657 = $$0488;$$0497656 = $134;
       }
      }
      $137 = ($134|0)==(0);
      if ($137) {
       $$2483$ph = $$1482663;
      } else {
       $138 = ((($$1482663)) + -4|0);
       HEAP32[$138>>2] = $134;
       $$2483$ph = $138;
      }
     }
     $$2500 = $$1499662;
     while(1) {
      $139 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($139)) {
       break;
      }
      $140 = ((($$2500)) + -4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)==(0);
      if ($142) {
       $$2500 = $140;
      } else {
       break;
      }
     }
     $143 = HEAP32[$7>>2]|0;
     $144 = (($143) - ($125))|0;
     HEAP32[$7>>2] = $144;
     $145 = ($144|0)>(0);
     if ($145) {
      $$1482663 = $$2483$ph;$$1499662 = $$2500;$124 = $144;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr566 = $144;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561;$$1499$lcssa = $117;$$pr566 = $$pr;
   }
   $146 = ($$pr566|0)<(0);
   if ($146) {
    $147 = (($$540) + 25)|0;
    $148 = (($147|0) / 9)&-1;
    $149 = (($148) + 1)|0;
    $150 = ($39|0)==(102);
    $$3484650 = $$1482$lcssa;$$3501649 = $$1499$lcssa;$152 = $$pr566;
    while(1) {
     $151 = (0 - ($152))|0;
     $153 = ($151|0)<(9);
     $154 = $153 ? $151 : 9;
     $155 = ($$3484650>>>0)<($$3501649>>>0);
     if ($155) {
      $159 = 1 << $154;
      $160 = (($159) + -1)|0;
      $161 = 1000000000 >>> $154;
      $$0487644 = 0;$$1489643 = $$3484650;
      while(1) {
       $162 = HEAP32[$$1489643>>2]|0;
       $163 = $162 & $160;
       $164 = $162 >>> $154;
       $165 = (($164) + ($$0487644))|0;
       HEAP32[$$1489643>>2] = $165;
       $166 = Math_imul($163, $161)|0;
       $167 = ((($$1489643)) + 4|0);
       $168 = ($167>>>0)<($$3501649>>>0);
       if ($168) {
        $$0487644 = $166;$$1489643 = $167;
       } else {
        break;
       }
      }
      $169 = HEAP32[$$3484650>>2]|0;
      $170 = ($169|0)==(0);
      $171 = ((($$3484650)) + 4|0);
      $$$3484 = $170 ? $171 : $$3484650;
      $172 = ($166|0)==(0);
      if ($172) {
       $$$3484700 = $$$3484;$$4502 = $$3501649;
      } else {
       $173 = ((($$3501649)) + 4|0);
       HEAP32[$$3501649>>2] = $166;
       $$$3484700 = $$$3484;$$4502 = $173;
      }
     } else {
      $156 = HEAP32[$$3484650>>2]|0;
      $157 = ($156|0)==(0);
      $158 = ((($$3484650)) + 4|0);
      $$$3484699 = $157 ? $158 : $$3484650;
      $$$3484700 = $$$3484699;$$4502 = $$3501649;
     }
     $174 = $150 ? $$561 : $$$3484700;
     $175 = $$4502;
     $176 = $174;
     $177 = (($175) - ($176))|0;
     $178 = $177 >> 2;
     $179 = ($178|0)>($149|0);
     $180 = (($174) + ($149<<2)|0);
     $$$4502 = $179 ? $180 : $$4502;
     $181 = HEAP32[$7>>2]|0;
     $182 = (($181) + ($154))|0;
     HEAP32[$7>>2] = $182;
     $183 = ($182|0)<(0);
     if ($183) {
      $$3484650 = $$$3484700;$$3501649 = $$$4502;$152 = $182;
     } else {
      $$3484$lcssa = $$$3484700;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $184 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $185 = $$561;
   if ($184) {
    $186 = $$3484$lcssa;
    $187 = (($185) - ($186))|0;
    $188 = $187 >> 2;
    $189 = ($188*9)|0;
    $190 = HEAP32[$$3484$lcssa>>2]|0;
    $191 = ($190>>>0)<(10);
    if ($191) {
     $$1515 = $189;
    } else {
     $$0514639 = $189;$$0530638 = 10;
     while(1) {
      $192 = ($$0530638*10)|0;
      $193 = (($$0514639) + 1)|0;
      $194 = ($190>>>0)<($192>>>0);
      if ($194) {
       $$1515 = $193;
       break;
      } else {
       $$0514639 = $193;$$0530638 = $192;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $195 = ($39|0)!=(102);
   $196 = $195 ? $$1515 : 0;
   $197 = (($$540) - ($196))|0;
   $198 = ($39|0)==(103);
   $199 = ($$540|0)!=(0);
   $200 = $199 & $198;
   $$neg = $200 << 31 >> 31;
   $201 = (($197) + ($$neg))|0;
   $202 = $$3501$lcssa;
   $203 = (($202) - ($185))|0;
   $204 = $203 >> 2;
   $205 = ($204*9)|0;
   $206 = (($205) + -9)|0;
   $207 = ($201|0)<($206|0);
   if ($207) {
    $208 = ((($$561)) + 4|0);
    $209 = (($201) + 9216)|0;
    $210 = (($209|0) / 9)&-1;
    $211 = (($210) + -1024)|0;
    $212 = (($208) + ($211<<2)|0);
    $213 = (($209|0) % 9)&-1;
    $214 = ($213|0)<(8);
    if ($214) {
     $$0527$in633 = $213;$$1531632 = 10;
     while(1) {
      $$0527 = (($$0527$in633) + 1)|0;
      $215 = ($$1531632*10)|0;
      $216 = ($$0527$in633|0)<(7);
      if ($216) {
       $$0527$in633 = $$0527;$$1531632 = $215;
      } else {
       $$1531$lcssa = $215;
       break;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $217 = HEAP32[$212>>2]|0;
    $218 = (($217>>>0) % ($$1531$lcssa>>>0))&-1;
    $219 = ($218|0)==(0);
    $220 = ((($212)) + 4|0);
    $221 = ($220|0)==($$3501$lcssa|0);
    $or$cond542 = $221 & $219;
    if ($or$cond542) {
     $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $222 = (($217>>>0) / ($$1531$lcssa>>>0))&-1;
     $223 = $222 & 1;
     $224 = ($223|0)==(0);
     $$543 = $224 ? 9007199254740992.0 : 9007199254740994.0;
     $225 = (($$1531$lcssa|0) / 2)&-1;
     $226 = ($218>>>0)<($225>>>0);
     $227 = ($218|0)==($225|0);
     $or$cond545 = $221 & $227;
     $$564 = $or$cond545 ? 1.0 : 1.5;
     $$$564 = $226 ? 0.5 : $$564;
     $228 = ($$0520|0)==(0);
     if ($228) {
      $$1467 = $$$564;$$1469 = $$543;
     } else {
      $229 = HEAP8[$$0521>>0]|0;
      $230 = ($229<<24>>24)==(45);
      $231 = - $$543;
      $232 = - $$$564;
      $$$543 = $230 ? $231 : $$543;
      $$$$564 = $230 ? $232 : $$$564;
      $$1467 = $$$$564;$$1469 = $$$543;
     }
     $233 = (($217) - ($218))|0;
     HEAP32[$212>>2] = $233;
     $234 = $$1469 + $$1467;
     $235 = $234 != $$1469;
     if ($235) {
      $236 = (($233) + ($$1531$lcssa))|0;
      HEAP32[$212>>2] = $236;
      $237 = ($236>>>0)>(999999999);
      if ($237) {
       $$5486626 = $$3484$lcssa;$$sink547625 = $212;
       while(1) {
        $238 = ((($$sink547625)) + -4|0);
        HEAP32[$$sink547625>>2] = 0;
        $239 = ($238>>>0)<($$5486626>>>0);
        if ($239) {
         $240 = ((($$5486626)) + -4|0);
         HEAP32[$240>>2] = 0;
         $$6 = $240;
        } else {
         $$6 = $$5486626;
        }
        $241 = HEAP32[$238>>2]|0;
        $242 = (($241) + 1)|0;
        HEAP32[$238>>2] = $242;
        $243 = ($242>>>0)>(999999999);
        if ($243) {
         $$5486626 = $$6;$$sink547625 = $238;
        } else {
         $$5486$lcssa = $$6;$$sink547$lcssa = $238;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink547$lcssa = $212;
      }
      $244 = $$5486$lcssa;
      $245 = (($185) - ($244))|0;
      $246 = $245 >> 2;
      $247 = ($246*9)|0;
      $248 = HEAP32[$$5486$lcssa>>2]|0;
      $249 = ($248>>>0)<(10);
      if ($249) {
       $$4492 = $$sink547$lcssa;$$4518 = $247;$$8 = $$5486$lcssa;
      } else {
       $$2516621 = $247;$$2532620 = 10;
       while(1) {
        $250 = ($$2532620*10)|0;
        $251 = (($$2516621) + 1)|0;
        $252 = ($248>>>0)<($250>>>0);
        if ($252) {
         $$4492 = $$sink547$lcssa;$$4518 = $251;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516621 = $251;$$2532620 = $250;
        }
       }
      }
     } else {
      $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $253 = ((($$4492)) + 4|0);
    $254 = ($$3501$lcssa>>>0)>($253>>>0);
    $$$3501 = $254 ? $253 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $255 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($255)) {
     $$lcssa675 = 0;
     break;
    }
    $256 = ((($$7505)) + -4|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(0);
    if ($258) {
     $$7505 = $256;
    } else {
     $$lcssa675 = 1;
     break;
    }
   }
   $259 = (0 - ($$5519$ph))|0;
   do {
    if ($198) {
     $not$ = $199 ^ 1;
     $260 = $not$&1;
     $$540$ = (($$540) + ($260))|0;
     $261 = ($$540$|0)>($$5519$ph|0);
     $262 = ($$5519$ph|0)>(-5);
     $or$cond6 = $261 & $262;
     if ($or$cond6) {
      $263 = (($5) + -1)|0;
      $$neg568 = (($$540$) + -1)|0;
      $264 = (($$neg568) - ($$5519$ph))|0;
      $$0479 = $263;$$2476 = $264;
     } else {
      $265 = (($5) + -2)|0;
      $266 = (($$540$) + -1)|0;
      $$0479 = $265;$$2476 = $266;
     }
     $267 = $4 & 8;
     $268 = ($267|0)==(0);
     if ($268) {
      if ($$lcssa675) {
       $269 = ((($$7505)) + -4|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($270|0)==(0);
       if ($271) {
        $$2529 = 9;
       } else {
        $272 = (($270>>>0) % 10)&-1;
        $273 = ($272|0)==(0);
        if ($273) {
         $$1528617 = 0;$$3533616 = 10;
         while(1) {
          $274 = ($$3533616*10)|0;
          $275 = (($$1528617) + 1)|0;
          $276 = (($270>>>0) % ($274>>>0))&-1;
          $277 = ($276|0)==(0);
          if ($277) {
           $$1528617 = $275;$$3533616 = $274;
          } else {
           $$2529 = $275;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $278 = $$0479 | 32;
      $279 = ($278|0)==(102);
      $280 = $$7505;
      $281 = (($280) - ($185))|0;
      $282 = $281 >> 2;
      $283 = ($282*9)|0;
      $284 = (($283) + -9)|0;
      if ($279) {
       $285 = (($284) - ($$2529))|0;
       $286 = ($285|0)>(0);
       $$548 = $286 ? $285 : 0;
       $287 = ($$2476|0)<($$548|0);
       $$2476$$549 = $287 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi698Z2D = 0;
       break;
      } else {
       $288 = (($284) + ($$5519$ph))|0;
       $289 = (($288) - ($$2529))|0;
       $290 = ($289|0)>(0);
       $$550 = $290 ? $289 : 0;
       $291 = ($$2476|0)<($$550|0);
       $$2476$$551 = $291 ? $$2476 : $$550;
       $$1480 = $$0479;$$3477 = $$2476$$551;$$pre$phi698Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi698Z2D = $267;
     }
    } else {
     $$pre697 = $4 & 8;
     $$1480 = $5;$$3477 = $$540;$$pre$phi698Z2D = $$pre697;
    }
   } while(0);
   $292 = $$3477 | $$pre$phi698Z2D;
   $293 = ($292|0)!=(0);
   $294 = $293&1;
   $295 = $$1480 | 32;
   $296 = ($295|0)==(102);
   if ($296) {
    $297 = ($$5519$ph|0)>(0);
    $298 = $297 ? $$5519$ph : 0;
    $$2513 = 0;$$pn = $298;
   } else {
    $299 = ($$5519$ph|0)<(0);
    $300 = $299 ? $259 : $$5519$ph;
    $301 = ($300|0)<(0);
    $302 = $301 << 31 >> 31;
    $303 = (_fmt_u($300,$302,$11)|0);
    $304 = $11;
    $305 = $303;
    $306 = (($304) - ($305))|0;
    $307 = ($306|0)<(2);
    if ($307) {
     $$1512610 = $303;
     while(1) {
      $308 = ((($$1512610)) + -1|0);
      HEAP8[$308>>0] = 48;
      $309 = $308;
      $310 = (($304) - ($309))|0;
      $311 = ($310|0)<(2);
      if ($311) {
       $$1512610 = $308;
      } else {
       $$1512$lcssa = $308;
       break;
      }
     }
    } else {
     $$1512$lcssa = $303;
    }
    $312 = $$5519$ph >> 31;
    $313 = $312 & 2;
    $314 = (($313) + 43)|0;
    $315 = $314&255;
    $316 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$316>>0] = $315;
    $317 = $$1480&255;
    $318 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$318>>0] = $317;
    $319 = $318;
    $320 = (($304) - ($319))|0;
    $$2513 = $318;$$pn = $320;
   }
   $321 = (($$0520) + 1)|0;
   $322 = (($321) + ($$3477))|0;
   $$1526 = (($322) + ($294))|0;
   $323 = (($$1526) + ($$pn))|0;
   _pad_673($0,32,$2,$323,$4);
   _out($0,$$0521,$$0520);
   $324 = $4 ^ 65536;
   _pad_673($0,48,$2,$323,$324);
   if ($296) {
    $325 = ($$9$ph>>>0)>($$561>>>0);
    $$0496$$9 = $325 ? $$561 : $$9$ph;
    $326 = ((($8)) + 9|0);
    $327 = $326;
    $328 = ((($8)) + 8|0);
    $$5493600 = $$0496$$9;
    while(1) {
     $329 = HEAP32[$$5493600>>2]|0;
     $330 = (_fmt_u($329,0,$326)|0);
     $331 = ($$5493600|0)==($$0496$$9|0);
     if ($331) {
      $337 = ($330|0)==($326|0);
      if ($337) {
       HEAP8[$328>>0] = 48;
       $$1465 = $328;
      } else {
       $$1465 = $330;
      }
     } else {
      $332 = ($330>>>0)>($8>>>0);
      if ($332) {
       $333 = $330;
       $334 = (($333) - ($9))|0;
       _memset(($8|0),48,($334|0))|0;
       $$0464597 = $330;
       while(1) {
        $335 = ((($$0464597)) + -1|0);
        $336 = ($335>>>0)>($8>>>0);
        if ($336) {
         $$0464597 = $335;
        } else {
         $$1465 = $335;
         break;
        }
       }
      } else {
       $$1465 = $330;
      }
     }
     $338 = $$1465;
     $339 = (($327) - ($338))|0;
     _out($0,$$1465,$339);
     $340 = ((($$5493600)) + 4|0);
     $341 = ($340>>>0)>($$561>>>0);
     if ($341) {
      break;
     } else {
      $$5493600 = $340;
     }
    }
    $342 = ($292|0)==(0);
    if (!($342)) {
     _out($0,26416,1);
    }
    $343 = ($340>>>0)<($$7505>>>0);
    $344 = ($$3477|0)>(0);
    $345 = $343 & $344;
    if ($345) {
     $$4478593 = $$3477;$$6494592 = $340;
     while(1) {
      $346 = HEAP32[$$6494592>>2]|0;
      $347 = (_fmt_u($346,0,$326)|0);
      $348 = ($347>>>0)>($8>>>0);
      if ($348) {
       $349 = $347;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0463587 = $347;
       while(1) {
        $351 = ((($$0463587)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0463587 = $351;
        } else {
         $$0463$lcssa = $351;
         break;
        }
       }
      } else {
       $$0463$lcssa = $347;
      }
      $353 = ($$4478593|0)<(9);
      $354 = $353 ? $$4478593 : 9;
      _out($0,$$0463$lcssa,$354);
      $355 = ((($$6494592)) + 4|0);
      $356 = (($$4478593) + -9)|0;
      $357 = ($355>>>0)<($$7505>>>0);
      $358 = ($$4478593|0)>(9);
      $359 = $357 & $358;
      if ($359) {
       $$4478593 = $356;$$6494592 = $355;
      } else {
       $$4478$lcssa = $356;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $360 = (($$4478$lcssa) + 9)|0;
    _pad_673($0,48,$360,9,0);
   } else {
    $361 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa675 ? $$7505 : $361;
    $362 = ($$3477|0)>(-1);
    if ($362) {
     $363 = ((($8)) + 9|0);
     $364 = ($$pre$phi698Z2D|0)==(0);
     $365 = $363;
     $366 = (0 - ($9))|0;
     $367 = ((($8)) + 8|0);
     $$5605 = $$3477;$$7495604 = $$9$ph;
     while(1) {
      $368 = HEAP32[$$7495604>>2]|0;
      $369 = (_fmt_u($368,0,$363)|0);
      $370 = ($369|0)==($363|0);
      if ($370) {
       HEAP8[$367>>0] = 48;
       $$0 = $367;
      } else {
       $$0 = $369;
      }
      $371 = ($$7495604|0)==($$9$ph|0);
      do {
       if ($371) {
        $375 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $376 = ($$5605|0)<(1);
        $or$cond556 = $364 & $376;
        if ($or$cond556) {
         $$2 = $375;
         break;
        }
        _out($0,26416,1);
        $$2 = $375;
       } else {
        $372 = ($$0>>>0)>($8>>>0);
        if (!($372)) {
         $$2 = $$0;
         break;
        }
        $scevgep686 = (($$0) + ($366)|0);
        $scevgep686687 = $scevgep686;
        _memset(($8|0),48,($scevgep686687|0))|0;
        $$1601 = $$0;
        while(1) {
         $373 = ((($$1601)) + -1|0);
         $374 = ($373>>>0)>($8>>>0);
         if ($374) {
          $$1601 = $373;
         } else {
          $$2 = $373;
          break;
         }
        }
       }
      } while(0);
      $377 = $$2;
      $378 = (($365) - ($377))|0;
      $379 = ($$5605|0)>($378|0);
      $380 = $379 ? $378 : $$5605;
      _out($0,$$2,$380);
      $381 = (($$5605) - ($378))|0;
      $382 = ((($$7495604)) + 4|0);
      $383 = ($382>>>0)<($$7505$>>>0);
      $384 = ($381|0)>(-1);
      $385 = $383 & $384;
      if ($385) {
       $$5605 = $381;$$7495604 = $382;
      } else {
       $$5$lcssa = $381;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $386 = (($$5$lcssa) + 18)|0;
    _pad_673($0,48,$386,18,0);
    $387 = $11;
    $388 = $$2513;
    $389 = (($387) - ($388))|0;
    _out($0,$$2513,$389);
   }
   $390 = $4 ^ 8192;
   _pad_673($0,32,$2,$323,$390);
   $$sink560 = $323;
  }
 } while(0);
 $391 = ($$sink560|0)<($2|0);
 $$557 = $391 ? $2 : $$sink560;
 STACKTOP = sp;return ($$557|0);
}
function ___DOUBLE_BITS_674($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_447()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_447() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1096|0);
}
function ___pthread_self_107() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (18118 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 18206;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 18206;
  } else {
   $$01214 = 18206;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 7]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 7]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   (_memcpy(($31|0),($$141|0),($$143|0))|0);
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($$|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _strnlen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_memchr($0,0,$1)|0);
 $3 = ($2|0)==(0|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $3 ? $1 : $6;
 return ($7|0);
}
function _isblank($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = ($0|0)==(9);
 $3 = $1 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _iswalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_iswdigit($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_iswalpha($0)|0);
  $4 = ($3|0)!=(0);
  $phitmp = $4&1;
  $5 = $phitmp;
 } else {
  $5 = 1;
 }
 return ($5|0);
}
function _iswdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _iswalpha($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(131072);
 if ($1) {
  $2 = $0 >>> 8;
  $3 = (20010 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 << 5;
  $7 = $0 >>> 3;
  $8 = $7 & 31;
  $9 = $6 | $8;
  $10 = (20010 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $0 & 7;
  $14 = $12 >>> $13;
  $15 = $14 & 1;
  $$0 = $15;
 } else {
  $16 = ($0>>>0)<(196606);
  $$ = $16&1;
  $$0 = $$;
 }
 return ($$0|0);
}
function _iswblank($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isblank($0)|0);
 return ($1|0);
}
function _iswcntrl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $narrow = 0, $or$cond = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(32);
 $2 = (($0) + -127)|0;
 $3 = ($2>>>0)<(33);
 $or$cond = $1 | $3;
 $4 = $0 & -2;
 $5 = ($4|0)==(8232);
 $or$cond6 = $5 | $or$cond;
 $6 = (($0) + -65529)|0;
 $7 = ($6>>>0)<(3);
 $narrow = $7 | $or$cond6;
 $8 = $narrow&1;
 return ($8|0);
}
function _iswctype($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($1|0) {
  case 1:  {
   $2 = (_iswalnum($0)|0);
   $$0 = $2;
   break;
  }
  case 2:  {
   $3 = (_iswalpha($0)|0);
   $$0 = $3;
   break;
  }
  case 3:  {
   $4 = (_iswblank($0)|0);
   $$0 = $4;
   break;
  }
  case 4:  {
   $5 = (_iswcntrl($0)|0);
   $$0 = $5;
   break;
  }
  case 5:  {
   $6 = (_iswdigit($0)|0);
   $$0 = $6;
   break;
  }
  case 6:  {
   $7 = (_iswgraph($0)|0);
   $$0 = $7;
   break;
  }
  case 7:  {
   $8 = (_iswlower($0)|0);
   $$0 = $8;
   break;
  }
  case 8:  {
   $9 = (_iswprint($0)|0);
   $$0 = $9;
   break;
  }
  case 9:  {
   $10 = (_iswpunct($0)|0);
   $$0 = $10;
   break;
  }
  case 10:  {
   $11 = (_iswspace($0)|0);
   $$0 = $11;
   break;
  }
  case 11:  {
   $12 = (_iswupper($0)|0);
   $$0 = $12;
   break;
  }
  case 12:  {
   $13 = (_iswxdigit($0)|0);
   $$0 = $13;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 return ($$0|0);
}
function _iswgraph($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_iswspace($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_iswprint($0)|0);
  $4 = ($3|0)!=(0);
  $phitmp = $4&1;
  $5 = $phitmp;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function _iswlower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_towupper($0)|0);
 $2 = ($1|0)!=($0|0);
 $3 = $2&1;
 return ($3|0);
}
function _iswprint($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$or$cond11 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(255);
 if ($1) {
  $2 = (($0) + 1)|0;
  $3 = $2 & 127;
  $4 = ($3>>>0)>(32);
  $5 = $4&1;
  $$0 = $5;
 } else {
  $6 = ($0>>>0)<(8232);
  $7 = (($0) + -8234)|0;
  $8 = ($7>>>0)<(47062);
  $or$cond = $6 | $8;
  $9 = (($0) + -57344)|0;
  $10 = ($9>>>0)<(8185);
  $or$cond9 = $10 | $or$cond;
  if ($or$cond9) {
   $$0 = 1;
  } else {
   $11 = (($0) + -65532)|0;
   $12 = ($11>>>0)<(1048580);
   $13 = $0 & 65534;
   $14 = ($13|0)!=(65534);
   $not$or$cond11 = $14 & $12;
   $$ = $not$or$cond11&1;
   return ($$|0);
  }
 }
 return ($$0|0);
}
function _iswpunct($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(131072);
 if ($1) {
  $2 = $0 >>> 8;
  $3 = (22986 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 << 5;
  $7 = $0 >>> 3;
  $8 = $7 & 31;
  $9 = $6 | $8;
  $10 = (22986 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $0 & 7;
  $14 = $12 >>> $13;
  $15 = $14 & 1;
  $$0 = $15;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _iswspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (_wcschr(1340,$0)|0);
  $3 = ($2|0)!=(0|0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function _iswupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_towlower($0)|0);
 $2 = ($1|0)!=($0|0);
 $3 = $2&1;
 return ($3|0);
}
function _iswxdigit($0) {
 $0 = $0|0;
 var $$phitmp = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $0 | 32;
 $4 = (($3) + -97)|0;
 $5 = ($4>>>0)<(6);
 $narrow = $2 | $5;
 $$phitmp = $narrow&1;
 return ($$phitmp|0);
}
function _towlower($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___towcase($0,1)|0);
 return ($1|0);
}
function ___towcase($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$06284 = 0, $$16383 = 0, $$2 = 0, $$neg75 = 0, $$neg77 = 0, $$neg78 = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond65 = 0, $or$cond67 = 0, $or$cond69 = 0, $or$cond71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 1;
 $3 = (($2) + -1)|0;
 $4 = (($1) + -1)|0;
 $5 = (_iswalpha($0)|0);
 $6 = ($5|0)==(0);
 $7 = (($0) + -1536)|0;
 $8 = ($7>>>0)<(2560);
 $or$cond65 = $8 | $6;
 $9 = (($0) + -11776)|0;
 $10 = ($9>>>0)<(30784);
 $or$cond67 = $10 | $or$cond65;
 $11 = (($0) + -43008)|0;
 $12 = ($11>>>0)<(22272);
 $or$cond69 = $12 | $or$cond67;
 L1: do {
  if ($or$cond69) {
   $$2 = $0;
  } else {
   $13 = ($1|0)!=(0);
   $14 = (($0) + -4256)|0;
   $15 = ($14>>>0)<(46);
   $or$cond71 = $13 & $15;
   if ($or$cond71) {
    $16 = ($0|0)>(4293);
    if ($16) {
     switch ($0|0) {
     case 4295: case 4301:  {
      break;
     }
     default: {
      $$2 = $0;
      break L1;
     }
     }
    }
    $17 = (($0) + 7264)|0;
    $$2 = $17;
    break;
   }
   $$not = $13 ^ 1;
   $18 = (($0) + -11520)|0;
   $19 = ($18>>>0)<(38);
   $or$cond = $19 & $$not;
   if ($or$cond) {
    $20 = (($0) + -7264)|0;
    $$2 = $20;
    break;
   } else {
    $$06284 = 0;
   }
   while(1) {
    $27 = (((2072 + ($$06284<<2)|0)) + 3|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = (2072 + ($$06284<<2)|0);
    $30 = HEAP16[$29>>1]|0;
    $31 = $30&65535;
    $32 = (((2072 + ($$06284<<2)|0)) + 2|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33 << 24 >> 24;
    $35 = $4 & $34;
    $$neg75 = (($0) - ($31))|0;
    $36 = (($$neg75) - ($35))|0;
    $37 = $28&255;
    $38 = ($36>>>0)<($37>>>0);
    $22 = (($$06284) + 1)|0;
    if ($38) {
     label = 11;
     break;
    }
    $21 = ($22|0)==(61);
    if ($21) {
     break;
    } else {
     $$06284 = $22;
    }
   }
   if ((label|0) == 11) {
    $39 = ($33<<24>>24)==(1);
    if ($39) {
     $40 = (($1) + ($0))|0;
     $41 = $$neg75 & 1;
     $42 = (($40) - ($41))|0;
     $$2 = $42;
     break;
    } else {
     $43 = Math_imul($3, $34)|0;
     $44 = (($43) + ($0))|0;
     $$2 = $44;
     break;
    }
   }
   $23 = (1 - ($1))|0;
   $24 = (1584 + ($23<<1)|0);
   $25 = HEAP16[$24>>1]|0;
   $26 = ($25<<16>>16)==(0);
   L20: do {
    if (!($26)) {
     $$16383 = 0;$46 = $25;
     while(1) {
      $45 = $46&65535;
      $47 = ($45|0)==($0|0);
      if ($47) {
       break;
      }
      $51 = (($$16383) + 1)|0;
      $52 = ((1584 + ($51<<2)|0) + ($23<<1)|0);
      $53 = HEAP16[$52>>1]|0;
      $54 = ($53<<16>>16)==(0);
      if ($54) {
       break L20;
      } else {
       $$16383 = $51;$46 = $53;
      }
     }
     $48 = ((1584 + ($$16383<<2)|0) + ($1<<1)|0);
     $49 = HEAP16[$48>>1]|0;
     $50 = $49&65535;
     $$2 = $50;
     break L1;
    }
   } while(0);
   $$neg77 = ($1*40)|0;
   $$neg78 = (($0) + -66600)|0;
   $55 = (($$neg78) + ($$neg77))|0;
   $56 = ($55>>>0)<(40);
   $57 = (($0) + -40)|0;
   $58 = ($1*80)|0;
   $59 = (($57) + ($58))|0;
   $$ = $56 ? $59 : $0;
   return ($$|0);
  }
 } while(0);
 return ($$2|0);
}
function _wcschr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$09 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_wcslen($0)|0);
  $4 = (($0) + ($3<<2)|0);
  $$0 = $4;
 } else {
  $$09 = $0;
  while(1) {
   $5 = HEAP32[$$09>>2]|0;
   $6 = ($5|0)==(0);
   $7 = ($5|0)==($1|0);
   $or$cond = $6 | $7;
   $8 = ((($$09)) + 4|0);
   if ($or$cond) {
    break;
   } else {
    $$09 = $8;
   }
  }
  $9 = ($5|0)!=(0);
  $10 = $9 ? $$09 : 0;
  $$0 = $10;
 }
 return ($$0|0);
}
function _wcslen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _towupper($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___towcase($0,0)|0);
 return ($1|0);
}
function _wctype($0) {
 $0 = $0|0;
 var $$01113 = 0, $$012 = 0, $$014 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $$01113 = 1;$$014 = 26154;$3 = 97;
 while(1) {
  $2 = ($1<<24>>24)==($3<<24>>24);
  if ($2) {
   $4 = (_strcmp($0,$$014)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$012 = $$01113;
    break;
   }
  }
  $6 = (($$01113) + 1)|0;
  $7 = ((($$014)) + 6|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $$012 = 0;
   break;
  } else {
   $$01113 = $6;$$014 = $7;$3 = $8;
  }
 }
 return ($$012|0);
}
function _closedir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_close($1)|0);
 _free($0);
 return ($2|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_dummy_737($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-4);
 $$ = $3 ? 0 : $2;
 $4 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($4|0);
}
function _opendir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_open($0,589824,$vararg_buffer)|0);
 $2 = ($1|0)<(0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_calloc(1,2072)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    HEAP32[$vararg_buffer1>>2] = $1;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$3>>2] = $1;
    $$0 = $3;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0;
 var $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $or$cond14 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 32|0;
 $3 = $1 & 4194368;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $varargs;
  $arglist_current = HEAP32[$2>>2]|0;
  $5 = $arglist_current;
  $6 = ((0) + 4|0);
  $expanded2 = $6;
  $expanded = (($expanded2) - 1)|0;
  $7 = (($5) + ($expanded))|0;
  $8 = ((0) + 4|0);
  $expanded6 = $8;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $9 = $7 & $expanded4;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $arglist_next = ((($10)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $$0 = $11;
 }
 $12 = $0;
 $13 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$0;
 $14 = (___syscall5(5,($vararg_buffer|0))|0);
 $15 = ($14|0)<(0);
 $16 = $1 & 524288;
 $17 = ($16|0)==(0);
 $or$cond14 = $17 | $15;
 if (!($or$cond14)) {
  HEAP32[$vararg_buffer3>>2] = $14;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $18 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($18|0);
}
function _readdir($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 L1: do {
  if ($5) {
   $14 = $2;
   label = 6;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($0)) + 24|0);
   $8 = $7;
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $8;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $9 = (___syscall220(220,($vararg_buffer|0))|0);
   $10 = ($9|0)<(1);
   if (!($10)) {
    HEAP32[$3>>2] = $9;
    HEAP32[$1>>2] = 0;
    $14 = 0;
    label = 6;
    break;
   }
   switch ($9|0) {
   case 0: case -2:  {
    $$1 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $11 = (0 - ($9))|0;
   $12 = (___errno_location()|0);
   HEAP32[$12>>2] = $11;
   $$1 = 0;
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = (((($0)) + 24|0) + ($14)|0);
  $15 = ((($13)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($14) + ($17))|0;
  HEAP32[$1>>2] = $18;
  $19 = ((($13)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$1 = $13;
 }
 STACKTOP = sp;return ($$1|0);
}
function _readdir_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 16|0);
 ___lock(($5|0));
 $6 = (___errno_location()|0);
 HEAP32[$6>>2] = 0;
 $7 = (_readdir($0)|0);
 $8 = (___errno_location()|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = (___errno_location()|0);
  HEAP32[$11>>2] = $4;
  $12 = ($7|0)==(0|0);
  if ($12) {
   $$017 = 0;
  } else {
   $13 = ((($7)) + 8|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   (_memcpy(($1|0),($7|0),($15|0))|0);
   $$017 = $1;
  }
  ___unlock(($5|0));
  HEAP32[$2>>2] = $$017;
  $$0 = 0;
 } else {
  ___unlock(($5|0));
  $$0 = $9;
 }
 return ($$0|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$2 = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$43 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $42 = ($43|0)==(1);
    $or$cond = $41 & $42;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     }
    } else {
     $46 = ($$2|0)<(2);
     if (!($46)) {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169 = $60;$$2 = $49;$43 = $59;
      continue;
     }
    }
    $47 = (_pntz($5)|0);
    _shr($5,$47);
    $48 = (($47) + ($$2))|0;
    $$pre$pre = HEAP32[$5>>2]|0;
    $$pre76 = (($$169) + ($12)|0);
    $$169 = $$pre76;$$2 = $48;$43 = $$pre$pre;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$029$be = 0, $$02932 = 0, $$030$be = 0, $$03031 = 0, $$033 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02932 = $0;$$03031 = $3;$$033 = 1;$14 = $0;
   while(1) {
    $8 = (($$02932) + ($7)|0);
    $9 = (($$03031) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 15]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 15]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$033;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 15]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($$033) + 1)|0;
    $22 = (($5) + ($$033<<2)|0);
    if ($20) {
     HEAP32[$22>>2] = $13;
     $23 = (($$03031) + -1)|0;
     $$029$be = $13;$$030$be = $23;
    } else {
     HEAP32[$22>>2] = $8;
     $$029$be = $8;$$030$be = $9;
    }
    $24 = ($$030$be|0)>(1);
    if (!($24)) {
     $$0$lcssa = $21;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02932 = $$029$be;$$03031 = $$030$be;$$033 = $21;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 15]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 15]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 15]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 15]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l_762($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l_762($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $$ = $9 ? 0 : $8;
  return ($$|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l_762($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $5 & 1;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     (_memcpy(($10|0),($9|0),($8|0))|0);
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      (_memcpy(($12|0),($15|0),($8|0))|0);
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (26227 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (26236 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $80 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $80 = $78;
      }
      $79 = ($80|0)==(40);
      if ($79) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0, $$pre$phi201Z2D = 0.0, $$pre200 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond4 = 0, $or$cond6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$51 = 0;$53 = 0;$95 = 0;$97 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $41 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $41 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $40 = ($41|0)==(48);
    if ($40) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $41;$$2144 = 1;$51 = 0;$53 = 0;$95 = $38;$97 = $39;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$51 = 0;$53 = 0;$95 = 0;$97 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $$pre = $$2 | 32;
  if ($43) {
   label = 20;
  } else {
   $44 = (($$pre) + -97)|0;
   $45 = ($44>>>0)<(6);
   $46 = ($$2|0)==(46);
   $or$cond6 = $46 | $45;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
   if ($46) {
    $47 = ($$0146|0)==(0);
    if ($47) {
     $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$211 = $53;$212 = $51;$213 = $53;$214 = $51;
    } else {
     $$2$lcssa = 46;
     break;
    }
   } else {
    label = 20;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   $48 = ($$2|0)>(57);
   $49 = (($$pre) + -87)|0;
   $$0133 = $48 ? $49 : $42;
   $50 = ($51|0)<(0);
   $52 = ($53>>>0)<(8);
   $54 = ($51|0)==(0);
   $55 = $54 & $52;
   $56 = $50 | $55;
   do {
    if ($56) {
     $57 = $$0159 << 4;
     $58 = (($$0133) + ($57))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $58;
    } else {
     $59 = ($51|0)<(0);
     $60 = ($53>>>0)<(14);
     $61 = ($51|0)==(0);
     $62 = $61 & $60;
     $63 = $59 | $62;
     if ($63) {
      $64 = (+($$0133|0));
      $65 = $$0152 * 0.0625;
      $66 = $65 * $64;
      $67 = $$0155 + $66;
      $$1149 = $$0148;$$1153 = $65;$$1156 = $67;$$1160 = $$0159;
      break;
     } else {
      $68 = ($$0133|0)==(0);
      $69 = ($$0148|0)!=(0);
      $or$cond = $69 | $68;
      $70 = $$0152 * 0.5;
      $71 = $$0155 + $70;
      $$0155$ = $or$cond ? $$0155 : $71;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $72 = (_i64Add(($53|0),($51|0),1,0)|0);
   $73 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$211 = $95;$212 = $97;$213 = $72;$214 = $73;
  }
  $74 = HEAP32[$5>>2]|0;
  $75 = HEAP32[$7>>2]|0;
  $76 = ($74>>>0)<($75>>>0);
  if ($76) {
   $77 = ((($74)) + 1|0);
   HEAP32[$5>>2] = $77;
   $78 = HEAP8[$74>>0]|0;
   $79 = $78&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $79;$$2144 = $$3145;$51 = $214;$53 = $213;$95 = $211;$97 = $212;
   continue;
  } else {
   $80 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $80;$$2144 = $$3145;$51 = $214;$53 = $213;$95 = $211;$97 = $212;
   continue;
  }
 }
 $81 = ($$2144|0)==(0);
 do {
  if ($81) {
   $82 = HEAP32[$7>>2]|0;
   $83 = ($82|0)==(0|0);
   if (!($83)) {
    $84 = HEAP32[$5>>2]|0;
    $85 = ((($84)) + -1|0);
    HEAP32[$5>>2] = $85;
   }
   $86 = ($4|0)==(0);
   if ($86) {
    ___shlim($0,0);
   } else {
    if (!($83)) {
     $87 = HEAP32[$5>>2]|0;
     $88 = ((($87)) + -1|0);
     HEAP32[$5>>2] = $88;
    }
    $89 = ($$0146|0)==(0);
    $brmerge = $89 | $83;
    if (!($brmerge)) {
     $90 = HEAP32[$5>>2]|0;
     $91 = ((($90)) + -1|0);
     HEAP32[$5>>2] = $91;
    }
   }
   $92 = (+($3|0));
   $93 = $92 * 0.0;
   $$0165 = $93;
  } else {
   $94 = ($$0146|0)==(0);
   $96 = $94 ? $53 : $95;
   $98 = $94 ? $51 : $97;
   $99 = ($51|0)<(0);
   $100 = ($53>>>0)<(8);
   $101 = ($51|0)==(0);
   $102 = $101 & $100;
   $103 = $99 | $102;
   if ($103) {
    $$3162183 = $$0159;$105 = $53;$106 = $51;
    while(1) {
     $104 = $$3162183 << 4;
     $107 = (_i64Add(($105|0),($106|0),1,0)|0);
     $108 = tempRet0;
     $109 = ($106|0)<(0);
     $110 = ($105>>>0)<(7);
     $111 = ($106|0)==(0);
     $112 = $111 & $110;
     $113 = $109 | $112;
     if ($113) {
      $$3162183 = $104;$105 = $107;$106 = $108;
     } else {
      $$3162$lcssa = $104;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $114 = $$2$lcssa | 32;
   $115 = ($114|0)==(112);
   if ($115) {
    $116 = (_scanexp($0,$4)|0);
    $117 = tempRet0;
    $118 = ($116|0)==(0);
    $119 = ($117|0)==(-2147483648);
    $120 = $118 & $119;
    if ($120) {
     $121 = ($4|0)==(0);
     if ($121) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $122 = HEAP32[$7>>2]|0;
     $123 = ($122|0)==(0|0);
     if ($123) {
      $134 = 0;$135 = 0;
     } else {
      $124 = HEAP32[$5>>2]|0;
      $125 = ((($124)) + -1|0);
      HEAP32[$5>>2] = $125;
      $134 = 0;$135 = 0;
     }
    } else {
     $134 = $116;$135 = $117;
    }
   } else {
    $126 = HEAP32[$7>>2]|0;
    $127 = ($126|0)==(0|0);
    if ($127) {
     $134 = 0;$135 = 0;
    } else {
     $128 = HEAP32[$5>>2]|0;
     $129 = ((($128)) + -1|0);
     HEAP32[$5>>2] = $129;
     $134 = 0;$135 = 0;
    }
   }
   $130 = (_bitshift64Shl(($96|0),($98|0),2)|0);
   $131 = tempRet0;
   $132 = (_i64Add(($130|0),($131|0),-32,-1)|0);
   $133 = tempRet0;
   $136 = (_i64Add(($132|0),($133|0),($134|0),($135|0))|0);
   $137 = tempRet0;
   $138 = ($$3162$lcssa|0)==(0);
   if ($138) {
    $139 = (+($3|0));
    $140 = $139 * 0.0;
    $$0165 = $140;
    break;
   }
   $141 = (0 - ($2))|0;
   $142 = ($141|0)<(0);
   $143 = $142 << 31 >> 31;
   $144 = ($137|0)>($143|0);
   $145 = ($136>>>0)>($141>>>0);
   $146 = ($137|0)==($143|0);
   $147 = $146 & $145;
   $148 = $144 | $147;
   if ($148) {
    $149 = (___errno_location()|0);
    HEAP32[$149>>2] = 34;
    $150 = (+($3|0));
    $151 = $150 * 1.7976931348623157E+308;
    $152 = $151 * 1.7976931348623157E+308;
    $$0165 = $152;
    break;
   }
   $153 = (($2) + -106)|0;
   $154 = ($153|0)<(0);
   $155 = $154 << 31 >> 31;
   $156 = ($137|0)<($155|0);
   $157 = ($136>>>0)<($153>>>0);
   $158 = ($137|0)==($155|0);
   $159 = $158 & $157;
   $160 = $156 | $159;
   if ($160) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0165 = $165;
    break;
   }
   $161 = ($$3162$lcssa|0)>(-1);
   if ($161) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$170 = $136;$171 = $137;
    while(1) {
     $166 = !($$3158179 >= 0.5);
     $167 = $$4163178 << 1;
     $168 = $$3158179 + -1.0;
     $not$ = $166 ^ 1;
     $169 = $not$&1;
     $$5164 = $167 | $169;
     $$pn = $166 ? $$3158179 : $168;
     $$4 = $$3158179 + $$pn;
     $172 = (_i64Add(($170|0),($171|0),-1,-1)|0);
     $173 = tempRet0;
     $174 = ($$5164|0)>(-1);
     if ($174) {
      $$3158179 = $$4;$$4163178 = $$5164;$170 = $172;$171 = $173;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$181 = $172;$182 = $173;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$181 = $136;$182 = $137;
   }
   $175 = ($1|0)<(0);
   $176 = $175 << 31 >> 31;
   $177 = ($2|0)<(0);
   $178 = $177 << 31 >> 31;
   $179 = (_i64Subtract(32,0,($2|0),($178|0))|0);
   $180 = tempRet0;
   $183 = (_i64Add(($179|0),($180|0),($181|0),($182|0))|0);
   $184 = tempRet0;
   $185 = ($184|0)<($176|0);
   $186 = ($183>>>0)<($1>>>0);
   $187 = ($184|0)==($176|0);
   $188 = $187 & $186;
   $189 = $185 | $188;
   if ($189) {
    $190 = ($183|0)>(0);
    if ($190) {
     $$0166 = $183;
     label = 59;
    } else {
     $$0166170 = 0;$194 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $191 = ($$0166|0)<(53);
    $192 = (84 - ($$0166))|0;
    if ($191) {
     $$0166170 = $$0166;$194 = $192;
     label = 61;
    } else {
     $$pre200 = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phi201Z2D = $$pre200;
    }
   }
   if ((label|0) == 61) {
    $193 = (+($3|0));
    $195 = (+_scalbn(1.0,$194));
    $196 = (+_copysignl($195,$193));
    $$0151 = $196;$$0166169 = $$0166170;$$pre$phi201Z2D = $193;
   }
   $197 = ($$0166169|0)<(32);
   $198 = $$3158$lcssa != 0.0;
   $or$cond4 = $198 & $197;
   $199 = $$4163$lcssa & 1;
   $200 = ($199|0)==(0);
   $or$cond168 = $200 & $or$cond4;
   $201 = $or$cond168&1;
   $$6 = (($$4163$lcssa) + ($201))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $202 = (+($$6>>>0));
   $203 = $$pre$phi201Z2D * $202;
   $204 = $$0151 + $203;
   $205 = $$5 * $$pre$phi201Z2D;
   $206 = $205 + $204;
   $207 = $206 - $$0151;
   $208 = $207 != 0.0;
   if (!($208)) {
    $209 = (___errno_location()|0);
    HEAP32[$209>>2] = 34;
   }
   $210 = (+_scalbnl($207,$181));
   $$0165 = $210;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0;
 var $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$413 = 0, $$423 = 0, $$4349493 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$neg440 = 0, $$neg441 = 0, $$pre = 0, $$pre551 = 0;
 var $$promoted = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0;
 var $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond420 = 0, $or$cond420$not = 0, $or$cond421 = 0, $or$cond424 = 0, $or$cond5 = 0;
 var $or$cond579 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$368 = 0;$369 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$368 = $27;$369 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$368 = 0;$369 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341511 = 0;$$0345510 = 0;$$0401507 = 0;$$1394509 = $$0393;$$3399508 = $$2398;$$3512 = $$2;$370 = $39;$371 = $37;$372 = $368;$373 = $369;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($370) {
      $cond = ($$1394509|0)==(0);
      if ($cond) {
       $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = 1;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $44;$375 = $45;$376 = $44;$377 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345510|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3512|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = $$1394509;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341511;$$2347 = $$0345510;$$2395 = $$1394509;$$2403 = $$0401507;$$4400 = $$3399508;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401507;
      $49 = ($$0341511|0)==(0);
      $$pre551 = (($6) + ($$0345510<<2)|0);
      if ($49) {
       $$sink = $371;
      } else {
       $50 = HEAP32[$$pre551>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3512) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre551>>2] = $$sink;
      $54 = (($$0341511) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($$0345510) + ($56))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394509;$$2403 = $$$0401;$$4400 = 1;$374 = $372;$375 = $373;$376 = $46;$377 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341511 = $$2343;$$0345510 = $$2347;$$0401507 = $$2403;$$1394509 = $$2395;$$3399508 = $$4400;$$3512 = $$3$be;$370 = $68;$371 = $66;$372 = $374;$373 = $375;$44 = $376;$45 = $377;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$71 = $374;$72 = $376;$74 = $375;$75 = $377;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399508|0)!=(0);
   $$0341463 = $$0341511;$$0345467 = $$0345510;$$0401473 = $$0401507;$378 = $44;$379 = $45;$380 = $372;$381 = $373;$382 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$71 = $368;$72 = 0;$74 = $369;$75 = 0;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $73 = $70 ? $72 : $71;
   $76 = $70 ? $75 : $74;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$378 = $72;$379 = $75;$380 = $73;$381 = $76;$382 = $77;
     label = 37;
     break;
    } else {
     $$0341462 = $$0341$lcssa;$$0345466 = $$0345$lcssa;$$0401472 = $$0401$lcssa;$383 = $72;$384 = $75;$385 = $77;$386 = $73;$387 = $76;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($73|0),($76|0))|0);
   $93 = tempRet0;
   $$0341461 = $$0341$lcssa;$$0345465 = $$0345$lcssa;$$0401471 = $$0401$lcssa;$105 = $92;$106 = $72;$108 = $93;$109 = $75;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341462 = $$0341463;$$0345466 = $$0345467;$$0401472 = $$0401473;$383 = $378;$384 = $379;$385 = $382;$386 = $380;$387 = $381;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($382) {
    $$0341461 = $$0341463;$$0345465 = $$0345467;$$0401471 = $$0401473;$105 = $380;$106 = $378;$108 = $381;$109 = $379;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($385) {
   $$0341461 = $$0341462;$$0345465 = $$0345466;$$0401471 = $$0401472;$105 = $386;$106 = $383;$108 = $387;$109 = $384;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $104 = ($105|0)==($106|0);
   $107 = ($108|0)==($109|0);
   $110 = $104 & $107;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($108|0)>($124|0);
   $126 = ($105>>>0)>($122>>>0);
   $127 = ($108|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($108|0)<($136|0);
   $138 = ($105>>>0)<($134>>>0);
   $139 = ($108|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341461|0)==(0);
   if ($146) {
    $$3348 = $$0345465;
   } else {
    $147 = ($$0341461|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345465<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344501 = $$0341461;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344501) + 1)|0;
      $152 = ($$3344501|0)<(8);
      if ($152) {
       $$3344501 = $151;$150 = $149;
      } else {
       break;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $153 = (($$0345465) + 1)|0;
    $$3348 = $153;
   }
   $154 = ($$0401471|0)<(9);
   if ($154) {
    $155 = ($$0401471|0)<=($105|0);
    $156 = ($105|0)<(18);
    $or$cond5 = $155 & $156;
    if ($or$cond5) {
     $157 = ($105|0)==(9);
     if ($157) {
      $158 = (+($4|0));
      $159 = HEAP32[$6>>2]|0;
      $160 = (+($159>>>0));
      $161 = $158 * $160;
      $$1 = $161;
      break;
     }
     $162 = ($105|0)<(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $167 = (8 - ($105))|0;
      $168 = (1428 + ($167<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (+($169|0));
      $171 = $166 / $170;
      $$1 = $171;
      break;
     }
     $$neg440 = Math_imul($105, -3)|0;
     $$neg441 = (($2) + 27)|0;
     $172 = (($$neg441) + ($$neg440))|0;
     $173 = ($172|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $174 = $$pre >>> $172;
     $175 = ($174|0)==(0);
     $or$cond579 = $173 | $175;
     if ($or$cond579) {
      $176 = (+($4|0));
      $177 = (+($$pre>>>0));
      $178 = $176 * $177;
      $179 = (($105) + -10)|0;
      $180 = (1428 + ($179<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (+($181|0));
      $183 = $178 * $182;
      $$1 = $183;
      break;
     }
    }
   }
   $184 = (($105|0) % 9)&-1;
   $185 = ($184|0)==(0);
   if ($185) {
    $$0380$ph = 0;$$1373$ph446 = $$3348;$$2352$ph447 = 0;$$2387$ph445 = $105;
   } else {
    $186 = ($105|0)>(-1);
    $187 = (($184) + 9)|0;
    $188 = $186 ? $184 : $187;
    $189 = (8 - ($188))|0;
    $190 = (1428 + ($189<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ($$3348|0)==(0);
    if ($192) {
     $$0350$lcssa553 = 0;$$0372 = 0;$$0385$lcssa552 = $105;
    } else {
     $193 = (1000000000 / ($191|0))&-1;
     $$0340494 = 0;$$0350492 = 0;$$0385491 = $105;$$4349493 = 0;
     while(1) {
      $194 = (($6) + ($$4349493<<2)|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = (($195>>>0) % ($191>>>0))&-1;
      $197 = (($195>>>0) / ($191>>>0))&-1;
      $198 = (($197) + ($$0340494))|0;
      HEAP32[$194>>2] = $198;
      $199 = Math_imul($193, $196)|0;
      $200 = ($$4349493|0)==($$0350492|0);
      $201 = ($198|0)==(0);
      $or$cond418 = $200 & $201;
      $202 = (($$0350492) + 1)|0;
      $203 = $202 & 127;
      $204 = (($$0385491) + -9)|0;
      $$$0385 = $or$cond418 ? $204 : $$0385491;
      $$$0350 = $or$cond418 ? $203 : $$0350492;
      $205 = (($$4349493) + 1)|0;
      $206 = ($205|0)==($$3348|0);
      if ($206) {
       break;
      } else {
       $$0340494 = $199;$$0350492 = $$$0350;$$0385491 = $$$0385;$$4349493 = $205;
      }
     }
     $207 = ($199|0)==(0);
     if ($207) {
      $$0350$lcssa553 = $$$0350;$$0372 = $$3348;$$0385$lcssa552 = $$$0385;
     } else {
      $208 = (($6) + ($$3348<<2)|0);
      $209 = (($$3348) + 1)|0;
      HEAP32[$208>>2] = $199;
      $$0350$lcssa553 = $$$0350;$$0372 = $209;$$0385$lcssa552 = $$$0385;
     }
    }
    $210 = (9 - ($188))|0;
    $211 = (($210) + ($$0385$lcssa552))|0;
    $$0380$ph = 0;$$1373$ph446 = $$0372;$$2352$ph447 = $$0350$lcssa553;$$2387$ph445 = $211;
   }
   L101: while(1) {
    $212 = ($$2387$ph445|0)<(18);
    $213 = ($$2387$ph445|0)==(18);
    $214 = (($6) + ($$2352$ph447<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph446;
    while(1) {
     if (!($212)) {
      if (!($213)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph447;$$4389$ph443 = $$2387$ph445;$$6378$ph = $$1373;
       break L101;
      }
      $215 = HEAP32[$214>>2]|0;
      $216 = ($215>>>0)<(9007199);
      if (!($216)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph447;$$4389$ph443 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $217 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $217;
     while(1) {
      $$5 = $$5$in & 127;
      $218 = (($6) + ($$5<<2)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = (_bitshift64Shl(($219|0),0,29)|0);
      $221 = tempRet0;
      $222 = (_i64Add(($220|0),($221|0),($$0334|0),0)|0);
      $223 = tempRet0;
      $224 = ($223>>>0)>(0);
      $225 = ($222>>>0)>(1000000000);
      $226 = ($223|0)==(0);
      $227 = $226 & $225;
      $228 = $224 | $227;
      if ($228) {
       $229 = (___udivdi3(($222|0),($223|0),1000000000,0)|0);
       $230 = tempRet0;
       $231 = (___uremdi3(($222|0),($223|0),1000000000,0)|0);
       $232 = tempRet0;
       $$1335 = $229;$$sink419$off0 = $231;
      } else {
       $$1335 = 0;$$sink419$off0 = $222;
      }
      HEAP32[$218>>2] = $$sink419$off0;
      $233 = (($$2374) + 127)|0;
      $234 = $233 & 127;
      $235 = ($$5|0)!=($234|0);
      $236 = ($$5|0)==($$2352$ph447|0);
      $or$cond420 = $235 | $236;
      $or$cond420$not = $or$cond420 ^ 1;
      $237 = ($$sink419$off0|0)==(0);
      $or$cond421 = $237 & $or$cond420$not;
      $$3375 = $or$cond421 ? $$5 : $$2374;
      $238 = (($$5) + -1)|0;
      if ($236) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $238;
      }
     }
     $239 = (($$0380) + -29)|0;
     $240 = ($$1335|0)==(0);
     if ($240) {
      $$0380 = $239;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $241 = (($$2387$ph445) + 9)|0;
    $242 = (($$2352$ph447) + 127)|0;
    $243 = $242 & 127;
    $244 = ($243|0)==($$3375|0);
    $245 = (($$3375) + 127)|0;
    $246 = $245 & 127;
    $247 = (($$3375) + 126)|0;
    $248 = $247 & 127;
    $249 = (($6) + ($248<<2)|0);
    if ($244) {
     $250 = (($6) + ($246<<2)|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = HEAP32[$249>>2]|0;
     $253 = $252 | $251;
     HEAP32[$249>>2] = $253;
     $$4376 = $246;
    } else {
     $$4376 = $$3375;
    }
    $254 = (($6) + ($243<<2)|0);
    HEAP32[$254>>2] = $$1335;
    $$0380$ph = $239;$$1373$ph446 = $$4376;$$2352$ph447 = $243;$$2387$ph445 = $241;
   }
   L119: while(1) {
    $291 = (($$6378$ph) + 1)|0;
    $289 = $291 & 127;
    $292 = (($$6378$ph) + 127)|0;
    $293 = $292 & 127;
    $294 = (($6) + ($293<<2)|0);
    $$1381$ph557 = $$1381$ph;$$4354$ph558 = $$4354$ph;$$4389$ph = $$4389$ph443;
    while(1) {
     $267 = ($$4389$ph|0)==(18);
     $295 = ($$4389$ph|0)>(27);
     $$423 = $295 ? 9 : 1;
     $$1381 = $$1381$ph557;$$4354 = $$4354$ph558;
     while(1) {
      $$0336484 = 0;
      while(1) {
       $255 = (($$0336484) + ($$4354))|0;
       $256 = $255 & 127;
       $257 = ($256|0)==($$6378$ph|0);
       if ($257) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $258 = (($6) + ($256<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = (1460 + ($$0336484<<2)|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = ($259>>>0)<($261>>>0);
       if ($262) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $263 = ($259>>>0)>($261>>>0);
       if ($263) {
        break;
       }
       $264 = (($$0336484) + 1)|0;
       $265 = ($$0336484|0)<(1);
       if ($265) {
        $$0336484 = $264;
       } else {
        $$1337 = $264;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $266 = ($$1337|0)==(2);
       $or$cond11 = $267 & $266;
       if ($or$cond11) {
        $$0365482 = 0.0;$$4483 = 0;$$9481 = $$6378$ph;
        break L119;
       }
      }
      $268 = (($$423) + ($$1381))|0;
      $269 = ($$4354|0)==($$6378$ph|0);
      if ($269) {
       $$1381 = $268;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $270 = 1 << $$423;
     $271 = (($270) + -1)|0;
     $272 = 1000000000 >>> $$423;
     $$0332488 = 0;$$5355486 = $$4354;$$5390485 = $$4389$ph;$$6487 = $$4354;
     while(1) {
      $273 = (($6) + ($$6487<<2)|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = $274 & $271;
      $276 = $274 >>> $$423;
      $277 = (($276) + ($$0332488))|0;
      HEAP32[$273>>2] = $277;
      $278 = Math_imul($275, $272)|0;
      $279 = ($$6487|0)==($$5355486|0);
      $280 = ($277|0)==(0);
      $or$cond424 = $279 & $280;
      $281 = (($$5355486) + 1)|0;
      $282 = $281 & 127;
      $283 = (($$5390485) + -9)|0;
      $$$5390 = $or$cond424 ? $283 : $$5390485;
      $$$5355 = $or$cond424 ? $282 : $$5355486;
      $284 = (($$6487) + 1)|0;
      $285 = $284 & 127;
      $286 = ($285|0)==($$6378$ph|0);
      if ($286) {
       break;
      } else {
       $$0332488 = $278;$$5355486 = $$$5355;$$5390485 = $$$5390;$$6487 = $285;
      }
     }
     $287 = ($278|0)==(0);
     if ($287) {
      $$1381$ph557 = $268;$$4354$ph558 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $288 = ($289|0)==($$$5355|0);
     if (!($288)) {
      break;
     }
     $296 = HEAP32[$294>>2]|0;
     $297 = $296 | 1;
     HEAP32[$294>>2] = $297;
     $$1381$ph557 = $268;$$4354$ph558 = $$$5355;$$4389$ph = $$$5390;
    }
    $290 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$290>>2] = $278;
    $$1381$ph = $268;$$4354$ph = $$$5355;$$4389$ph443 = $$$5390;$$6378$ph = $289;
   }
   while(1) {
    $298 = (($$4483) + ($$4354))|0;
    $299 = $298 & 127;
    $300 = ($299|0)==($$9481|0);
    $301 = (($$9481) + 1)|0;
    $302 = $301 & 127;
    if ($300) {
     $303 = (($302) + -1)|0;
     $304 = (($6) + ($303<<2)|0);
     HEAP32[$304>>2] = 0;
     $$10 = $302;
    } else {
     $$10 = $$9481;
    }
    $305 = $$0365482 * 1.0E+9;
    $306 = (($6) + ($299<<2)|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = (+($307>>>0));
    $309 = $305 + $308;
    $310 = (($$4483) + 1)|0;
    $exitcond = ($310|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365482 = $309;$$4483 = $310;$$9481 = $$10;
    }
   }
   $311 = (+($4|0));
   $312 = $309 * $311;
   $313 = (($$1381) + 53)|0;
   $314 = (($313) - ($3))|0;
   $315 = ($314|0)<($2|0);
   $316 = ($314|0)>(0);
   $$ = $316 ? $314 : 0;
   $$0333 = $315 ? $$ : $2;
   $317 = ($$0333|0)<(53);
   if ($317) {
    $318 = (105 - ($$0333))|0;
    $319 = (+_scalbn(1.0,$318));
    $320 = (+_copysignl($319,$312));
    $321 = (53 - ($$0333))|0;
    $322 = (+_scalbn(1.0,$321));
    $323 = (+_fmodl($312,$322));
    $324 = $312 - $323;
    $325 = $320 + $324;
    $$0360 = $320;$$0361 = $323;$$1366 = $325;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $312;
   }
   $326 = (($$4354) + 2)|0;
   $327 = $326 & 127;
   $328 = ($327|0)==($$10|0);
   if ($328) {
    $$3364 = $$0361;
   } else {
    $329 = (($6) + ($327<<2)|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = ($330>>>0)<(500000000);
    do {
     if ($331) {
      $332 = ($330|0)==(0);
      if ($332) {
       $333 = (($$4354) + 3)|0;
       $334 = $333 & 127;
       $335 = ($334|0)==($$10|0);
       if ($335) {
        $$1362 = $$0361;
        break;
       }
      }
      $336 = $311 * 0.25;
      $337 = $336 + $$0361;
      $$1362 = $337;
     } else {
      $338 = ($330|0)==(500000000);
      if (!($338)) {
       $339 = $311 * 0.75;
       $340 = $339 + $$0361;
       $$1362 = $340;
       break;
      }
      $341 = (($$4354) + 3)|0;
      $342 = $341 & 127;
      $343 = ($342|0)==($$10|0);
      if ($343) {
       $344 = $311 * 0.5;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      } else {
       $346 = $311 * 0.75;
       $347 = $346 + $$0361;
       $$1362 = $347;
       break;
      }
     }
    } while(0);
    $348 = (53 - ($$0333))|0;
    $349 = ($348|0)>(1);
    if ($349) {
     $350 = (+_fmodl($$1362,1.0));
     $351 = $350 != 0.0;
     if ($351) {
      $$3364 = $$1362;
     } else {
      $352 = $$1362 + 1.0;
      $$3364 = $352;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $353 = $$1366 + $$3364;
   $354 = $353 - $$0360;
   $355 = $313 & 2147483647;
   $356 = (-2 - ($sum))|0;
   $357 = ($355|0)>($356|0);
   do {
    if ($357) {
     $358 = (+Math_abs((+$354)));
     $359 = !($358 >= 9007199254740992.0);
     $360 = $354 * 0.5;
     $not$ = $359 ^ 1;
     $361 = $not$&1;
     $$3383 = (($$1381) + ($361))|0;
     $$2367 = $359 ? $354 : $360;
     $362 = (($$3383) + 50)|0;
     $363 = ($362|0)>($7|0);
     if (!($363)) {
      $364 = ($$0333|0)!=($314|0);
      $narrow = $364 | $359;
      $$2371$v = $315 & $narrow;
      $365 = $$3364 != 0.0;
      $or$cond14 = $365 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $366 = (___errno_location()|0);
     HEAP32[$366>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $354;$$4384 = $$1381;
    }
   } while(0);
   $367 = (+_scalbnl($$3368,$$4384));
   $$1 = $367;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_273($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$101 = $92;$156 = $97;$157 = $87;$158 = $88;$99 = $91;
      while(1) {
       if ($156) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$101 = $111;$156 = $116;$157 = $106;$158 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $123 = $120;$125 = $118;
     }
    } else {
     $123 = $160;$125 = $159;
    }
    $122 = ($123>>>0)<(1048576);
    $124 = ($125>>>0)<(0);
    $126 = ($123|0)==(1048576);
    $127 = $126 & $124;
    $128 = $122 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $125;$131 = $123;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $125;$142 = $123;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_273($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function ___lctrans_cur($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_240()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (___lctrans_impl($0,$5)|0);
 return ($6|0);
}
function ___pthread_self_240() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _dprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vdprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vdprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 36|0);
 HEAP32[$4>>2] = 6;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($3)) + 48|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 60|0);
 HEAP32[$7>>2] = $0;
 $8 = ((($3)) + 75|0);
 HEAP8[$8>>0] = -1;
 $9 = ((($3)) + 76|0);
 HEAP32[$9>>2] = -1;
 $10 = (_vfprintf($3,$1,$2)|0);
 STACKTOP = sp;return ($10|0);
}
function _wrap_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___stdio_write($0,$1,$2)|0);
 return ($3|0);
}
function ___getopt_msg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[178]|0;
 $5 = (___lctrans_cur($1)|0);
 _flockfile($4);
 $6 = (_fputs($0,$4)|0);
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (_strlen($5)|0);
  $9 = (_fwrite($5,$8,1,$4)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = (_fwrite($2,1,$3,$4)|0);
   $12 = ($11|0)==($3|0);
   if ($12) {
    (_putc(10,$4)|0);
   }
  }
 }
 _funlockfile($4);
 return;
}
function _flockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ftrylockfile($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($0)) + 76|0);
  $4 = ((($0)) + 80|0);
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ($5|0)==(0);
   if (!($6)) {
    ___wait(($3|0),($4|0),($5|0),1);
   }
   $7 = (_ftrylockfile($0)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
  }
 }
 return;
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,1,$2,$1)|0);
 $4 = ($3|0)!=($2|0);
 $5 = $4 << 31 >> 31;
 return ($5|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $$;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function _putc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _funlockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  ___unlist_locked_file($0);
  HEAP32[$1>>2] = 0;
  ___unlockfile($0);
 } else {
  $4 = (($2) + -1)|0;
  HEAP32[$1>>2] = $4;
 }
 return;
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_606()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_606() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 7]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ftrylockfile($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_606()|0);
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($3|0);
 if ($6) {
  $7 = ((($0)) + 68|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(2147483647);
  if ($9) {
   $$0 = -1;
  } else {
   $10 = (($8) + 1)|0;
   HEAP32[$7>>2] = $10;
   $$0 = 0;
  }
 } else {
  $11 = HEAP32[$4>>2]|0;
  $12 = ($11|0)<(0);
  if ($12) {
   HEAP32[$4>>2] = 0;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   _a_cas($4,$3);
   $15 = ((($0)) + 68|0);
   HEAP32[$15>>2] = 1;
   $16 = ((($0)) + 112|0);
   HEAP32[$16>>2] = 0;
   $17 = ((($1)) + 232|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($0)) + 116|0);
   HEAP32[$19>>2] = $18;
   $20 = ($18|0)==(0|0);
   if (!($20)) {
    $21 = ((($18)) + 112|0);
    HEAP32[$21>>2] = $0;
   }
   HEAP32[$17>>2] = $0;
   $$0 = 0;
  } else {
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _a_cas($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$0>>2] = $1;
 }
 return;
}
function _getopt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$049 = 0, $$050 = 0, $$051 = 0, $$1 = 0, $$pre52 = 0, $$pre53 = 0, $$pre54 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = HEAP32[126]|0;
 $6 = ($5|0)==(0);
 $7 = (0)!=(0);
 $or$cond = $6 | $7;
 if ($or$cond) {
  HEAP32[6773] = 0;
  HEAP32[126] = 1;
  $9 = 1;
 } else {
  $9 = $5;
 }
 $8 = ($9|0)<($0|0);
 L4: do {
  if ($8) {
   $10 = (($1) + ($9<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   $13 = $11;
   if ($12) {
    $$0 = -1;
   } else {
    $14 = HEAP8[$11>>0]|0;
    $15 = ($14<<24>>24)==(45);
    if (!($15)) {
     $16 = HEAP8[$2>>0]|0;
     $17 = ($16<<24>>24)==(45);
     if (!($17)) {
      $$0 = -1;
      break;
     }
     $18 = (($9) + 1)|0;
     HEAP32[126] = $18;
     HEAP32[6774] = $13;
     $$0 = 1;
     break;
    }
    $19 = ((($11)) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    switch ($20<<24>>24) {
    case 0:  {
     $$0 = -1;
     break L4;
     break;
    }
    case 45:  {
     $21 = ((($11)) + 2|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if ($23) {
      $24 = (($9) + 1)|0;
      HEAP32[126] = $24;
      $$0 = -1;
      break L4;
     }
     break;
    }
    default: {
    }
    }
    $25 = HEAP32[6773]|0;
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP32[6773] = 1;
     $28 = 1;
    } else {
     $28 = $25;
    }
    $27 = (($11) + ($28)|0);
    $29 = (_mbtowc($3,$27,4)|0);
    $30 = ($29|0)<(0);
    if ($30) {
     HEAP32[$3>>2] = 65533;
     $$050 = 1;
    } else {
     $$050 = $29;
    }
    $31 = HEAP32[126]|0;
    $32 = (($1) + ($31<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[6773]|0;
    $35 = (($33) + ($34)|0);
    $36 = (($34) + ($$050))|0;
    HEAP32[6773] = $36;
    $37 = (($33) + ($36)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $40 = (($31) + 1)|0;
     HEAP32[126] = $40;
     HEAP32[6773] = 0;
    }
    $41 = HEAP8[$2>>0]|0;
    switch ($41<<24>>24) {
    case 43: case 45:  {
     $42 = ((($2)) + 1|0);
     $$049 = $42;
     break;
    }
    default: {
     $$049 = $2;
    }
    }
    HEAP32[$4>>2] = 0;
    $$051 = 0;
    while(1) {
     $43 = (($$049) + ($$051)|0);
     $44 = (_mbtowc($4,$43,4)|0);
     $45 = ($44|0)>(1);
     $$ = $45 ? $44 : 1;
     $$1 = (($$) + ($$051))|0;
     $46 = ($44|0)==(0);
     $$pre52 = HEAP32[$4>>2]|0;
     $$pre53 = HEAP32[$3>>2]|0;
     $47 = ($$pre52|0)==($$pre53|0);
     if ($46) {
      label = 23;
      break;
     }
     if ($47) {
      $75 = $$pre52;
      break;
     } else {
      $$051 = $$1;
     }
    }
    if ((label|0) == 23) {
     if ($47) {
      $75 = $$pre53;
     } else {
      $48 = HEAP8[$$049>>0]|0;
      $49 = ($48<<24>>24)!=(58);
      $50 = (1)!=(0);
      $or$cond3 = $49 & $50;
      if (!($or$cond3)) {
       $$0 = 63;
       break;
      }
      $51 = HEAP32[$1>>2]|0;
      ___getopt_msg($51,26333,$35,$$050);
      $$0 = 63;
      break;
     }
    }
    $52 = (($$049) + ($$1)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = ($53<<24>>24)==(58);
    if ($54) {
     $55 = (($$1) + 1)|0;
     $56 = (($$049) + ($55)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = ($57<<24>>24)==(58);
     do {
      if ($58) {
       HEAP32[6774] = 0;
       $$pre54 = HEAP8[$56>>0]|0;
       $66 = ($$pre54<<24>>24)!=(58);
       $67 = HEAP32[6773]|0;
       $68 = ($67|0)!=(0);
       $or$cond5 = $66 | $68;
       if ($or$cond5) {
        $74 = $67;
       } else {
        $$0 = $75;
        break L4;
       }
      } else {
       $59 = HEAP32[126]|0;
       $60 = ($59|0)<($0|0);
       if ($60) {
        $61 = HEAP32[6773]|0;
        $74 = $61;
        break;
       }
       $62 = HEAP8[$$049>>0]|0;
       $63 = ($62<<24>>24)==(58);
       if ($63) {
        $$0 = 58;
        break L4;
       }
       $64 = (1)==(0);
       if ($64) {
        $$0 = 63;
        break L4;
       }
       $65 = HEAP32[$1>>2]|0;
       ___getopt_msg($65,26277,$35,$$050);
       $$0 = 63;
       break L4;
      }
     } while(0);
     $69 = HEAP32[126]|0;
     $70 = (($69) + 1)|0;
     HEAP32[126] = $70;
     $71 = (($1) + ($69<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (($72) + ($74)|0);
     HEAP32[6774] = $73;
     HEAP32[6773] = 0;
     $$0 = $75;
    } else {
     $$0 = $75;
    }
   }
  } else {
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $$ = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = ($7<<24>>24)>(-1);
     if ($8) {
      $9 = $7&255;
      HEAP32[$$>>2] = $9;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (___pthread_self_444()|0);
     $13 = ((($12)) + 188|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     $17 = HEAP8[$1>>0]|0;
     if ($16) {
      $18 = $17 << 24 >> 24;
      $19 = $18 & 57343;
      HEAP32[$$>>2] = $19;
      $$0 = 1;
      break L1;
     }
     $20 = $17&255;
     $21 = (($20) + -194)|0;
     $22 = ($21>>>0)>(50);
     if (!($22)) {
      $23 = ((($1)) + 1|0);
      $24 = (508 + ($21<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($2>>>0)<(4);
      if ($26) {
       $27 = ($2*6)|0;
       $28 = (($27) + -6)|0;
       $29 = -2147483648 >>> $28;
       $30 = $25 & $29;
       $31 = ($30|0)==(0);
       if (!($31)) {
        break;
       }
      }
      $32 = HEAP8[$23>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $25 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if (!($39)) {
       $40 = $25 << 6;
       $41 = (($33) + -128)|0;
       $42 = $41 | $40;
       $43 = ($42|0)<(0);
       if (!($43)) {
        HEAP32[$$>>2] = $42;
        $$0 = 2;
        break L1;
       }
       $44 = ((($1)) + 2|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = (($46) + -128)|0;
       $48 = ($47>>>0)>(63);
       if (!($48)) {
        $49 = $42 << 6;
        $50 = $47 | $49;
        $51 = ($50|0)<(0);
        if (!($51)) {
         HEAP32[$$>>2] = $50;
         $$0 = 3;
         break L1;
        }
        $52 = ((($1)) + 3|0);
        $53 = HEAP8[$52>>0]|0;
        $54 = $53&255;
        $55 = (($54) + -128)|0;
        $56 = ($55>>>0)>(63);
        if (!($56)) {
         $57 = $50 << 6;
         $58 = $55 | $57;
         HEAP32[$$>>2] = $58;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $59 = (___errno_location()|0);
   HEAP32[$59>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_444() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _getopt_long($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (___getopt_long($0,$1,$2,$3,$4,0)|0);
 return ($5|0);
}
function ___getopt_long($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0454957 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre53 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond56 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[126]|0;
 $7 = ($6|0)==(0);
 $8 = (0)!=(0);
 $or$cond = $7 | $8;
 if ($or$cond) {
  HEAP32[6773] = 0;
  HEAP32[126] = 1;
  $10 = 1;
 } else {
  $10 = $6;
 }
 $9 = ($10|0)<($0|0);
 L4: do {
  if ($9) {
   $11 = (($1) + ($10<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $$1 = -1;
   } else {
    $14 = HEAP8[$2>>0]|0;
    switch ($14<<24>>24) {
    case 45: case 43:  {
     $24 = (___getopt_long_core($0,$1,$2,$3,$4,$5)|0);
     $$1 = $24;
     break L4;
     break;
    }
    default: {
     $$0454957 = $10;$16 = $12;
    }
    }
    while(1) {
     $15 = HEAP8[$16>>0]|0;
     $17 = ($15<<24>>24)==(45);
     if ($17) {
      $18 = ((($16)) + 1|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = ($19<<24>>24)==(0);
      if (!($20)) {
       break;
      }
     }
     $21 = (($$0454957) + 1)|0;
     $22 = ($21|0)<($0|0);
     if (!($22)) {
      $$1 = -1;
      break L4;
     }
     $$phi$trans$insert = (($1) + ($21<<2)|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $23 = ($$pre|0)==(0|0);
     if ($23) {
      $$1 = -1;
      break L4;
     } else {
      $$0454957 = $21;$16 = $$pre;
     }
    }
    HEAP32[126] = $$0454957;
    $25 = (___getopt_long_core($0,$1,$2,$3,$4,$5)|0);
    $26 = ($$0454957|0)>($10|0);
    if ($26) {
     $27 = HEAP32[126]|0;
     $28 = (($27) - ($$0454957))|0;
     $29 = ($28|0)>(0);
     if ($29) {
      $30 = (($27) + -1)|0;
      _permute($1,$10,$30);
      $exitcond56 = ($28|0)==(1);
      if (!($exitcond56)) {
       $33 = 1;
       while(1) {
        $$pre53 = HEAP32[126]|0;
        $31 = (($$pre53) + -1)|0;
        _permute($1,$10,$31);
        $32 = (($33) + 1)|0;
        $exitcond = ($32|0)==($28|0);
        if ($exitcond) {
         break;
        } else {
         $33 = $32;
        }
       }
      }
     }
     $34 = (($28) + ($10))|0;
     HEAP32[126] = $34;
     $$1 = $25;
    } else {
     $$1 = $25;
    }
   }
  } else {
   $$1 = -1;
  }
 } while(0);
 return ($$1|0);
}
function ___getopt_long_core($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$083105 = 0, $$086111 = 0, $$089110 = 0, $$092108 = 0, $$185$lcssa = 0, $$185104 = 0, $$18799 = 0, $$19098 = 0, $$194 = 0, $$288 = 0, $$291 = 0, $$291126 = 0, $$95 = 0, $$phi$trans$insert = 0, $$pr = 0, $$pr$lcssa = 0, $$pr102 = 0, $$pre = 0, $$pre123 = 0;
 var $$pre124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $9 = 0, $or$cond = 0, $or$cond101 = 0, $or$cond101103 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[6774] = 0;
 $6 = ($3|0)==(0|0);
 L1: do {
  if ($6) {
   label = 34;
  } else {
   $7 = HEAP32[126]|0;
   $8 = (($1) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(45);
   if ($11) {
    $12 = ($5|0)==(0);
    $$phi$trans$insert = ((($9)) + 1|0);
    $$pre = HEAP8[$$phi$trans$insert>>0]|0;
    if ($12) {
     $14 = ($$pre<<24>>24)==(45);
     if (!($14)) {
      label = 34;
      break;
     }
     $15 = ((($9)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if ($17) {
      label = 34;
      break;
     } else {
      $29 = 45;
     }
    } else {
     $13 = ($$pre<<24>>24)==(0);
     if ($13) {
      label = 34;
      break;
     } else {
      $29 = $$pre;
     }
    }
    $18 = HEAP8[$2>>0]|0;
    $19 = ($18<<24>>24)==(43);
    $20 = ($18<<24>>24)==(45);
    $$ = $19 | $20;
    $21 = $$&1;
    $22 = (($2) + ($21)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(58);
    $25 = HEAP32[$3>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     $$291126 = 0;
    } else {
     $27 = ((($9)) + 1|0);
     $28 = ($29<<24>>24)==(45);
     $30 = ((($9)) + 2|0);
     $$95 = $28 ? $30 : $27;
     $$pr102 = HEAP8[$$95>>0]|0;
     $$086111 = 0;$$089110 = 0;$$092108 = 0;$32 = $25;
     L11: while(1) {
      $31 = HEAP8[$32>>0]|0;
      $33 = ($31<<24>>24)!=(0);
      $34 = ($31<<24>>24)==($$pr102<<24>>24);
      $or$cond101103 = $33 & $34;
      if ($or$cond101103) {
       $$083105 = $32;$$185104 = $$95;
       while(1) {
        $35 = ((($$083105)) + 1|0);
        $36 = ((($$185104)) + 1|0);
        $37 = HEAP8[$35>>0]|0;
        $38 = ($37<<24>>24)!=(0);
        $$pr = HEAP8[$36>>0]|0;
        $39 = ($37<<24>>24)==($$pr<<24>>24);
        $or$cond101 = $38 & $39;
        if ($or$cond101) {
         $$083105 = $35;$$185104 = $36;
        } else {
         $$185$lcssa = $36;$$pr$lcssa = $$pr;$41 = $37;
         break;
        }
       }
      } else {
       $$185$lcssa = $$95;$$pr$lcssa = $$pr102;$41 = $31;
      }
      switch ($$pr$lcssa<<24>>24) {
      case 61: case 0:  {
       $40 = ($41<<24>>24)==(0);
       $42 = (($$089110) + 1)|0;
       if ($40) {
        $$288 = $$092108;$$291 = 1;
        break L11;
       } else {
        $$18799 = $$092108;$$19098 = $42;
       }
       break;
      }
      default: {
       $$18799 = $$086111;$$19098 = $$089110;
      }
      }
      $43 = (($$092108) + 1)|0;
      $44 = (($3) + ($43<<4)|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$288 = $$18799;$$291 = $$19098;
       break;
      } else {
       $$086111 = $$18799;$$089110 = $$19098;$$092108 = $43;$32 = $45;
      }
     }
     $47 = ($$291|0)==(1);
     if ($47) {
      $48 = (($7) + 1)|0;
      HEAP32[126] = $48;
      $49 = (($3) + ($$288<<4)|0);
      $50 = (((($3) + ($$288<<4)|0)) + 12|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = HEAP8[$$185$lcssa>>0]|0;
      $53 = ($52<<24>>24)==(61);
      $54 = (((($3) + ($$288<<4)|0)) + 4|0);
      $55 = HEAP32[$54>>2]|0;
      do {
       if ($53) {
        $56 = ($55|0)==(0);
        if (!($56)) {
         $62 = ((($$185$lcssa)) + 1|0);
         HEAP32[6774] = $62;
         break;
        }
        $57 = $24 ^ 1;
        $58 = (1)!=(0);
        $or$cond = $58 & $57;
        if (!($or$cond)) {
         $$194 = 63;
         break L1;
        }
        $59 = HEAP32[$1>>2]|0;
        $60 = HEAP32[$49>>2]|0;
        $61 = (_strlen($60)|0);
        ___getopt_msg($59,26240,$60,$61);
        $$194 = 63;
        break L1;
       } else {
        $63 = ($55|0)==(1);
        if ($63) {
         $64 = (($1) + ($48<<2)|0);
         $65 = HEAP32[$64>>2]|0;
         HEAP32[6774] = $65;
         $66 = ($65|0)==(0|0);
         if (!($66)) {
          $71 = (($7) + 2)|0;
          HEAP32[126] = $71;
          break;
         }
         if ($24) {
          $$194 = 58;
          break L1;
         }
         $67 = (1)==(0);
         if ($67) {
          $$194 = 63;
          break L1;
         }
         $68 = HEAP32[$1>>2]|0;
         $69 = HEAP32[$49>>2]|0;
         $70 = (_strlen($69)|0);
         ___getopt_msg($68,26277,$69,$70);
         $$194 = 63;
         break L1;
        }
       }
      } while(0);
      $72 = ($4|0)==(0|0);
      if ($72) {
       $76 = $51;
      } else {
       HEAP32[$4>>2] = $$288;
       $$pre124 = HEAP32[$50>>2]|0;
       $76 = $$pre124;
      }
      $73 = (((($3) + ($$288<<4)|0)) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ($74|0)==(0|0);
      if ($75) {
       $$194 = $76;
       break;
      }
      HEAP32[$74>>2] = $76;
      $$194 = 0;
      break;
     } else {
      $$291126 = $$291;
     }
    }
    $77 = ($29<<24>>24)==(45);
    if ($77) {
     $78 = $24 ^ 1;
     $79 = (1)!=(0);
     $or$cond3 = $79 & $78;
     $80 = ((($9)) + 2|0);
     if ($or$cond3) {
      $81 = ($$291126|0)!=(0);
      $82 = $81 ? 26309 : 26333;
      $83 = HEAP32[$1>>2]|0;
      $84 = (_strlen($80)|0);
      ___getopt_msg($83,$82,$80,$84);
      $$pre123 = HEAP32[126]|0;
      $86 = $$pre123;
     } else {
      $86 = $7;
     }
     $85 = (($86) + 1)|0;
     HEAP32[126] = $85;
     $$194 = 63;
    } else {
     label = 34;
    }
   } else {
    label = 34;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $87 = (_getopt($0,$1,$2)|0);
  $$194 = $87;
 }
 return ($$194|0);
}
function _permute($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$018 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($0) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($1|0);
 if ($5) {
  $$018 = $2;
  while(1) {
   $6 = (($$018) + -1)|0;
   $7 = (($0) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($0) + ($$018<<2)|0);
   HEAP32[$9>>2] = $8;
   $10 = ($6|0)>($1|0);
   if ($10) {
    $$018 = $6;
   } else {
    break;
   }
  }
 }
 $11 = (($0) + ($1<<2)|0);
 HEAP32[$11>>2] = $4;
 return;
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall195(195,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _getpid() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (___syscall20(20,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(26357,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $$0$ = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $$0$ | 524288;
 $$2 = $9 ? $$0$ : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $$2$ = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $$2$ | 512;
 $$4 = $13 ? $14 : $$2$;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $$$4 = $15 ? $16 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(26357,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1156)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,124)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 132|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 7;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 2;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 3;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 1;
   $40 = HEAP32[(27032)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((27104|0));
 return (27112|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((27104|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 1]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $29 = ($30|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[242]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[242]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 7]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 7]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $$old2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $16 = $6;
 } else {
  $16 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 if ($8) {
  $9 = ((($2)) + 74|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (($11) + 255)|0;
  $13 = $12 | $11;
  $14 = $13&255;
  HEAP8[$9>>0] = $14;
  $15 = ($16|0)==(0);
  if (!($15)) {
   ___unlockfile($2);
  }
  $17 = ($7|0)==(0);
  if ($17) {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($7|0)==(0);
  L11: do {
   if ($$old2) {
    $$1 = $0;
    label = 17;
   } else {
    $18 = ((($2)) + 4|0);
    $19 = ((($2)) + 8|0);
    $$063 = $7;$$064 = $0;
    while(1) {
     $20 = HEAP32[$18>>2]|0;
     $21 = HEAP32[$19>>2]|0;
     $22 = $20;
     $23 = (($21) - ($22))|0;
     $24 = (_memchr($20,10,$23)|0);
     $25 = ($24|0)==(0|0);
     $26 = $24;
     $27 = (1 - ($22))|0;
     $28 = (($27) + ($26))|0;
     $29 = $25 ? $23 : $28;
     $30 = ($29>>>0)<($$063>>>0);
     $31 = $30 ? $29 : $$063;
     (_memcpy(($$064|0),($20|0),($31|0))|0);
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($31)|0);
     HEAP32[$18>>2] = $33;
     $34 = (($$064) + ($31)|0);
     $35 = (($$063) - ($31))|0;
     $36 = ($35|0)!=(0);
     $or$cond = $25 & $36;
     if (!($or$cond)) {
      $$1 = $34;
      label = 17;
      break L11;
     }
     $37 = HEAP32[$19>>2]|0;
     $38 = ($33>>>0)<($37>>>0);
     if ($38) {
      $39 = ((($33)) + 1|0);
      HEAP32[$18>>2] = $39;
      $40 = HEAP8[$33>>0]|0;
      $41 = $40&255;
      $50 = $41;
     } else {
      $42 = (___uflow($2)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      } else {
       $50 = $42;
      }
     }
     $48 = (($35) + -1)|0;
     $49 = $50&255;
     $51 = ((($34)) + 1|0);
     HEAP8[$34>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)!=(10);
     $53 = ($48|0)!=(0);
     $or$cond3 = $53 & $52;
     if ($or$cond3) {
      $$063 = $48;$$064 = $51;
     } else {
      $$1 = $51;
      label = 17;
      break L11;
     }
    }
    $44 = ($34|0)==($0|0);
    if ($44) {
     $$06266 = 0;
    } else {
     $45 = HEAP32[$2>>2]|0;
     $46 = $45 & 16;
     $47 = ($46|0)==(0);
     if ($47) {
      $$06266 = 0;
     } else {
      $$1 = $34;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $54 = ($0|0)==(0|0);
   if ($54) {
    $$06266 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$06266 = $0;
   }
  }
  $55 = ($16|0)==(0);
  if ($55) {
   $$0 = $$06266;
  } else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return ($$0|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _setlogmask($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((27116|0));
 $1 = HEAP32[367]|0;
 $2 = ($0|0)==(0);
 if (!($2)) {
  HEAP32[367] = $0;
 }
 ___unlock((27116|0));
 return ($1|0);
}
function _closelog() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 (_pthread_setcancelstate(1,($0|0))|0);
 ___lock((27116|0));
 $1 = HEAP32[368]|0;
 (_close($1)|0);
 HEAP32[368] = -1;
 ___unlock((27116|0));
 $2 = HEAP32[$0>>2]|0;
 (_pthread_setcancelstate(($2|0),(0|0))|0);
 STACKTOP = sp;return;
}
function _openlog($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 (_pthread_setcancelstate(1,($3|0))|0);
 ___lock((27116|0));
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$sink = 28168;
 } else {
  $5 = (_strnlen($0,31)|0);
  (_memcpy((28168|0),($0|0),($5|0))|0);
  $6 = (28168 + ($5)|0);
  $$sink = $6;
 }
 HEAP8[$$sink>>0] = 0;
 HEAP32[6781] = $1;
 HEAP32[369] = $2;
 $7 = $1 & 8;
 $8 = ($7|0)!=(0);
 $9 = HEAP32[368]|0;
 $10 = ($9|0)<(0);
 $or$cond = $8 & $10;
 if ($or$cond) {
  ___openlog();
 }
 ___unlock((27116|0));
 $11 = HEAP32[$3>>2]|0;
 (_pthread_setcancelstate(($11|0),(0|0))|0);
 STACKTOP = sp;return;
}
function ___openlog() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_socket(1,524290,0)|0);
 HEAP32[368] = $0;
 $1 = ($0|0)>(-1);
 if ($1) {
  (_connect($0,2320,12)|0);
 }
 return;
}
function _socket($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$017 = 0, $$old = 0, $$old18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 72|0;
 $4 = sp + 48|0;
 HEAP32[$3>>2] = $0;
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 HEAP32[$vararg_buffer>>2] = 1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $11 = (___syscall102(102,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 $13 = ($12|0)<(0);
 do {
  if ($13) {
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(22);
   if ($16) {
    $$old = $1 & 526336;
    $$old18 = ($$old|0)==(0);
    if ($$old18) {
     $$017 = $12;
     break;
    }
   } else {
    $17 = (___errno_location()|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)!=(93);
    $20 = $1 & 526336;
    $21 = ($20|0)==(0);
    $or$cond = $21 | $19;
    if ($or$cond) {
     $$017 = $12;
     break;
    }
   }
   HEAP32[$4>>2] = $0;
   $22 = ((($4)) + 4|0);
   $23 = $1 & -526337;
   HEAP32[$22>>2] = $23;
   $24 = ((($4)) + 8|0);
   HEAP32[$24>>2] = $2;
   $25 = ((($4)) + 12|0);
   HEAP32[$25>>2] = 0;
   $26 = ((($4)) + 16|0);
   HEAP32[$26>>2] = 0;
   $27 = ((($4)) + 20|0);
   HEAP32[$27>>2] = 0;
   $28 = $4;
   HEAP32[$vararg_buffer2>>2] = 1;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $28;
   $29 = (___syscall102(102,($vararg_buffer2|0))|0);
   $30 = (___syscall_ret($29)|0);
   $31 = ($30|0)<(0);
   if ($31) {
    $$017 = $30;
   } else {
    $32 = $1 & 524288;
    $33 = ($32|0)==(0);
    if (!($33)) {
     HEAP32[$vararg_buffer6>>2] = $30;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = 2;
     $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
     HEAP32[$vararg_ptr10>>2] = 1;
     (___syscall221(221,($vararg_buffer6|0))|0);
    }
    $34 = $1 & 2048;
    $35 = ($34|0)==(0);
    if ($35) {
     $$017 = $30;
    } else {
     HEAP32[$vararg_buffer11>>2] = $30;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = 4;
     $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
     HEAP32[$vararg_ptr15>>2] = 2048;
     (___syscall221(221,($vararg_buffer11|0))|0);
     $$017 = $30;
    }
   }
  } else {
   $$017 = $12;
  }
 } while(0);
 STACKTOP = sp;return ($$017|0);
}
function _connect($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 HEAP32[$vararg_buffer>>2] = 3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $11 = (___syscall102(102,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function ___vsyslog($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[367]|0;
 $5 = $0 & 7;
 $6 = 1 << $5;
 $7 = $4 & $6;
 $8 = ($7|0)==(0);
 $9 = ($0>>>0)>(1023);
 $or$cond = $9 | $8;
 if (!($or$cond)) {
  (_pthread_setcancelstate(1,($3|0))|0);
  ___lock((27116|0));
  __vsyslog($0,$1,$2);
  ___unlock((27116|0));
  $10 = HEAP32[$3>>2]|0;
  (_pthread_setcancelstate(($10|0),(0|0))|0);
 }
 STACKTOP = sp;return;
}
function __vsyslog($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$033 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1152|0);
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 1136|0;
 $4 = sp + 104|0;
 $5 = sp + 60|0;
 $6 = sp + 112|0;
 $7 = sp + 56|0;
 $8 = (___errno_location()|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[368]|0;
 $11 = ($10|0)<(0);
 if ($11) {
  ___openlog();
 }
 $12 = $0 & 1016;
 $13 = ($12|0)==(0);
 $14 = HEAP32[369]|0;
 $15 = $13 ? $14 : 0;
 $$0 = $15 | $0;
 $16 = (_time((0|0))|0);
 HEAP32[$4>>2] = $16;
 (_gmtime_r(($4|0),($5|0))|0);
 (_strftime(($3|0),16,(26361|0),($5|0))|0);
 $17 = HEAP32[6781]|0;
 $18 = $17 & 1;
 $19 = ($18|0)==(0);
 if ($19) {
  $22 = 0;
 } else {
  $20 = (_getpid()|0);
  $22 = $20;
 }
 $21 = ($22|0)==(0);
 $23 = $21&1;
 $24 = (26370 + ($23)|0);
 $25 = (26372 + ($23)|0);
 HEAP32[$vararg_buffer>>2] = $$0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 28168;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $24;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $22;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $25;
 $26 = (_snprintf($6,1024,26374,$vararg_buffer)|0);
 $27 = (___errno_location()|0);
 HEAP32[$27>>2] = $9;
 $28 = (($6) + ($26)|0);
 $29 = (1024 - ($26))|0;
 $30 = (_vsnprintf($28,$29,$1,$2)|0);
 $31 = ($30|0)>(-1);
 if ($31) {
  $32 = ($30>>>0)<($29>>>0);
  $33 = (($30) + ($26))|0;
  $$033 = $32 ? $33 : 1023;
  $34 = (($$033) + -1)|0;
  $35 = (($6) + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = ($36<<24>>24)==(10);
  if ($37) {
   $$1 = $$033;
  } else {
   $38 = (($6) + ($$033)|0);
   $39 = (($$033) + 1)|0;
   HEAP8[$38>>0] = 10;
   $$1 = $39;
  }
  $40 = HEAP32[368]|0;
  $41 = (_send($40,$6,$$1,0)|0);
  $42 = ($41|0)<(0);
  do {
   if ($42) {
    $43 = (___errno_location()|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (_is_lost_conn($44)|0);
    $46 = ($45|0)==(0);
    if (!($46)) {
     $47 = HEAP32[368]|0;
     $48 = (_connect($47,2320,12)|0);
     $49 = ($48|0)<(0);
     if (!($49)) {
      $50 = HEAP32[368]|0;
      $51 = (_send($50,$6,$$1,0)|0);
      $52 = ($51|0)<(0);
      if (!($52)) {
       break;
      }
     }
    }
    $53 = HEAP32[6781]|0;
    $54 = $53 & 2;
    $55 = ($54|0)==(0);
    if (!($55)) {
     $56 = (_open(26396,524545,$vararg_buffer7)|0);
     $57 = ($56|0)>(-1);
     if ($57) {
      $58 = HEAP32[$7>>2]|0;
      $59 = (($$1) - ($58))|0;
      $60 = (($6) + ($58)|0);
      HEAP32[$vararg_buffer9>>2] = $59;
      $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
      HEAP32[$vararg_ptr12>>2] = $60;
      (_dprintf($56,26409,$vararg_buffer9)|0);
      (_close($56)|0);
     }
    }
   }
  } while(0);
  $61 = HEAP32[6781]|0;
  $62 = $61 & 32;
  $63 = ($62|0)==(0);
  if (!($63)) {
   $64 = HEAP32[$7>>2]|0;
   $65 = (($$1) - ($64))|0;
   $66 = (($6) + ($64)|0);
   HEAP32[$vararg_buffer13>>2] = $65;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $66;
   (_dprintf(2,26409,$vararg_buffer13)|0);
  }
 }
 STACKTOP = sp;return;
}
function _send($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_sendto($0,$1,$2,$3,0,0)|0);
 return ($4|0);
}
function _is_lost_conn($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 104: case 107: case 111:  {
  $2 = 1;
  break;
 }
 default: {
  $1 = ($0|0)==(32);
  $phitmp = $1&1;
  $2 = $phitmp;
 }
 }
 return ($2|0);
}
function _sendto($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = sp + 8|0;
 HEAP32[$6>>2] = $0;
 $7 = ((($6)) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($6)) + 12|0);
 HEAP32[$10>>2] = $3;
 $11 = ((($6)) + 16|0);
 $12 = $4;
 HEAP32[$11>>2] = $12;
 $13 = ((($6)) + 20|0);
 HEAP32[$13>>2] = $5;
 $14 = $6;
 HEAP32[$vararg_buffer>>2] = 11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $15 = (___syscall102(102,($vararg_buffer|0))|0);
 $16 = (___syscall_ret($15)|0);
 STACKTOP = sp;return ($16|0);
}
function _syslog($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 ___vsyslog($0,$1,$2);
 STACKTOP = sp;return;
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$03866 = 0, $$039$lcssa = 0, $$03965 = 0, $$041$lcssa = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0, $$243 = 0, $$247 = 0, $$3 = 0;
 var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond63 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   if ($or$cond63) {
    $$03866 = $2;$$03965 = $1;$$04164 = $0;
    while(1) {
     $11 = HEAP8[$$03965>>0]|0;
     HEAP8[$$04164>>0] = $11;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$243 = $$04164;$$3 = $$03866;
      break L1;
     }
     $13 = (($$03866) + -1)|0;
     $14 = ((($$03965)) + 1|0);
     $15 = ((($$04164)) + 1|0);
     $16 = $14;
     $17 = $16 & 3;
     $18 = ($17|0)!=(0);
     $19 = ($13|0)!=(0);
     $or$cond = $19 & $18;
     if ($or$cond) {
      $$03866 = $13;$$03965 = $14;$$04164 = $15;
     } else {
      $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
      break;
     }
    }
   } else {
    $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
   }
   if ($$lcssa) {
    $$pr = HEAP8[$$039$lcssa>>0]|0;
    $20 = ($$pr<<24>>24)==(0);
    if ($20) {
     $$243 = $$041$lcssa;$$3 = $$038$lcssa;
    } else {
     $21 = ($$038$lcssa>>>0)>(3);
     L10: do {
      if ($21) {
       $$03753 = $$041$lcssa;$$054 = $$039$lcssa;$$152 = $$038$lcssa;
       while(1) {
        $22 = HEAP32[$$054>>2]|0;
        $23 = (($22) + -16843009)|0;
        $24 = $22 & -2139062144;
        $25 = $24 ^ -2139062144;
        $26 = $25 & $23;
        $27 = ($26|0)==(0);
        if (!($27)) {
         $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
         break L10;
        }
        HEAP32[$$03753>>2] = $22;
        $28 = (($$152) + -4)|0;
        $29 = ((($$054)) + 4|0);
        $30 = ((($$03753)) + 4|0);
        $31 = ($28>>>0)>(3);
        if ($31) {
         $$03753 = $30;$$054 = $29;$$152 = $28;
        } else {
         $$0$lcssa = $29;$$037$lcssa = $30;$$1$lcssa = $28;
         break;
        }
       }
      } else {
       $$0$lcssa = $$039$lcssa;$$037$lcssa = $$041$lcssa;$$1$lcssa = $$038$lcssa;
      }
     } while(0);
     $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
     label = 11;
    }
   } else {
    $$243 = $$041$lcssa;$$3 = 0;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L15: do {
  if ((label|0) == 11) {
   $32 = ($$2$ph|0)==(0);
   if ($32) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $33 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $33;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$243 = $$14245;$$3 = $$247;
      break L15;
     }
     $35 = (($$247) + -1)|0;
     $36 = ((($$14046)) + 1|0);
     $37 = ((($$14245)) + 1|0);
     $38 = ($35|0)==(0);
     if ($38) {
      $$243 = $37;$$3 = 0;
      break;
     } else {
      $$14046 = $36;$$14245 = $37;$$247 = $35;
     }
    }
   }
  }
 } while(0);
 (_memset(($$243|0),0,($$3|0))|0);
 return ($$243|0);
}
function _srand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = 26512;
 $3 = $2;
 HEAP32[$3>>2] = $1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 26512;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 26512;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function _fnmatch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$042 = 0, $$043 = 0, $$044 = 0, $$045 = 0, $$1 = 0, $$mux = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $brmerge = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = $2 & 1;
 $5 = ($4|0)==(0);
 $6 = $2 & 8;
 $7 = ($6|0)==(0);
 L1: do {
  if ($5) {
   L3: do {
    if (!($7)) {
     $29 = $1;
     $$1 = $1;
     while(1) {
      $30 = HEAP8[$$1>>0]|0;
      switch ($30<<24>>24) {
      case 0:  {
       break L3;
       break;
      }
      case 47:  {
       $31 = $$1;
       $32 = (($31) - ($29))|0;
       $33 = (_fnmatch_internal($0,-1,$1,$32,$2)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        $$0 = 0;
        break L1;
       }
       break;
      }
      default: {
      }
      }
      $35 = ((($$1)) + 1|0);
      $$1 = $35;
     }
    }
   } while(0);
   $36 = (_fnmatch_internal($0,-1,$1,-1,$2)|0);
   $$0 = $36;
  } else {
   $$044 = $0;$$045 = $1;
   while(1) {
    $$043 = $$045;
    L13: while(1) {
     $8 = HEAP8[$$043>>0]|0;
     switch ($8<<24>>24) {
     case 47: case 0:  {
      $$042 = $$044;
      break L13;
      break;
     }
     default: {
     }
     }
     $9 = ((($$043)) + 1|0);
     $$043 = $9;
    }
    L16: while(1) {
     $10 = (_pat_next($$042,-1,$3,$2)|0);
     switch ($10|0) {
     case 0: case 47:  {
      break L16;
      break;
     }
     default: {
     }
     }
     $11 = HEAP32[$3>>2]|0;
     $12 = (($$042) + ($11)|0);
     $$042 = $12;
    }
    $13 = HEAP8[$$043>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($10|0)!=($14|0);
    $16 = ($13<<24>>24)==(0);
    $or$cond = $7 | $16;
    $or$cond53 = $15 & $or$cond;
    if ($or$cond53) {
     $$0 = 1;
     break L1;
    }
    $17 = ($10|0)==(0);
    $18 = $$042;
    $19 = $$044;
    $20 = (($18) - ($19))|0;
    $21 = $$043;
    $22 = $$045;
    $23 = (($21) - ($22))|0;
    $24 = (_fnmatch_internal($$044,$20,$$045,$23,$2)|0);
    $25 = ($24|0)!=(0);
    $brmerge = $17 | $25;
    $$mux = $25&1;
    if ($brmerge) {
     $$0 = $$mux;
     break L1;
    }
    $26 = ((($$043)) + 1|0);
    $27 = HEAP32[$3>>2]|0;
    $28 = (($$042) + ($27)|0);
    $$044 = $28;$$045 = $26;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _pat_next($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$090 = 0, $$0 = 0, $$089 = 0, $$090 = 0, $$094 = 0, $$1 = 0, $$101 = 0, $$102 = 0, $$191$ph = 0, $$191109 = 0, $$2 = 0, $$292$lcssa = 0, $$292$ph = 0, $$292104 = 0, $$3 = 0, $$4 = 0, $$97 = 0, $$pre = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond96 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($1|0)==(0);
 L1: do {
  if ($5) {
   label = 3;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 3;
   } else {
    HEAP32[$2>>2] = 1;
    $8 = HEAP8[$0>>0]|0;
    switch ($8<<24>>24) {
    case 42:  {
     $$2 = -5;
     break L1;
     break;
    }
    case 92:  {
     $9 = ((($0)) + 1|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)!=(0);
     $12 = $3 & 2;
     $13 = ($12|0)==(0);
     $or$cond = $13 & $11;
     if ($or$cond) {
      HEAP32[$2>>2] = 2;
      $$pre = HEAP8[$9>>0]|0;
      $$089 = $9;$$094 = 1;$60 = $$pre;
      label = 30;
     } else {
      $66 = 92;
     }
     break;
    }
    case 91:  {
     $14 = ($1>>>0)>(1);
     L8: do {
      if ($14) {
       $15 = ((($0)) + 1|0);
       $16 = HEAP8[$15>>0]|0;
       switch ($16<<24>>24) {
       case 33: case 94:  {
        break;
       }
       default: {
        $$090 = 1;
        break L8;
       }
       }
       $$090 = 2;
      } else {
       $$090 = 1;
      }
     } while(0);
     $17 = ($$090>>>0)<($1>>>0);
     if ($17) {
      $18 = (($0) + ($$090)|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = ($19<<24>>24)==(93);
      $21 = $20&1;
      $$$090 = (($$090) + ($21))|0;
      $$191$ph = $$$090;
     } else {
      $$191$ph = $$090;
     }
     $22 = ($$191$ph>>>0)<($1>>>0);
     L15: do {
      if ($22) {
       $$191109 = $$191$ph;
       while(1) {
        $23 = (($0) + ($$191109)|0);
        $24 = HEAP8[$23>>0]|0;
        switch ($24<<24>>24) {
        case 93: case 0:  {
         $$4 = $$191109;
         label = 26;
         break L15;
         break;
        }
        default: {
        }
        }
        $25 = (($$191109) + 1)|0;
        $26 = ($25>>>0)<($1>>>0);
        L19: do {
         if ($26) {
          $27 = (($0) + ($25)|0);
          $28 = HEAP8[$27>>0]|0;
          $29 = ($28<<24>>24)!=(0);
          $30 = ($24<<24>>24)==(91);
          $or$cond96 = $30 & $29;
          if ($or$cond96) {
           switch ($28<<24>>24) {
           case 61: case 46: case 58:  {
            break;
           }
           default: {
            $$3 = $$191109;
            break L19;
           }
           }
           $31 = (($$191109) + 2)|0;
           $32 = ($31>>>0)<($1>>>0);
           if ($32) {
            $33 = (($$191109) + 3)|0;
            $34 = (($0) + ($31)|0);
            $35 = HEAP8[$34>>0]|0;
            $36 = ($35<<24>>24)==(0);
            $$ = $36 ? $31 : $33;
            $$292$ph = $$;
           } else {
            $$292$ph = $31;
           }
           $37 = ($$292$ph>>>0)<($1>>>0);
           L26: do {
            if ($37) {
             $$292104 = $$292$ph;
             while(1) {
              $38 = (($0) + ($$292104)|0);
              $39 = HEAP8[$38>>0]|0;
              $40 = ($39<<24>>24)==(0);
              if ($40) {
               $$292$lcssa = $$292104;
               break L26;
              }
              $41 = (($$292104) + -1)|0;
              $42 = (($0) + ($41)|0);
              $43 = HEAP8[$42>>0]|0;
              $44 = ($43<<24>>24)!=($28<<24>>24);
              $45 = ($39<<24>>24)!=(93);
              $$97 = $45 | $44;
              if (!($$97)) {
               $$292$lcssa = $$292104;
               break L26;
              }
              $46 = (($$292104) + 1)|0;
              $47 = ($46>>>0)<($1>>>0);
              if ($47) {
               $$292104 = $46;
              } else {
               $$292$lcssa = $46;
               break;
              }
             }
            } else {
             $$292$lcssa = $$292$ph;
            }
           } while(0);
           $48 = ($$292$lcssa|0)==($1|0);
           if ($48) {
            $$0 = 91;$storemerge = 1;
            break L15;
           }
           $49 = (($0) + ($$292$lcssa)|0);
           $50 = HEAP8[$49>>0]|0;
           $51 = ($50<<24>>24)==(0);
           if ($51) {
            $$4 = $$292$lcssa;
            label = 26;
            break L15;
           } else {
            $$3 = $$292$lcssa;
           }
          } else {
           $$3 = $$191109;
          }
         } else {
          $$3 = $$191109;
         }
        } while(0);
        $52 = (($$3) + 1)|0;
        $53 = ($52>>>0)<($1>>>0);
        if ($53) {
         $$191109 = $52;
        } else {
         $$4 = $52;
         label = 26;
         break L15;
        }
       }
      } else {
       $$4 = $$191$ph;
       label = 26;
      }
     } while(0);
     if ((label|0) == 26) {
      $54 = ($$4|0)==($1|0);
      if ($54) {
       $$0 = 91;$storemerge = 1;
      } else {
       $55 = (($$4) + 1)|0;
       $56 = (($0) + ($$4)|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = ($57<<24>>24)==(0);
       $$101 = $58 ? 1 : $55;
       $$102 = $58 ? 91 : -3;
       $$0 = $$102;$storemerge = $$101;
      }
     }
     HEAP32[$2>>2] = $storemerge;
     $$2 = $$0;
     break L1;
     break;
    }
    case 63:  {
     $$2 = -4;
     break L1;
     break;
    }
    default: {
     $$089 = $0;$$094 = 0;$60 = $8;
     label = 30;
    }
    }
    if ((label|0) == 30) {
     $59 = ($60<<24>>24)<(0);
     if ($59) {
      $61 = (_mbtowc($4,$$089,$1)|0);
      $62 = ($61|0)<(0);
      if ($62) {
       HEAP32[$2>>2] = 0;
       $$1 = -2;
      } else {
       $63 = (($61) + ($$094))|0;
       HEAP32[$2>>2] = $63;
       $64 = HEAP32[$4>>2]|0;
       $$1 = $64;
      }
      $$2 = $$1;
      break;
     } else {
      $66 = $60;
     }
    }
    $65 = $66 << 24 >> 24;
    $$2 = $65;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  HEAP32[$2>>2] = 0;
  $$2 = 0;
 }
 STACKTOP = sp;return ($$2|0);
}
function _fnmatch_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$0141 = 0, $$0142$lcssa = 0, $$0142208 = 0, $$0145$lcssa$idx = 0, $$0145$lcssa$ptr = 0, $$0145215$idx = 0, $$0147214$add = 0, $$0147214$add223 = 0, $$0147214$idx = 0, $$0147214$ptr = 0, $$0150 = 0, $$0153 = 0, $$0154 = 0, $$0158 = 0, $$0216 = 0, $$1 = 0, $$1143 = 0, $$1146$idx = 0, $$1151$ph204 = 0;
 var $$1155$ph203 = 0, $$1155202$be = 0, $$1155202309 = 0, $$2144 = 0, $$2156$pn = 0, $$2209 = 0, $$3157 = 0, $$3205 = 0, $$4$lcssa = 0, $$4198 = 0, $$add = 0, $$lcssa = 0, $$lcssa181 = 0, $$lcssa184 = 0, $$ptr$ptr = 0, $$ptr222 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond159 = 0, $or$cond160 = 0, $or$cond161 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp + 4|0;
 $6 = sp;
 $7 = $4 & 4;
 $8 = ($7|0)==(0);
 if ($8) {
  label = 4;
 } else {
  $9 = HEAP8[$2>>0]|0;
  $10 = ($9<<24>>24)==(46);
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(46);
   if ($12) {
    label = 4;
   } else {
    $$0141 = 1;
   }
  } else {
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $13 = $4 & 16;
   $14 = ($13|0)==(0);
   $$0150 = $0;$$0153 = $3;$$0154 = $2;$$0158 = $1;
   L6: while(1) {
    $15 = (_pat_next($$0150,$$0158,$5,$4)|0);
    switch ($15|0) {
    case -2:  {
     $$0141 = 1;
     break L4;
     break;
    }
    case -5:  {
     break L6;
     break;
    }
    default: {
    }
    }
    $20 = (_str_next($$0154,$$0153,$6)|0);
    $21 = ($20|0)<(1);
    if ($21) {
     label = 9;
     break;
    }
    $24 = HEAP32[$6>>2]|0;
    $25 = (($$0154) + ($24)|0);
    $26 = (($$0153) - ($24))|0;
    if ($14) {
     $28 = $20;
    } else {
     $27 = (_casefold($20)|0);
     $28 = $27;
    }
    switch ($15|0) {
    case -3:  {
     $29 = (_match_bracket($$0150,$20,$28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      $$0141 = 1;
      break L4;
     }
     break;
    }
    case -4:  {
     break;
    }
    default: {
     $31 = ($20|0)==($15|0);
     $32 = ($28|0)==($15|0);
     $or$cond = $31 | $32;
     if (!($or$cond)) {
      $$0141 = 1;
      break L4;
     }
    }
    }
    $33 = HEAP32[$5>>2]|0;
    $34 = (($$0150) + ($33)|0);
    $35 = (($$0158) - ($33))|0;
    $$0150 = $34;$$0153 = $26;$$0154 = $25;$$0158 = $35;
   }
   if ((label|0) == 9) {
    $22 = ($15|0)!=(0);
    $23 = $22&1;
    $$0141 = $23;
    break;
   }
   $$ptr$ptr = ((($$0150)) + 1|0);
   $16 = (($$0158) + -1)|0;
   $17 = (_strnlen($$ptr$ptr,$16)|0);
   $$add = (($17) + 1)|0;
   $$ptr222 = (($$0150) + ($$add)|0);
   $18 = ($17|0)>(0);
   L20: do {
    if ($18) {
     $19 = $$ptr222;
     $$0145215$idx = 1;$$0147214$idx = 1;$$0216 = 0;
     while(1) {
      $$0147214$ptr = (($$0150) + ($$0147214$idx)|0);
      $36 = $$0147214$ptr;
      $37 = (($19) - ($36))|0;
      $38 = (_pat_next($$0147214$ptr,$37,$5,$4)|0);
      switch ($38|0) {
      case -2:  {
       $$0141 = 1;
       break L4;
       break;
      }
      case -5:  {
       $$0147214$add = (($$0147214$idx) + 1)|0;
       $$1 = 0;$$1146$idx = $$0147214$add;
       break;
      }
      default: {
       $39 = (($$0216) + 1)|0;
       $$1 = $39;$$1146$idx = $$0145215$idx;
      }
      }
      $40 = HEAP32[$5>>2]|0;
      $$0147214$add223 = (($$0147214$idx) + ($40))|0;
      $41 = ($$0147214$add223|0)>($17|0);
      if ($41) {
       $$0$lcssa = $$1;$$0145$lcssa$idx = $$1146$idx;
       break L20;
      } else {
       $$0145215$idx = $$1146$idx;$$0147214$idx = $$0147214$add223;$$0216 = $$1;
      }
     }
    } else {
     $$0$lcssa = 0;$$0145$lcssa$idx = 1;
    }
   } while(0);
   $$0145$lcssa$ptr = (($$0150) + ($$0145$lcssa$idx)|0);
   $42 = (_strnlen($$0154,$$0153)|0);
   $43 = (($$0154) + ($42)|0);
   $44 = ($42>>>0)<($$0$lcssa>>>0);
   if ($44) {
    $$0141 = 1;
   } else {
    $45 = ($42|0)>(0);
    $46 = ($$0$lcssa|0)!=(0);
    $47 = $45 & $46;
    if ($47) {
     $$0142208 = $43;$$2209 = $$0$lcssa;
     while(1) {
      $48 = ((($$0142208)) + -1|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = ($49<<24>>24)>(-1);
      if ($50) {
       $$2144 = $48;
      } else {
       $51 = (___pthread_self_535()|0);
       $52 = ((($51)) + 188|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54|0)==(0|0);
       if ($55) {
        $$2144 = $48;
       } else {
        $$1143 = $$0142208;
        while(1) {
         $56 = ((($$1143)) + -1|0);
         $57 = HEAP8[$56>>0]|0;
         $58 = $57 & -64;
         $59 = ($58<<24>>24)==(-128);
         $60 = ($56>>>0)>($$0154>>>0);
         $or$cond159 = $60 & $59;
         if ($or$cond159) {
          $$1143 = $56;
         } else {
          $$2144 = $56;
          break;
         }
        }
       }
      }
      $61 = (($$2209) + -1)|0;
      $62 = ($$2144>>>0)>($$0154>>>0);
      $63 = ($61|0)!=(0);
      $64 = $62 & $63;
      if ($64) {
       $$0142208 = $$2144;$$2209 = $61;
      } else {
       $$0142$lcssa = $$2144;$$lcssa184 = $63;
       break;
      }
     }
    } else {
     $$0142$lcssa = $43;$$lcssa184 = $46;
    }
    if ($$lcssa184) {
     $$0141 = 1;
    } else {
     $65 = $$ptr222;
     $66 = $$0145$lcssa$ptr;
     $67 = (($65) - ($66))|0;
     $68 = (_pat_next($$0145$lcssa$ptr,$67,$5,$4)|0);
     $69 = HEAP32[$5>>2]|0;
     $70 = $43;
     $71 = $$0142$lcssa;
     $72 = (($70) - ($71))|0;
     $73 = (_str_next($$0142$lcssa,$72,$6)|0);
     $74 = ($73|0)<(1);
     L40: do {
      if ($74) {
       $$lcssa181 = $68;
      } else {
       $75 = (($$0145$lcssa$ptr) + ($69)|0);
       $$3205 = $$0142$lcssa;$80 = $73;$82 = $68;$84 = $69;$86 = $75;
       while(1) {
        $78 = HEAP32[$6>>2]|0;
        $79 = (($$3205) + ($78)|0);
        if ($14) {
         $87 = $80;
        } else {
         $81 = (_casefold($80)|0);
         $87 = $81;
        }
        switch ($82|0) {
        case -3:  {
         $83 = (0 - ($84))|0;
         $85 = (($86) + ($83)|0);
         $88 = (_match_bracket($85,$80,$87)|0);
         $89 = ($88|0)==(0);
         if ($89) {
          $$0141 = 1;
          break L4;
         }
         break;
        }
        case -4:  {
         break;
        }
        default: {
         $90 = ($80|0)==($82|0);
         $91 = ($87|0)==($82|0);
         $or$cond160 = $90 | $91;
         if (!($or$cond160)) {
          $$0141 = 1;
          break L4;
         }
        }
        }
        $92 = $86;
        $93 = (($65) - ($92))|0;
        $94 = (_pat_next($86,$93,$5,$4)|0);
        $95 = HEAP32[$5>>2]|0;
        $96 = (($86) + ($95)|0);
        $97 = $79;
        $98 = (($70) - ($97))|0;
        $99 = (_str_next($79,$98,$6)|0);
        $100 = ($99|0)<(1);
        if ($100) {
         $$lcssa181 = $94;
         break L40;
        } else {
         $$3205 = $79;$80 = $99;$82 = $94;$84 = $95;$86 = $96;
        }
       }
      }
     } while(0);
     $76 = ($$lcssa181|0)==(0);
     if ($76) {
      $77 = ($$0145$lcssa$idx|0)>(1);
      if ($77) {
       $$1151$ph204 = $$ptr$ptr;$$1155$ph203 = $$0154;
       while(1) {
        $102 = $$1151$ph204;
        $103 = (($66) - ($102))|0;
        $104 = (_pat_next($$1151$ph204,$103,$5,$4)|0);
        $105 = HEAP32[$5>>2]|0;
        $106 = (($$1151$ph204) + ($105)|0);
        $107 = ($104|0)==(-5);
        L55: do {
         if ($107) {
          $$4$lcssa = $$1155$ph203;$$lcssa = $106;
         } else {
          $$1155202309 = $$1155$ph203;$145 = $106;$146 = $105;$147 = $104;
          while(1) {
           $$4198 = $$1155202309;$113 = $147;$115 = $146;$117 = $145;
           L58: while(1) {
            $108 = $$4198;
            $109 = (($71) - ($108))|0;
            $110 = (_str_next($$4198,$109,$6)|0);
            $111 = ($110|0)==(0);
            if ($111) {
             $$0141 = 1;
             break L4;
            }
            if ($14) {
             $118 = $110;
            } else {
             $112 = (_casefold($110)|0);
             $118 = $112;
            }
            switch ($113|0) {
            case -3:  {
             $114 = (0 - ($115))|0;
             $116 = (($117) + ($114)|0);
             $119 = (_match_bracket($116,$110,$118)|0);
             $120 = ($119|0)==(0);
             if ($120) {
              break L58;
             }
             break;
            }
            case -4:  {
             break;
            }
            default: {
             $121 = ($110|0)==($113|0);
             $122 = ($118|0)==($113|0);
             $or$cond161 = $121 | $122;
             if (!($or$cond161)) {
              break L58;
             }
            }
            }
            $123 = HEAP32[$6>>2]|0;
            $124 = (($$4198) + ($123)|0);
            $125 = $117;
            $126 = (($66) - ($125))|0;
            $127 = (_pat_next($117,$126,$5,$4)|0);
            $128 = HEAP32[$5>>2]|0;
            $129 = (($117) + ($128)|0);
            $130 = ($127|0)==(-5);
            if ($130) {
             $$4$lcssa = $124;$$lcssa = $129;
             break L55;
            } else {
             $$4198 = $124;$113 = $127;$115 = $128;$117 = $129;
            }
           }
           $131 = $$1155202309;
           $132 = (($71) - ($131))|0;
           $133 = (_str_next($$1155202309,$132,$6)|0);
           $134 = ($133|0)>(0);
           if ($134) {
            $135 = HEAP32[$6>>2]|0;
            $136 = (($$1155202309) + ($135)|0);
            $$1155202$be = $136;
           } else {
            $$2156$pn = $$1155202309;
            while(1) {
             $$3157 = ((($$2156$pn)) + 1|0);
             $141 = $$3157;
             $142 = (($71) - ($141))|0;
             $143 = (_str_next($$3157,$142,$6)|0);
             $144 = ($143|0)<(0);
             if ($144) {
              $$2156$pn = $$3157;
             } else {
              $$1155202$be = $$3157;
              break;
             }
            }
           }
           $137 = (_pat_next($$1151$ph204,$103,$5,$4)|0);
           $138 = HEAP32[$5>>2]|0;
           $139 = (($$1151$ph204) + ($138)|0);
           $140 = ($137|0)==(-5);
           if ($140) {
            $$4$lcssa = $$1155202$be;$$lcssa = $139;
            break;
           } else {
            $$1155202309 = $$1155202$be;$145 = $139;$146 = $138;$147 = $137;
           }
          }
         }
        } while(0);
        $101 = ($$lcssa>>>0)<($$0145$lcssa$ptr>>>0);
        if ($101) {
         $$1151$ph204 = $$lcssa;$$1155$ph203 = $$4$lcssa;
        } else {
         $$0141 = 0;
         break;
        }
       }
      } else {
       $$0141 = 0;
      }
     } else {
      $$0141 = 1;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0141|0);
}
function _str_next($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0);
 do {
  if ($4) {
   HEAP32[$2>>2] = 0;
   $$1 = 0;
  } else {
   $5 = HEAP8[$0>>0]|0;
   $6 = ($5<<24>>24)<(0);
   if (!($6)) {
    HEAP32[$2>>2] = 1;
    $10 = HEAP8[$0>>0]|0;
    $11 = $10 << 24 >> 24;
    $$1 = $11;
    break;
   }
   $7 = (_mbtowc($3,$0,$1)|0);
   $8 = ($7|0)<(0);
   if ($8) {
    HEAP32[$2>>2] = 1;
    $$0 = -1;
   } else {
    HEAP32[$2>>2] = $7;
    $9 = HEAP32[$3>>2]|0;
    $$0 = $9;
   }
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _casefold($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_towupper($0)|0);
 $2 = ($1|0)==($0|0);
 if ($2) {
  $3 = (_towlower($0)|0);
  $4 = $3;
 } else {
  $4 = $1;
 }
 return ($4|0);
}
function _match_bracket($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$072 = 0, $$080 = 0, $$1$ph = 0, $$173 = 0, $$274 = 0, $$476 = 0, $$678 = 0, $$779 = 0, $$8 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond86 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = sp + 8|0;
 $6 = ((($0)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 switch ($7<<24>>24) {
 case 33: case 94:  {
  $8 = ((($0)) + 2|0);
  $$pr = HEAP8[$8>>0]|0;
  $$072 = $8;$$080 = 1;$9 = $$pr;
  break;
 }
 default: {
  $$072 = $6;$$080 = 0;$9 = $7;
 }
 }
 L4: do {
  switch ($9<<24>>24) {
  case 93:  {
   $10 = ($1|0)==(93);
   if ($10) {
    $11 = $$080 ^ 1;
    $$8 = $11;
    break L4;
   } else {
    $12 = ((($$072)) + 1|0);
    $$173 = $12;
    label = 10;
    break L4;
   }
   break;
  }
  case 45:  {
   $13 = ($1|0)==(45);
   if ($13) {
    $14 = $$080 ^ 1;
    $$8 = $14;
    break L4;
   } else {
    $15 = ((($$072)) + 1|0);
    $$173 = $15;
    label = 10;
    break L4;
   }
   break;
  }
  default: {
   $$173 = $$072;
   label = 10;
  }
  }
 } while(0);
 L13: do {
  if ((label|0) == 10) {
   $16 = ((($$173)) + -1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   HEAP32[$3>>2] = $18;
   $$274 = $$173;
   L15: while(1) {
    $19 = HEAP8[$$274>>0]|0;
    L17: do {
     switch ($19<<24>>24) {
     case 93:  {
      $$8 = $$080;
      break L13;
      break;
     }
     case 45:  {
      $20 = ((($$274)) + 1|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(93);
      if ($22) {
       label = 31;
      } else {
       $23 = (_mbtowc($4,$20,4)|0);
       $24 = ($23|0)<(0);
       if ($24) {
        $$1$ph = 0;
        break L15;
       }
       $25 = HEAP32[$3>>2]|0;
       $26 = HEAP32[$4>>2]|0;
       $27 = ($26|0)<($25|0);
       if (!($27)) {
        $28 = (($1) - ($25))|0;
        $29 = (($26) - ($25))|0;
        $30 = ($28>>>0)>($29>>>0);
        $31 = (($2) - ($25))|0;
        $32 = ($31>>>0)>($29>>>0);
        $or$cond = $30 & $32;
        if (!($or$cond)) {
         label = 16;
         break L15;
        }
       }
       $34 = (($23) + -1)|0;
       $35 = (($$274) + ($34)|0);
       $$779 = $35;
      }
      break;
     }
     case 91:  {
      $36 = ((($$274)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      switch ($37<<24>>24) {
      case 61: case 46: case 58:  {
       break;
      }
      default: {
       label = 31;
       break L17;
      }
      }
      $38 = ((($$274)) + 3|0);
      $$476 = $38;
      while(1) {
       $39 = ((($$476)) + -1|0);
       $40 = HEAP8[$39>>0]|0;
       $41 = ($40<<24>>24)==($37<<24>>24);
       if ($41) {
        $42 = HEAP8[$$476>>0]|0;
        $43 = ($42<<24>>24)==(93);
        if ($43) {
         break;
        }
       }
       $44 = ((($$476)) + 1|0);
       $$476 = $44;
      }
      $45 = ((($$274)) + 2|0);
      $46 = ($37<<24>>24)==(58);
      if ($46) {
       $47 = $39;
       $48 = $45;
       $49 = (($47) - ($48))|0;
       $50 = ($49|0)<(16);
       if ($50) {
        (_memcpy(($5|0),($45|0),($49|0))|0);
        $51 = (($5) + ($49)|0);
        HEAP8[$51>>0] = 0;
        $52 = (_wctype($5)|0);
        $53 = (_iswctype($1,$52)|0);
        $54 = ($53|0)==(0);
        if (!($54)) {
         label = 29;
         break L15;
        }
        $55 = (_wctype($5)|0);
        $56 = (_iswctype($2,$55)|0);
        $57 = ($56|0)==(0);
        if (!($57)) {
         label = 29;
         break L15;
        }
        $$779 = $$476;
       } else {
        $$779 = $$476;
       }
      } else {
       $$779 = $$476;
      }
      break;
     }
     default: {
      $59 = ($19<<24>>24)>(-1);
      if ($59) {
       label = 31;
      } else {
       $61 = (_mbtowc($3,$$274,4)|0);
       $62 = ($61|0)<(0);
       if ($62) {
        $$8 = 0;
        break L13;
       }
       $63 = (($61) + -1)|0;
       $64 = (($$274) + ($63)|0);
       $$pre = HEAP32[$3>>2]|0;
       $$678 = $64;$66 = $$pre;
       label = 34;
      }
     }
     }
    } while(0);
    if ((label|0) == 31) {
     label = 0;
     $60 = $19&255;
     HEAP32[$3>>2] = $60;
     $$678 = $$274;$66 = $60;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $65 = ($66|0)==($1|0);
     $67 = ($66|0)==($2|0);
     $or$cond86 = $65 | $67;
     if ($or$cond86) {
      label = 35;
      break;
     } else {
      $$779 = $$678;
     }
    }
    $69 = ((($$779)) + 1|0);
    $$274 = $69;
   }
   if ((label|0) == 16) {
    $33 = $$080 ^ 1;
    $$1$ph = $33;
   }
   else if ((label|0) == 29) {
    $58 = $$080 ^ 1;
    $$8 = $58;
    break;
   }
   else if ((label|0) == 35) {
    $68 = $$080 ^ 1;
    $$8 = $68;
    break;
   }
   $$8 = $$1$ph;
  }
 } while(0);
 STACKTOP = sp;return ($$8|0);
}
function ___pthread_self_535() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _glob($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$07687108109 = 0, $$07687108110 = 0, $$08195 = 0, $$083 = 0, $$08499 = 0, $$1 = 0, $$178 = 0, $$18091 = 0, $$182 = 0, $$185 = 0, $$cast = 0, $$in = 0, $$pr = 0, $$pre = 0, $$pre$phi107111Z2D = 0, $$pre$phi107112Z2D = 0, $$pre102 = 0, $$sink94 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $ignore_err$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = sp + 8|0;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 HEAP32[$5>>2] = $4;
 $10 = $1 & 8;
 $11 = ($10|0)==(0);
 if ($11) {
  $24 = 0;
 } else {
  $12 = ((($3)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $24 = $13;
 }
 $14 = HEAP8[$0>>0]|0;
 $15 = ($14<<24>>24)==(47);
 if ($15) {
  $$08499 = $0;
  while(1) {
   $16 = ((($$08499)) + 1|0);
   $$pr = HEAP8[$16>>0]|0;
   $17 = ($$pr<<24>>24)==(47);
   if ($17) {
    $$08499 = $16;
   } else {
    $$083 = 26414;$$185 = $16;$76 = $$pr;
    break;
   }
  }
 } else {
  $$083 = 28200;$$185 = $0;$76 = $14;
 }
 $18 = (_strlen($$185)|0);
 $19 = ($18>>>0)>(4096);
 L8: do {
  if ($19) {
   $$1 = 1;
  } else {
   $20 = ($2|0)==(0|0);
   $ignore_err$ = $20 ? 8 : $2;
   $21 = $1 & 32;
   $22 = ($21|0)!=(0);
   if ($22) {
    $27 = $76;
   } else {
    $23 = ((($3)) + 8|0);
    HEAP32[$23>>2] = $24;
    HEAP32[$3>>2] = 0;
    $25 = ((($3)) + 4|0);
    HEAP32[$25>>2] = 0;
    $$pre = HEAP8[$$185>>0]|0;
    $27 = $$pre;
   }
   $26 = ($27<<24>>24)==(0);
   if ($26) {
    HEAP32[$5>>2] = 0;
    $$07687108110 = 0;$$pre$phi107112Z2D = $4;$77 = $5;
    label = 15;
   } else {
    $28 = (_match_in_dir($$083,$$185,$1,$ignore_err$,$5)|0);
    $29 = ($28|0)==(1);
    if ($29) {
     _freelist($4);
     $$1 = 1;
     break;
    }
    $$pre102 = HEAP32[$4>>2]|0;
    HEAP32[$5>>2] = $$pre102;
    $30 = ($$pre102|0)==(0);
    if ($30) {
     $$07687108110 = $28;$$pre$phi107112Z2D = $4;$77 = $5;
     label = 15;
    } else {
     $$08195 = 0;$$sink94 = $$pre102;
     while(1) {
      $31 = $$sink94;
      $32 = HEAP32[$31>>2]|0;
      HEAP32[$5>>2] = $32;
      $33 = (($$08195) + 1)|0;
      $34 = ($32|0)==(0);
      if ($34) {
       break;
      } else {
       $$08195 = $33;$$sink94 = $32;
      }
     }
     $35 = ($33|0)==(0);
     if ($35) {
      $$07687108110 = $28;$$pre$phi107112Z2D = $4;$77 = $5;
      label = 15;
     } else {
      $$07687108109 = $28;$$182 = $33;$$pre$phi107111Z2D = $4;$60 = $5;
     }
    }
   }
   if ((label|0) == 15) {
    $36 = $1 & 16;
    $37 = ($36|0)==(0);
    if ($37) {
     $$1 = 3;
     break;
    }
    HEAP32[$5>>2] = $4;
    $38 = (_strlen($0)|0);
    $39 = (_append($5,$0,$38,0)|0);
    $40 = ($39|0)==(0);
    if ($40) {
     $$07687108109 = $$07687108110;$$182 = 1;$$pre$phi107111Z2D = $$pre$phi107112Z2D;$60 = $77;
    } else {
     $$1 = 1;
     break;
    }
   }
   do {
    if ($22) {
     $41 = ((($3)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = HEAP32[$3>>2]|0;
     $44 = (($$182) + ($24))|0;
     $45 = (($44) + ($43))|0;
     $46 = $45 << 2;
     $47 = (($46) + 4)|0;
     $48 = (_realloc($42,$47)|0);
     $49 = ($48|0)==(0|0);
     if ($49) {
      _freelist($4);
      $$1 = 1;
      break L8;
     } else {
      HEAP32[$41>>2] = $48;
      $50 = (($43) + ($24))|0;
      $$178 = $50;$65 = $48;
      break;
     }
    } else {
     $51 = (($$182) + ($24))|0;
     $52 = $51 << 2;
     $53 = (($52) + 4)|0;
     $54 = (_malloc($53)|0);
     $55 = ((($3)) + 4|0);
     HEAP32[$55>>2] = $54;
     $56 = ($54|0)==(0|0);
     if ($56) {
      _freelist($4);
      $$1 = 1;
      break L8;
     }
     $57 = ($24|0)==(0);
     if ($57) {
      $$178 = 0;$65 = $54;
     } else {
      $58 = $24 << 2;
      _memset(($54|0),0,($58|0))|0;
      $$178 = $24;$65 = $54;
     }
    }
   } while(0);
   $59 = HEAP32[$$pre$phi107111Z2D>>2]|0;
   HEAP32[$60>>2] = $59;
   $$18091 = 0;$$in = $59;
   while(1) {
    $61 = $$in;
    $62 = ((($61)) + 4|0);
    $63 = (($$18091) + ($$178))|0;
    $64 = (($65) + ($63<<2)|0);
    HEAP32[$64>>2] = $62;
    $$cast = $$in;
    $66 = HEAP32[$$cast>>2]|0;
    HEAP32[$60>>2] = $66;
    $67 = (($$18091) + 1)|0;
    $68 = ($67>>>0)<($$182>>>0);
    if ($68) {
     $$18091 = $67;$$in = $66;
    } else {
     break;
    }
   }
   $69 = (($$182) + ($$178))|0;
   $70 = (($65) + ($69<<2)|0);
   HEAP32[$70>>2] = 0;
   $71 = HEAP32[$3>>2]|0;
   $72 = (($71) + ($$182))|0;
   HEAP32[$3>>2] = $72;
   $73 = $1 & 4;
   $74 = ($73|0)==(0);
   if ($74) {
    $75 = (($65) + ($$178<<2)|0);
    _qsort($75,$$182,4,9);
    $$1 = $$07687108109;
   } else {
    $$1 = $$07687108109;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _ignore_err($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _match_in_dir($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0$shrunk = 0, $$0100 = 0, $$0102 = 0, $$094 = 0, $$099 = 0, $$103 = 0, $$107 = 0, $$1101 = 0, $$4 = 0, $$5 = 0, $$alloca_mul = 0, $$alloca_mul5 = 0, $$lcssa = 0, $$lcssa115 = 0, $$lobit = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $not$ = 0, $not$121 = 0, $switch$split2D = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $5 = sp + 156|0;
 $6 = sp + 152|0;
 $7 = sp + 76|0;
 $8 = sp;
 $9 = (_strlen($1)|0);
 $10 = (($9) + 1)|0;
 $11 = (_llvm_stacksave()|0);
 $$alloca_mul = $10;
 $12 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $13 = (_strlen($0)|0);
 $14 = $2 & 64;
 $15 = $14 >>> 5;
 $16 = $2 >>> 5;
 $17 = $16 & 4;
 $18 = $17 | $15;
 $19 = $18 ^ 4;
 $20 = (_strchr($1,47)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  $$099 = $1;$$1101 = 0;
 } else {
  (_strcpy($12,$1)|0);
  $22 = $20;
  $23 = $1;
  $24 = (($22) - ($23))|0;
  $25 = (($12) + ($24)|0);
  HEAP8[$25>>0] = 0;
  $$0100 = $20;
  while(1) {
   $26 = HEAP8[$$0100>>0]|0;
   $27 = ($26<<24>>24)==(47);
   $28 = ((($$0100)) + 1|0);
   if ($27) {
    $$0100 = $28;
   } else {
    $$099 = $12;$$1101 = $$0100;
    break;
   }
  }
 }
 $$lobit = $14 >>> 6;
 $29 = $$lobit ^ 1;
 $30 = (_is_literal($$099,$29)|0);
 $31 = HEAP8[$0>>0]|0;
 $32 = ($31<<24>>24)==(47);
 if ($32) {
  $33 = ((($0)) + 1|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34<<24>>24)==(0);
  $$ = $35 ? 0 : $13;
  $$0102 = $$;
 } else {
  $$0102 = $13;
 }
 $36 = ($31<<24>>24)!=(0);
 $37 = $36 ? $0 : 26416;
 $38 = (_opendir($37)|0);
 $39 = (___errno_location()|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($38|0)==(0|0);
 L9: do {
  if ($41) {
   switch ($40|0) {
   case 20:  {
    $$5 = 0;
    break L9;
    break;
   }
   case 13:  {
    $42 = HEAP8[$$099>>0]|0;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $44 = (_stat($0,$7)|0);
     $45 = ($44|0)==(0);
     if ($45) {
      $46 = ((($7)) + 12|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = $47 & 61440;
      $49 = ($48|0)==(16384);
      if ($49) {
       $50 = (_append($4,$0,$$0102,$$0102)|0);
       $51 = ($50|0)!=(0);
       $$103 = $51&1;
       $$5 = $$103;
       break L9;
      }
     }
    }
    break;
   }
   default: {
   }
   }
   $52 = (FUNCTION_TABLE_iii[$3 & 15]($0,$40)|0);
   $53 = $2 & 1;
   $54 = $52 | $53;
   $55 = ($54|0)==(0);
   $$107 = $55 ? 0 : 2;
   $$5 = $$107;
  } else {
   $56 = HEAP8[$$099>>0]|0;
   $57 = ($56<<24>>24)==(0);
   if ($57) {
    $70 = (_append($4,$0,$$0102,$$0102)|0);
    $71 = ($70|0)!=(0);
    $72 = $71&1;
    (_closedir($38)|0);
    $$5 = $72;
    break;
   }
   $58 = (_readdir_r($38,$5,$6)|0);
   $59 = ($58|0)!=(0);
   $60 = HEAP32[$6>>2]|0;
   $61 = ($60|0)!=(0|0);
   $not$121 = $59 ^ 1;
   $62 = $61 & $not$121;
   L23: do {
    if ($62) {
     $63 = (($$0102) + 2)|0;
     $64 = ($30|0)==(0);
     $65 = ($$1101|0)!=(0|0);
     $66 = $2 & 2;
     $67 = ($66|0)==(0);
     $68 = (($$0102) + 1)|0;
     $69 = ((($8)) + 12|0);
     $74 = $60;
     L25: while(1) {
      $73 = ((($74)) + 8|0);
      $75 = HEAP16[$73>>1]|0;
      $76 = $75&65535;
      $77 = (($63) + ($76))|0;
      $78 = (_llvm_stacksave()|0);
      $$alloca_mul5 = $77;
      $79 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul5)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul5)|0)+15)&-16)|0);;
      $80 = HEAP32[$6>>2]|0;
      $81 = ((($80)) + 11|0);
      if ($64) {
       $82 = (_fnmatch($$099,$81,$19)|0);
       $83 = ($82|0)==(0);
       if ($83) {
        label = 21;
       }
      } else {
       $84 = (_strcmp($$099,$81)|0);
       $85 = ($84|0)==(0);
       if ($85) {
        label = 21;
       }
      }
      L30: do {
       if ((label|0) == 21) {
        label = 0;
        L32: do {
         if ($65) {
          $86 = HEAP32[$6>>2]|0;
          $87 = ((($86)) + 10|0);
          $88 = HEAP8[$87>>0]|0;
          $89 = ($88<<24>>24)==(0);
          if (!($89)) {
           $90 = $88&255;
           $91 = $90 << 12;
           $trunc = $91&65535;
           $switch$split2D = ($trunc<<16>>16)<(16384);
           if ($switch$split2D) {
            switch ($trunc<<16>>16) {
            case -24576:  {
             break L32;
             break;
            }
            default: {
             break L30;
            }
            }
           } else {
            switch ($trunc<<16>>16) {
            case 16384:  {
             break L32;
             break;
            }
            default: {
             break L30;
            }
            }
           }
          }
         }
        } while(0);
        $92 = HEAP8[$0>>0]|0;
        $93 = ($92<<24>>24)==(0);
        if ($93) {
         $98 = HEAP32[$6>>2]|0;
         $99 = ((($98)) + 11|0);
         $$094 = $99;
        } else {
         (_memcpy(($79|0),($0|0),($$0102|0))|0);
         $94 = (($79) + ($$0102)|0);
         HEAP8[$94>>0] = 47;
         $95 = ((($94)) + 1|0);
         $96 = HEAP32[$6>>2]|0;
         $97 = ((($96)) + 11|0);
         (_strcpy($95,$97)|0);
         $$094 = $79;
        }
        if ($65) {
         $100 = (_match_in_dir($$094,$$1101,$2,$3,$4)|0);
         $101 = ($100|0)==(0);
         if ($101) {
          break;
         } else {
          label = 29;
          break L25;
         }
        }
        do {
         if ($67) {
          $$0$shrunk = 0;
         } else {
          $102 = HEAP32[$6>>2]|0;
          $103 = ((($102)) + 10|0);
          $104 = HEAP8[$103>>0]|0;
          $105 = ($104<<24>>24)==(0);
          if (!($105)) {
           $106 = $104&255;
           $107 = $106 << 12;
           $108 = $107 & 61440;
           $109 = ($108|0)==(40960);
           if (!($109)) {
            $110 = ($108|0)==(16384);
            $$0$shrunk = $110;
            break;
           }
          }
          (_stat($$094,$8)|0);
          $111 = HEAP32[$69>>2]|0;
          $112 = $111 & 61440;
          $113 = ($112|0)==(16384);
          $$0$shrunk = $113;
         }
        } while(0);
        $$0 = $$0$shrunk&1;
        $114 = HEAP32[$6>>2]|0;
        $115 = ((($114)) + 8|0);
        $116 = HEAP16[$115>>1]|0;
        $117 = $116&65535;
        $118 = (($68) + ($117))|0;
        $119 = (_append($4,$$094,$118,$$0)|0);
        $120 = ($119|0)==(0);
        if (!($120)) {
         label = 36;
         break L25;
        }
       }
      } while(0);
      _llvm_stackrestore(($78|0));
      $121 = (_readdir_r($38,$5,$6)|0);
      $122 = ($121|0)!=(0);
      $123 = HEAP32[$6>>2]|0;
      $124 = ($123|0)!=(0|0);
      $not$ = $122 ^ 1;
      $125 = $124 & $not$;
      if ($125) {
       $74 = $123;
      } else {
       $$lcssa = $122;$$lcssa115 = $121;
       break L23;
      }
     }
     if ((label|0) == 29) {
      (_closedir($38)|0);
      $$4 = $100;
     }
     else if ((label|0) == 36) {
      (_closedir($38)|0);
      $$4 = 1;
     }
     _llvm_stackrestore(($78|0));
     $$5 = $$4;
     break L9;
    } else {
     $$lcssa = $59;$$lcssa115 = $58;
    }
   } while(0);
   (_closedir($38)|0);
   if ($$lcssa) {
    $126 = (FUNCTION_TABLE_iii[$3 & 15]($0,$$lcssa115)|0);
    $127 = $2 & 1;
    $128 = $126 | $127;
    $129 = ($128|0)==(0);
    if (!($129)) {
     $$5 = 2;
     break;
    }
   }
   $$5 = 0;
  }
 } while(0);
 _llvm_stackrestore(($11|0));
 STACKTOP = sp;return ($$5|0);
}
function _freelist($0) {
 $0 = $0|0;
 var $$in89 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$in89 = $1;
  while(1) {
   $3 = HEAP32[$$in89>>2]|0;
   _free($$in89);
   $4 = ($3|0)==(0|0);
   if ($4) {
    break;
   } else {
    $$in89 = $3;
   }
  }
 }
 return;
}
function _append($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($2) + 9)|0;
 $5 = (_malloc($4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = -1;
 } else {
  $7 = HEAP32[$0>>2]|0;
  HEAP32[$7>>2] = $5;
  HEAP32[$5>>2] = 0;
  $8 = ((($5)) + 4|0);
  (_strcpy($8,$1)|0);
  $9 = ($3|0)==(0);
  if (!($9)) {
   (_strcat($8,26414)|0);
  }
  HEAP32[$0>>2] = $5;
  $$0 = 0;
 }
 return ($$0|0);
}
function _sort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_strcmp($2,$3)|0);
 return ($4|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _is_literal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06 = 0, $$078 = 0, $$09 = 0, $$1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $$06 = 1;
  } else {
   $4 = ($1|0)==(0);
   $$078 = $0;$$09 = 0;$6 = $2;
   while(1) {
    $5 = $6 << 24 >> 24;
    switch ($5|0) {
    case 42: case 63:  {
     $$06 = 0;
     break L1;
     break;
    }
    case 92:  {
     if ($4) {
      $$1 = $$09;
     } else {
      $$06 = 0;
      break L1;
     }
     break;
    }
    case 91:  {
     $$1 = 1;
     break;
    }
    case 93:  {
     $7 = ($$09|0)==(0);
     if ($7) {
      $$1 = 0;
     } else {
      $$06 = 0;
      break L1;
     }
     break;
    }
    default: {
     $$1 = $$09;
    }
    }
    $8 = ((($$078)) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $$06 = 1;
     break L1;
    } else {
     $$078 = $8;$$09 = $$1;$6 = $9;
    }
   }
  }
 } while(0);
 return ($$06|0);
}
function _globfree($0) {
 $0 = $0|0;
 var $$010 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $$lcssa = $4;
 } else {
  $5 = ((($0)) + 8|0);
  $$010 = 0;$9 = $4;
  while(1) {
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($$010))|0;
   $8 = (($9) + ($7<<2)|0);
   $10 = HEAP32[$8>>2]|0;
   $11 = ((($10)) + -4|0);
   _free($11);
   $12 = (($$010) + 1)|0;
   $13 = HEAP32[$0>>2]|0;
   $14 = ($12>>>0)<($13>>>0);
   $15 = HEAP32[$3>>2]|0;
   if ($14) {
    $$010 = $12;$9 = $15;
   } else {
    $$lcssa = $15;
    break;
   }
  }
 }
 _free($$lcssa);
 HEAP32[$0>>2] = 0;
 HEAP32[$3>>2] = 0;
 return;
}
function _regcomp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0188 = 0, $$0190 = 0, $$0192 = 0, $$0193 = 0, $$0195 = 0, $$0196$lcssa = 0, $$0196210 = 0, $$0201 = 0, $$1191 = 0, $$1198209 = 0, $$2199 = 0, $$3 = 0, $$3200$lcssa = 0, $$3200207 = 0, $$lobit = 0, $$lobit$not = 0, $$pre = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $4 = (_tre_stack_new()|0);
 $5 = ($4|0)==(0|0);
 L1: do {
  if ($5) {
   $$0188 = 12;
  } else {
   $6 = (___tre_mem_new_impl(0,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    _tre_stack_destroy($4);
    $$0188 = 12;
    break;
   }
   (_memset(($3|0),0,36)|0);
   HEAP32[$3>>2] = $6;
   $8 = ((($3)) + 4|0);
   HEAP32[$8>>2] = $4;
   $9 = ((($3)) + 16|0);
   HEAP32[$9>>2] = $1;
   $10 = ((($3)) + 32|0);
   HEAP32[$10>>2] = $2;
   $11 = ((($3)) + 28|0);
   HEAP32[$11>>2] = -1;
   $12 = (_tre_parse($3)|0);
   $13 = ($12|0)==(0);
   L6: do {
    if ($13) {
     $14 = ((($3)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($15) + -1)|0;
     HEAP32[$0>>2] = $16;
     $17 = ((($3)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = HEAP32[$11>>2]|0;
     $20 = ($19|0)<($15|0);
     if ($20) {
      $21 = (_calloc(1,68)|0);
      $22 = ($21|0)==(0|0);
      if ($22) {
       $$0192 = $21;$$0195 = 0;$$0201 = 0;$$3 = 12;$145 = 0;$147 = 0;
      } else {
       $23 = HEAP32[$11>>2]|0;
       $$lobit = $23 >>> 31;
       $$lobit$not = $$lobit ^ 1;
       $24 = ((($21)) + 60|0);
       HEAP32[$24>>2] = $$lobit$not;
       $25 = ((($21)) + 64|0);
       HEAP32[$25>>2] = 0;
       $26 = HEAP32[$14>>2]|0;
       $27 = ((($21)) + 28|0);
       HEAP32[$27>>2] = $26;
       $28 = ($$lobit$not|0)!=(0);
       $29 = $2 & 8;
       $30 = ($29|0)==(0);
       $or$cond = $30 | $28;
       if ($or$cond) {
        $31 = (_tre_add_tags(0,$4,$18,$21)|0);
        $32 = ($31|0)==(0);
        if (!($32)) {
         $$0192 = $21;$$0195 = 0;$$0201 = 0;$$3 = $31;$145 = 0;$147 = 0;
         break;
        }
        $33 = ((($21)) + 40|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = ($34|0)>(0);
        if ($35) {
         $36 = $34 << 2;
         $37 = (($36) + 4)|0;
         $38 = (_malloc($37)|0);
         $39 = ($38|0)==(0|0);
         if ($39) {
          $$0192 = $21;$$0195 = 0;$$0201 = 0;$$3 = 12;$145 = 0;$147 = 0;
          break;
         }
         $40 = ((($21)) + 32|0);
         HEAP32[$40>>2] = $38;
         $41 = HEAP32[$33>>2]|0;
         $42 = $41 << 2;
         $43 = (($42) + 4)|0;
         (_memset(($38|0),-1,($43|0))|0);
         $$pre = HEAP32[$33>>2]|0;
         $$0190 = $38;$45 = $$pre;
        } else {
         $$0190 = 0;$45 = $34;
        }
        $44 = $45 << 1;
        $46 = $44 | 1;
        $47 = (_calloc($46,4)|0);
        $48 = ((($21)) + 36|0);
        HEAP32[$48>>2] = $47;
        $49 = ($47|0)==(0|0);
        if ($49) {
         $$0192 = $21;$$0195 = 0;$$0201 = 0;$$3 = 12;$145 = 0;$147 = 0;
         break;
        }
        $50 = HEAP32[$14>>2]|0;
        $51 = (_calloc($50,12)|0);
        $52 = ($51|0)==(0|0);
        if ($52) {
         $$0192 = $21;$$0195 = 0;$$0201 = 0;$$3 = 12;$145 = 0;$147 = 0;
         break;
        }
        $53 = ((($21)) + 16|0);
        HEAP32[$53>>2] = $51;
        $54 = (_tre_add_tags($6,$4,$18,$21)|0);
        $55 = ($54|0)==(0);
        if ($55) {
         $$1191 = $$0190;
        } else {
         $$0192 = $21;$$0195 = 0;$$0201 = 0;$$3 = $54;$145 = 0;$147 = 0;
         break;
        }
       } else {
        $$1191 = 0;
       }
       $56 = ((($3)) + 24|0);
       $57 = (_tre_expand_ast($6,$4,$18,$56,$$1191)|0);
       $58 = ($57|0)==(0);
       if ($58) {
        $59 = HEAP32[$56>>2]|0;
        $60 = (($59) + 1)|0;
        HEAP32[$56>>2] = $60;
        $61 = (_tre_ast_new_literal($6,0,0,$59)|0);
        $62 = ($61|0)==(0|0);
        if ($62) {
         $$0192 = $21;$$0195 = 0;$$0201 = 0;$$3 = 12;$145 = 0;$147 = 0;
        } else {
         $63 = (_tre_ast_new_catenation($6,$18,$61)|0);
         $64 = ($63|0)==(0|0);
         if ($64) {
          $$0192 = $21;$$0195 = 0;$$0201 = 0;$$3 = 12;$145 = 0;$147 = 0;
         } else {
          $65 = (_tre_compute_nfl($6,$4,$63)|0);
          $66 = ($65|0)==(0);
          if ($66) {
           $67 = HEAP32[$56>>2]|0;
           $68 = $67 << 2;
           $69 = (_malloc($68)|0);
           $70 = ($69|0)==(0|0);
           if ($70) {
            $$0192 = $21;$$0195 = $69;$$0201 = 0;$$3 = 12;$145 = 0;$147 = 0;
           } else {
            $71 = HEAP32[$56>>2]|0;
            $72 = $71 << 2;
            $73 = (_malloc($72)|0);
            $74 = ($73|0)==(0|0);
            if ($74) {
             $$0192 = $21;$$0195 = $69;$$0201 = $73;$$3 = 12;$145 = $69;$147 = 0;
            } else {
             $75 = HEAP32[$56>>2]|0;
             $76 = ($75|0)>(0);
             if ($76) {
              $77 = $75 << 2;
              _memset(($69|0),0,($77|0))|0;
             }
             (_tre_ast_to_tnfa($63,0,$69,0)|0);
             $78 = HEAP32[$56>>2]|0;
             $79 = ($78|0)>(0);
             if ($79) {
              $$0196210 = 0;$$1198209 = 0;
              while(1) {
               $80 = (($73) + ($$1198209<<2)|0);
               HEAP32[$80>>2] = $$0196210;
               $81 = (($69) + ($$1198209<<2)|0);
               $82 = HEAP32[$81>>2]|0;
               $83 = (($$0196210) + 1)|0;
               $84 = (($83) + ($82))|0;
               HEAP32[$81>>2] = 0;
               $85 = (($$1198209) + 1)|0;
               $86 = ($85|0)<($78|0);
               if ($86) {
                $$0196210 = $84;$$1198209 = $85;
               } else {
                $$0196$lcssa = $84;
                break;
               }
              }
             } else {
              $$0196$lcssa = 0;
             }
             $87 = (($$0196$lcssa) + 1)|0;
             $88 = (_calloc($87,32)|0);
             $89 = ($88|0)==(0|0);
             if ($89) {
              $$0192 = $21;$$0195 = $69;$$0201 = $73;$$3 = 12;$145 = $69;$147 = $73;
             } else {
              HEAP32[$21>>2] = $88;
              $90 = ((($21)) + 4|0);
              HEAP32[$90>>2] = $$0196$lcssa;
              $91 = (_tre_ast_to_tnfa($63,$88,$69,$73)|0);
              $92 = ($91|0)==(0);
              if ($92) {
               $93 = ((($21)) + 20|0);
               HEAP32[$93>>2] = 0;
               $94 = ((($63)) + 24|0);
               $95 = HEAP32[$94>>2]|0;
               $$0193 = $95;$$2199 = 0;
               while(1) {
                $96 = HEAP32[$$0193>>2]|0;
                $97 = ($96|0)>(-1);
                $98 = (($$2199) + 1)|0;
                $99 = ((($$0193)) + 32|0);
                if ($97) {
                 $$0193 = $99;$$2199 = $98;
                } else {
                 break;
                }
               }
               $100 = (_calloc($98,32)|0);
               $101 = ($100|0)==(0|0);
               if ($101) {
                $$0192 = $21;$$0195 = $69;$$0201 = $73;$$3 = 12;$145 = $69;$147 = $73;
               } else {
                $102 = ((($21)) + 8|0);
                HEAP32[$102>>2] = $100;
                $103 = HEAP32[$94>>2]|0;
                $104 = HEAP32[$103>>2]|0;
                $105 = ($104|0)>(-1);
                if ($105) {
                 $$3200207 = 0;$107 = $104;$114 = $103;
                 while(1) {
                  $106 = (($73) + ($107<<2)|0);
                  $108 = HEAP32[$106>>2]|0;
                  $109 = (($88) + ($108<<5)|0);
                  $110 = (((($100) + ($$3200207<<5)|0)) + 8|0);
                  HEAP32[$110>>2] = $109;
                  $111 = (((($100) + ($$3200207<<5)|0)) + 12|0);
                  HEAP32[$111>>2] = $107;
                  $112 = (((($100) + ($$3200207<<5)|0)) + 16|0);
                  HEAP32[$112>>2] = 0;
                  $113 = ((($114)) + 12|0);
                  $115 = HEAP32[$113>>2]|0;
                  $116 = ($115|0)==(0|0);
                  if (!($116)) {
                   $$0 = 0;
                   while(1) {
                    $117 = (($115) + ($$0<<2)|0);
                    $118 = HEAP32[$117>>2]|0;
                    $119 = ($118|0)>(-1);
                    $120 = (($$0) + 1)|0;
                    if ($119) {
                     $$0 = $120;
                    } else {
                     break;
                    }
                   }
                   $121 = $120 << 2;
                   $122 = (_malloc($121)|0);
                   HEAP32[$112>>2] = $122;
                   $123 = ($122|0)==(0|0);
                   if ($123) {
                    $$0192 = $21;$$0195 = $69;$$0201 = $73;$$3 = 12;$145 = $69;$147 = $73;
                    break L6;
                   }
                   $124 = HEAP32[$113>>2]|0;
                   (_memcpy(($122|0),($124|0),($121|0))|0);
                  }
                  $125 = ((($114)) + 16|0);
                  $126 = HEAP32[$125>>2]|0;
                  $127 = (((($100) + ($$3200207<<5)|0)) + 20|0);
                  HEAP32[$127>>2] = $126;
                  $128 = (($$3200207) + 1)|0;
                  $129 = ((($114)) + 32|0);
                  $130 = HEAP32[$129>>2]|0;
                  $131 = ($130|0)>(-1);
                  if ($131) {
                   $$3200207 = $128;$107 = $130;$114 = $129;
                  } else {
                   $$3200$lcssa = $128;
                   break;
                  }
                 }
                } else {
                 $$3200$lcssa = 0;
                }
                $132 = (((($100) + ($$3200$lcssa<<5)|0)) + 8|0);
                HEAP32[$132>>2] = 0;
                HEAP32[$90>>2] = $$0196$lcssa;
                $133 = ((($63)) + 28|0);
                $134 = HEAP32[$133>>2]|0;
                $135 = HEAP32[$134>>2]|0;
                $136 = (($73) + ($135<<2)|0);
                $137 = HEAP32[$136>>2]|0;
                $138 = (($88) + ($137<<5)|0);
                $139 = ((($21)) + 12|0);
                HEAP32[$139>>2] = $138;
                $140 = HEAP32[$56>>2]|0;
                $141 = ((($21)) + 52|0);
                HEAP32[$141>>2] = $140;
                $142 = ((($21)) + 56|0);
                HEAP32[$142>>2] = $2;
                ___tre_mem_destroy($6);
                _tre_stack_destroy($4);
                _free($69);
                _free($73);
                $143 = ((($0)) + 4|0);
                HEAP32[$143>>2] = $21;
                $$0188 = 0;
                break L1;
               }
              } else {
               $$0192 = $21;$$0195 = $69;$$0201 = $73;$$3 = $91;$145 = $69;$147 = $73;
              }
             }
            }
           }
          } else {
           $$0192 = $21;$$0195 = 0;$$0201 = 0;$$3 = $65;$145 = 0;$147 = 0;
          }
         }
        }
       } else {
        $$0192 = $21;$$0195 = 0;$$0201 = 0;$$3 = $57;$145 = 0;$147 = 0;
       }
      }
     } else {
      $$0192 = 0;$$0195 = 0;$$0201 = 0;$$3 = 6;$145 = 0;$147 = 0;
     }
    } else {
     $$0192 = 0;$$0195 = 0;$$0201 = 0;$$3 = $12;$145 = 0;$147 = 0;
    }
   } while(0);
   ___tre_mem_destroy($6);
   _tre_stack_destroy($4);
   $144 = ($$0195|0)==(0|0);
   if (!($144)) {
    _free($145);
   }
   $146 = ($$0201|0)==(0|0);
   if (!($146)) {
    _free($147);
   }
   $148 = ((($0)) + 4|0);
   HEAP32[$148>>2] = $$0192;
   _regfree($0);
   $$0188 = $$3;
  }
 } while(0);
 STACKTOP = sp;return ($$0188|0);
}
function _tre_stack_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(20)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = $0;
  } else {
   $2 = (_malloc(2048)|0);
   $3 = ((($0)) + 16|0);
   HEAP32[$3>>2] = $2;
   $4 = ($2|0)==(0|0);
   if ($4) {
    _free($0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$0>>2] = 512;
    $5 = ((($0)) + 4|0);
    HEAP32[$5>>2] = 1024000;
    $6 = ((($0)) + 8|0);
    HEAP32[$6>>2] = 128;
    $7 = ((($0)) + 12|0);
    HEAP32[$7>>2] = 0;
    $$0 = $0;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___tre_mem_new_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$in = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $3 = (_calloc(1,24)|0);
  $$0$in = $3;
 } else {
  (_memset(($1|0),0,24)|0);
  $$0$in = $1;
 }
 return ($$0$in|0);
}
function _tre_stack_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 _free($0);
 return;
}
function _tre_parse($0) {
 $0 = $0|0;
 var $$ = 0, $$$3153 = 0, $$$6 = 0, $$0143 = 0, $$0146 = 0, $$0146$ph = 0, $$0149$ph = 0, $$0150 = 0, $$0150$ph = 0, $$0156 = 0, $$1144 = 0, $$1147 = 0, $$1157 = 0, $$2152 = 0, $$3153 = 0, $$5 = 0, $$5155342 = 0, $$5155343 = 0, $$6$ph = 0, $$7 = 0;
 var $$pr167 = 0, $$pre = 0, $$sink = 0, $$sink166 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond399 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_tre_stack_push_int($9,0)|0);
 $11 = ($10|0)==(0);
 L1: do {
  if ($11) {
   $12 = ($5|0)!=(0);
   $13 = ((($0)) + 8|0);
   $14 = ((($0)) + 12|0);
   $$0146$ph = 0;$$0149$ph = 1;$$0150$ph = $7;
   L3: while(1) {
    $$0143 = 0;$$0146 = $$0146$ph;$$0150 = $$0150$ph;$$0156 = 0;
    L5: while(1) {
     $15 = HEAP8[$$0150>>0]|0;
     if ($12) {
      $19 = ($15<<24>>24)==(40);
      if ($19) {
       break;
      }
      $30 = ($15<<24>>24)==(41);
      $31 = ($$0146|0)!=(0);
      $or$cond = $31 & $30;
      if ($or$cond) {
       label = 13;
      } else {
       label = 14;
      }
     } else {
      $16 = ($15<<24>>24)==(92);
      if ($16) {
       $17 = ((($$0150)) + 1|0);
       $18 = HEAP8[$17>>0]|0;
       switch ($18<<24>>24) {
       case 40:  {
        break L5;
        break;
       }
       case 41:  {
        label = 13;
        break;
       }
       default: {
        label = 14;
       }
       }
      } else {
       label = 14;
      }
     }
     if ((label|0) == 13) {
      label = 0;
      $32 = HEAP32[$0>>2]|0;
      $33 = (_tre_ast_new_literal($32,-1,-1,-1)|0);
      HEAP32[$13>>2] = $33;
      $34 = ($33|0)==(0|0);
      if ($34) {
       $$5 = 12;
       break L1;
      } else {
       $$1144 = $$0143;$$1147 = $$0146;$$1157 = $$0156;$$2152 = $$0150;
      }
     }
     else if ((label|0) == 14) {
      label = 0;
      $35 = (_parse_atom($0,$$0150)|0);
      $36 = ($35|0)==(0);
      if (!($36)) {
       $$5 = $35;
       break L1;
      }
      $37 = HEAP32[$14>>2]|0;
      $$1144 = $$0143;$$1147 = $$0146;$$1157 = $$0156;$$2152 = $37;
     }
     L16: while(1) {
      $$3153 = $$2152;
      L18: while(1) {
       $38 = HEAP8[$$3153>>0]|0;
       switch ($38<<24>>24) {
       case 42: case 92:  {
        break;
       }
       default: {
        if (!($12)) {
         $$6$ph = $$3153;
         break L18;
        }
        switch ($38<<24>>24) {
        case 123: case 63: case 43:  {
         break;
        }
        default: {
         $$6$ph = $$3153;
         break L18;
        }
        }
       }
       }
       $39 = ($38<<24>>24)==(92);
       $or$cond3 = $12 & $39;
       if ($or$cond3) {
        $$6$ph = $$3153;
        break;
       }
       $40 = ((($$3153)) + 1|0);
       if ($39) {
        $41 = HEAP8[$40>>0]|0;
        switch ($41<<24>>24) {
        case 123: case 63: case 43:  {
         break;
        }
        default: {
         $$6$ph = $$3153;
         break L18;
        }
        }
       }
       $$$3153 = $39 ? $40 : $$3153;
       if (!($12)) {
        $42 = HEAP32[$6>>2]|0;
        $43 = ((($42)) + 1|0);
        $44 = ($$$3153|0)==($43|0);
        if ($44) {
         $45 = ((($$$3153)) + -1|0);
         $46 = HEAP8[$45>>0]|0;
         $47 = ($46<<24>>24)==(94);
         if ($47) {
          $$6$ph = $$$3153;
          break;
         }
        }
       }
       $48 = HEAP8[$$$3153>>0]|0;
       $49 = ($48<<24>>24)==(123);
       if ($49) {
        $50 = ((($$$3153)) + 1|0);
        $51 = (_parse_dup($50,$5,$1,$2)|0);
        $52 = ($51|0)==(0|0);
        if ($52) {
         label = 28;
         break L3;
        }
        $$pre = HEAP32[$2>>2]|0;
        $59 = ($$pre|0)==(0);
        $60 = HEAP32[$0>>2]|0;
        if ($59) {
         $61 = (_tre_ast_new_literal($60,-1,-1,-1)|0);
         $$5155342 = $51;$$sink = $61;
        } else {
         $$5155343 = $51;$64 = $60;$65 = $$pre;
         label = 36;
        }
       } else {
        HEAP32[$1>>2] = 0;
        HEAP32[$2>>2] = -1;
        $53 = HEAP8[$$$3153>>0]|0;
        $54 = ($53<<24>>24)==(43);
        if ($54) {
         HEAP32[$1>>2] = 1;
         $$pr167 = HEAP8[$$$3153>>0]|0;
         $56 = $$pr167;
        } else {
         $56 = $53;
        }
        $55 = ($56<<24>>24)==(63);
        if ($55) {
         HEAP32[$2>>2] = 1;
         $103 = 1;
        } else {
         $103 = -1;
        }
        $57 = ((($$$3153)) + 1|0);
        $58 = HEAP32[$0>>2]|0;
        $$5155343 = $57;$64 = $58;$65 = $103;
        label = 36;
       }
       if ((label|0) == 36) {
        label = 0;
        $62 = HEAP32[$13>>2]|0;
        $63 = HEAP32[$1>>2]|0;
        $66 = (_tre_ast_new_iter($64,$62,$63,$65,0)|0);
        $$5155342 = $$5155343;$$sink = $66;
       }
       HEAP32[$13>>2] = $$sink;
       $71 = ($$sink|0)==(0|0);
       if ($71) {
        $$5 = 12;
        break L1;
       } else {
        $$3153 = $$5155342;
       }
      }
      $67 = HEAP32[$0>>2]|0;
      $68 = HEAP32[$13>>2]|0;
      $69 = (_tre_ast_new_catenation($67,$$1144,$68)|0);
      $70 = HEAP8[$$6$ph>>0]|0;
      L47: do {
       if ($12) {
        $72 = ($70<<24>>24)==(124);
        if ($72) {
         label = 40;
         break L16;
        }
        $75 = ($70<<24>>24)==(41);
        $76 = ($$1147|0)!=(0);
        $or$cond7 = $76 & $75;
        $77 = ($70<<24>>24)==(0);
        $or$cond399 = $or$cond7 | $77;
        if ($or$cond399) {
         label = 47;
        } else {
         $$0143 = $69;$$0146 = $$1147;$$0150 = $$6$ph;$$0156 = $$1157;
         continue L5;
        }
       } else {
        switch ($70<<24>>24) {
        case 0:  {
         label = 47;
         break L47;
         break;
        }
        case 92:  {
         break;
        }
        default: {
         $$0143 = $69;$$0146 = $$1147;$$0150 = $$6$ph;$$0156 = $$1157;
         continue L5;
        }
        }
        $78 = ((($$6$ph)) + 1|0);
        $79 = HEAP8[$78>>0]|0;
        switch ($79<<24>>24) {
        case 124: case 41:  {
         break;
        }
        default: {
         $$0143 = $69;$$0146 = $$1147;$$0150 = $$6$ph;$$0156 = $$1157;
         continue L5;
        }
        }
        $80 = HEAP32[$0>>2]|0;
        $81 = (_tre_ast_new_union($80,$$1157,$69)|0);
        $82 = ((($$6$ph)) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = ($83<<24>>24)==(124);
        if ($84) {
         $$sink166 = 2;$104 = $81;
         break L16;
        }
        $85 = ($$1147|0)==(0);
        if ($85) {
         $$5 = 8;
         break L1;
        }
        $86 = ((($$6$ph)) + 2|0);
        $$7 = $86;$93 = $81;$97 = 92;
       }
      } while(0);
      if ((label|0) == 47) {
       label = 0;
       $87 = HEAP32[$0>>2]|0;
       $88 = (_tre_ast_new_union($87,$$1157,$69)|0);
       $89 = ($70<<24>>24)==(41);
       $90 = ((($$6$ph)) + 1|0);
       $$$6 = $89 ? $90 : $$6$ph;
       $$7 = $$$6;$93 = $88;$97 = $70;
      }
      $91 = (($$1147) + -1)|0;
      $92 = (_tre_stack_pop_int($9)|0);
      $94 = (_marksub($0,$93,$92)|0);
      $95 = ($94|0)==(0);
      if (!($95)) {
       $$5 = $94;
       break L1;
      }
      $96 = ($97<<24>>24)==(0);
      $98 = ($$1147|0)<(1);
      $or$cond9 = $98 & $96;
      if ($or$cond9) {
       label = 50;
       break L3;
      }
      $or$cond11 = $98 | $96;
      if ($or$cond11) {
       $$5 = 8;
       break L1;
      }
      $101 = (_tre_stack_pop_voidptr($9)|0);
      $102 = (_tre_stack_pop_voidptr($9)|0);
      $$1144 = $101;$$1147 = $91;$$1157 = $102;$$2152 = $$7;
     }
     if ((label|0) == 40) {
      label = 0;
      $73 = HEAP32[$0>>2]|0;
      $74 = (_tre_ast_new_union($73,$$1157,$69)|0);
      $$sink166 = 1;$104 = $74;
     }
     $100 = (($$6$ph) + ($$sink166)|0);
     $$0143 = 0;$$0146 = $$1147;$$0150 = $100;$$0156 = $104;
    }
    $20 = (_tre_stack_push_voidptr($9,$$0156)|0);
    $21 = ($20|0)==(0);
    if (!($21)) {
     $$5 = $20;
     break L1;
    }
    $22 = (_tre_stack_push_voidptr($9,$$0143)|0);
    $23 = ($22|0)==(0);
    if (!($23)) {
     $$5 = $22;
     break L1;
    }
    $24 = (_tre_stack_push_int($9,$$0149$ph)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     $$5 = $24;
     break L1;
    }
    $26 = (($$0149$ph) + 1)|0;
    $27 = ((($$0150)) + 1|0);
    $28 = ((($$0150)) + 2|0);
    $$ = $12 ? $27 : $28;
    $29 = (($$0146) + 1)|0;
    $$0146$ph = $29;$$0149$ph = $26;$$0150$ph = $$;
   }
   if ((label|0) == 28) {
    $$5 = 10;
    break;
   }
   else if ((label|0) == 50) {
    $99 = ((($0)) + 20|0);
    HEAP32[$99>>2] = $$0149$ph;
    $$5 = 0;
    break;
   }
  } else {
   $$5 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($$5|0);
}
function _tre_add_tags($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$0486 = 0, $$$0501 = 0, $$0 = 0, $$0458 = 0, $$0459$be = 0, $$0459$lcssa = 0, $$0460$be = 0, $$0460$lcssa = 0, $$0460588 = 0, $$0462$be = 0, $$0462$lcssa = 0, $$0462585 = 0, $$0471$be = 0, $$0471$lcssa = 0, $$0471582 = 0, $$0486$be = 0, $$0486$lcssa = 0, $$0486579 = 0, $$0496 = 0, $$0497 = 0;
 var $$0498 = 0, $$0499 = 0, $$0500 = 0, $$0501$ = 0, $$0501$be = 0, $$0501576 = 0, $$0512$ = 0, $$0512$be = 0, $$0512$lcssa = 0, $$0512573 = 0, $$0527$ = 0, $$0527$be = 0, $$0527570 = 0, $$0531 = 0, $$0534 = 0, $$0535599 = 0, $$0536 = 0, $$0538 = 0, $$0541 = 0, $$10481 = 0;
 var $$10511 = 0, $$10522 = 0, $$11 = 0, $$11482 = 0, $$11523 = 0, $$12 = 0, $$13484 = 0, $$13525 = 0, $$14 = 0, $$14485 = 0, $$14526 = 0, $$1461 = 0, $$1472 = 0, $$15 = 0, $$1513 = 0, $$1537 = 0, $$1539 = 0, $$16 = 0, $$2473 = 0, $$2514 = 0;
 var $$2529 = 0, $$2540568 = 0, $$3504 = 0, $$3530 = 0, $$4 = 0, $$543 = 0, $$5467 = 0, $$5476 = 0, $$5491 = 0, $$5517 = 0, $$6477 = 0, $$6492 = 0, $$6518 = 0, $$7469 = 0, $$7508 = 0, $$8 = 0, $$8494 = 0, $$8509 = 0, $$9480 = 0, $$9521 = 0;
 var $$lcssa559 = 0, $$lobit = 0, $$lobit$not = 0, $$pn = 0, $$pre = 0, $$pre$phi608Z2D = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond542 = 0, $or$cond6 = 0, $or$cond6569 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_tre_stack_num_objects($1)|0);
 $5 = ($0|0)==(0|0);
 $6 = ($3|0)==(0|0);
 $7 = $5 | $6;
 if (!($7)) {
  $8 = ((($3)) + 48|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$10>>2] = -1;
 }
 $11 = ((($3)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 << 3;
 $14 = (($13) + 8)|0;
 $15 = (_malloc($14)|0);
 $16 = ($15|0)==(0|0);
 do {
  if ($16) {
   $$0458 = 12;
  } else {
   HEAP32[$15>>2] = -1;
   $17 = HEAP32[$11>>2]|0;
   $18 = $17 << 2;
   $19 = (($18) + 4)|0;
   $20 = (_malloc($19)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    _free($15);
    $$0458 = 12;
    break;
   }
   HEAP32[$20>>2] = -1;
   $22 = HEAP32[$11>>2]|0;
   $23 = $22 << 3;
   $24 = (($23) + 8)|0;
   $25 = (_malloc($24)|0);
   $26 = ($25|0)==(0|0);
   if ($26) {
    _free($15);
    _free($20);
    $$0458 = 12;
    break;
   }
   $27 = HEAP32[$11>>2]|0;
   $$0535599 = 0;
   while(1) {
    $28 = (($25) + ($$0535599<<3)|0);
    HEAP32[$28>>2] = -1;
    $29 = (($$0535599) + 1)|0;
    $30 = ($29>>>0)>($27>>>0);
    if ($30) {
     break;
    } else {
     $$0535599 = $29;
    }
   }
   (_tre_stack_push_voidptr($1,$2)|0);
   $31 = (_tre_stack_push_int($1,0)|0);
   $32 = (_tre_stack_num_objects($1)|0);
   $33 = ($32|0)<=($4|0);
   $34 = ($31|0)!=(0);
   $or$cond6569 = $34 | $33;
   L15: do {
    if ($or$cond6569) {
     $$0459$lcssa = $31;$$0460$lcssa = $15;$$0462$lcssa = 0;$$0471$lcssa = 0;$$0486$lcssa = 0;$$0512$lcssa = -1;
    } else {
     $35 = ((($3)) + 32|0);
     $36 = ((($3)) + 36|0);
     $37 = ((($3)) + 16|0);
     $$0460588 = $15;$$0462585 = 0;$$0471582 = 0;$$0486579 = 0;$$0501576 = 1;$$0512573 = -1;$$0527570 = 0;
     while(1) {
      $38 = (_tre_stack_pop_int($1)|0);
      L19: do {
       switch ($38|0) {
       case 6:  {
        $42 = (_tre_stack_pop_int($1)|0);
        $$0536 = 0;
        while(1) {
         $43 = (($$0460588) + ($$0536<<2)|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = ($44|0)>(-1);
         $46 = (($$0536) + 1)|0;
         if ($45) {
          $$0536 = $46;
         } else {
          break;
         }
        }
        $47 = $42 << 1;
        $48 = $47 | 1;
        HEAP32[$43>>2] = $48;
        $49 = (($$0460588) + ($46<<2)|0);
        HEAP32[$49>>2] = -1;
        $$1537 = 0;
        while(1) {
         $50 = (($20) + ($$1537<<2)|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($51|0)>(-1);
         $53 = (($$1537) + 1)|0;
         if ($52) {
          $$1537 = $53;
         } else {
          break;
         }
        }
        $54 = (($$1537) + -1)|0;
        $55 = (($20) + ($54<<2)|0);
        HEAP32[$55>>2] = -1;
        $$0459$be = 0;$$0460$be = $$0460588;$$0462$be = $$0462585;$$0471$be = $$0471582;$$0486$be = $$0486579;$$0501$be = $$0501576;$$0512$be = $$0512573;$$0527$be = $$0527570;
        break;
       }
       case 0:  {
        $56 = (_tre_stack_pop_voidptr($1)|0);
        $57 = ((($56)) + 12|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = ($58|0)>(-1);
        if ($59) {
         $$0538 = 0;
         while(1) {
          $60 = (($$0460588) + ($$0538<<2)|0);
          $61 = HEAP32[$60>>2]|0;
          $62 = ($61|0)>(-1);
          $63 = (($$0538) + 1)|0;
          if ($62) {
           $$0538 = $63;
          } else {
           break;
          }
         }
         $64 = $58 << 1;
         HEAP32[$60>>2] = $64;
         $65 = (($$0460588) + ($63<<2)|0);
         HEAP32[$65>>2] = -1;
         if (!($7)) {
          $$1539 = 0;
          while(1) {
           $66 = (($20) + ($$1539<<2)|0);
           $67 = HEAP32[$66>>2]|0;
           $68 = ($67|0)>(-1);
           $69 = (($$1539) + 1)|0;
           if ($68) {
            $$1539 = $69;
           } else {
            break;
           }
          }
          $70 = HEAP32[$37>>2]|0;
          $71 = (((($70) + (($58*12)|0)|0)) + 8|0);
          HEAP32[$71>>2] = 0;
          $72 = ($$1539|0)>(0);
          if ($72) {
           $73 = $$1539 << 2;
           $74 = (($73) + 4)|0;
           $75 = (_malloc($74)|0);
           $76 = ($75|0)==(0|0);
           if ($76) {
            $$0459$be = 12;$$0460$be = $$0460588;$$0462$be = $$0462585;$$0471$be = $$0471582;$$0486$be = $$0486579;$$0501$be = $$0501576;$$0512$be = $$0512573;$$0527$be = $$0527570;
            break L19;
           }
           $77 = HEAP32[$37>>2]|0;
           $78 = (((($77) + (($58*12)|0)|0)) + 8|0);
           HEAP32[$78>>2] = $75;
           $79 = HEAP32[$20>>2]|0;
           $80 = ($79|0)>(-1);
           if ($80) {
            $$2540568 = 0;$81 = $79;$82 = $75;
            while(1) {
             HEAP32[$82>>2] = $81;
             $83 = (($$2540568) + 1)|0;
             $84 = (($20) + ($83<<2)|0);
             $85 = HEAP32[$84>>2]|0;
             $86 = ($85|0)>(-1);
             $87 = (($75) + ($83<<2)|0);
             if ($86) {
              $$2540568 = $83;$81 = $85;$82 = $87;
             } else {
              $$lcssa559 = $87;
              break;
             }
            }
           } else {
            $$lcssa559 = $75;
           }
           HEAP32[$$lcssa559>>2] = -1;
          }
         }
         $88 = HEAP32[$57>>2]|0;
         $89 = (_tre_stack_push_int($1,$88)|0);
         $90 = ($89|0)==(0);
         if (!($90)) {
          $$0459$be = $89;$$0460$be = $$0460588;$$0462$be = $$0462585;$$0471$be = $$0471582;$$0486$be = $$0486579;$$0501$be = $$0501576;$$0512$be = $$0512573;$$0527$be = $$0527570;
          break L19;
         }
         $91 = (_tre_stack_push_int($1,6)|0);
         $92 = ($91|0)==(0);
         if (!($92)) {
          $$0459$be = $91;$$0460$be = $$0460588;$$0462$be = $$0462585;$$0471$be = $$0471582;$$0486$be = $$0486579;$$0501$be = $$0501576;$$0512$be = $$0512573;$$0527$be = $$0527570;
          break L19;
         }
        }
        $93 = HEAP32[$56>>2]|0;
        L45: do {
         switch ($93|0) {
         case 0:  {
          $94 = ((($56)) + 4|0);
          $95 = HEAP32[$94>>2]|0;
          $96 = HEAP32[$95>>2]|0;
          $97 = ($96|0)>(-1);
          $98 = ($96|0)==(-4);
          $or$cond542 = $97 | $98;
          if ($or$cond542) {
           $99 = HEAP32[$$0460588>>2]|0;
           $100 = ($99|0)>(-1);
           if ($100) {
            if ($7) {
             $114 = ((($56)) + 20|0);
             HEAP32[$114>>2] = 1;
             $$2473 = $$0471582;$$2514 = $$0512573;$$4 = 0;
            } else {
             $101 = (_tre_add_tag_left($0,$56,$$0486579)|0);
             $102 = HEAP32[$35>>2]|0;
             $103 = (($102) + ($$0486579<<2)|0);
             HEAP32[$103>>2] = $$0527570;
             $104 = ($$0512573|0)>(-1);
             if ($104) {
              $105 = HEAP32[$36>>2]|0;
              $$0541 = 0;
              while(1) {
               $106 = (($105) + ($$0541<<2)|0);
               $107 = HEAP32[$106>>2]|0;
               $108 = ($107|0)>(-1);
               $109 = (($$0541) + 1)|0;
               if ($108) {
                $$0541 = $109;
               } else {
                break;
               }
              }
              HEAP32[$106>>2] = $$0486579;
              $110 = (($105) + ($109<<2)|0);
              HEAP32[$110>>2] = $$0512573;
              $111 = (($$0541) + 2)|0;
              $112 = (($105) + ($111<<2)|0);
              HEAP32[$112>>2] = -1;
              $113 = (($$0471582) + 1)|0;
              $$1472 = $113;$$1513 = -1;
             } else {
              $$1472 = $$0471582;$$1513 = $$0512573;
             }
             _tre_purge_regset($$0460588,$3,$$0486579);
             $$2473 = $$1472;$$2514 = $$1513;$$4 = $101;
            }
            HEAP32[$$0460588>>2] = -1;
            $115 = (($$0462585) + 1)|0;
            $116 = (($$0501576) + 1)|0;
            $$10511 = $116;$$13484 = $$2473;$$13525 = $$2514;$$14 = $$4;$$2529 = $$0527570;$$7469 = $115;$$8494 = $$0501576;
           } else {
            $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = 0;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
           }
          } else {
           $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = 0;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
          }
          break;
         }
         case 1:  {
          $117 = ((($56)) + 4|0);
          $118 = HEAP32[$117>>2]|0;
          $119 = HEAP32[$118>>2]|0;
          $120 = ((($118)) + 4|0);
          $121 = HEAP32[$120>>2]|0;
          $122 = (_tre_stack_push_voidptr($1,$56)|0);
          $123 = ($122|0)==(0);
          if ($123) {
           $124 = (_tre_stack_push_int($1,5)|0);
           $125 = ($124|0)==(0);
           if ($125) {
            $126 = (_tre_stack_push_voidptr($1,$121)|0);
            $127 = ($126|0)==(0);
            if ($127) {
             $128 = (_tre_stack_push_int($1,0)|0);
             $129 = ($128|0)==(0);
             if ($129) {
              $130 = ((($119)) + 20|0);
              $131 = HEAP32[$130>>2]|0;
              $132 = (($131) + ($$0501576))|0;
              $133 = (_tre_stack_push_int($1,$132)|0);
              $134 = ($133|0)==(0);
              if ($134) {
               $135 = HEAP32[$130>>2]|0;
               $136 = ($135|0)>(0);
               if ($136) {
                $137 = ((($121)) + 20|0);
                $138 = HEAP32[$137>>2]|0;
                $139 = ($138|0)>(0);
                $$0501$ = $139 ? $$0501576 : -1;
                $140 = $139&1;
                $$$0501 = (($$0501576) + ($140))|0;
                $$0534 = $$0501$;$$3504 = $$$0501;
               } else {
                $$0534 = -1;$$3504 = $$0501576;
               }
               $141 = (_tre_stack_push_int($1,$$0534)|0);
               $142 = ($141|0)==(0);
               if ($142) {
                $143 = (_tre_stack_push_int($1,4)|0);
                $144 = ($143|0)==(0);
                if ($144) {
                 $145 = (_tre_stack_push_voidptr($1,$119)|0);
                 $146 = ($145|0)==(0);
                 if ($146) {
                  $147 = (_tre_stack_push_int($1,0)|0);
                  $$10511 = $$3504;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $147;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
                 } else {
                  $$10511 = $$3504;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $145;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
                 }
                } else {
                 $$10511 = $$3504;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $143;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
                }
               } else {
                $$10511 = $$3504;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $141;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
               }
              } else {
               $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $133;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
              }
             } else {
              $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $128;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
             }
            } else {
             $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $126;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
            }
           } else {
            $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $124;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
           }
          } else {
           $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $122;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
          }
          break;
         }
         case 2:  {
          $148 = ((($56)) + 4|0);
          $149 = HEAP32[$148>>2]|0;
          if ($7) {
           $150 = HEAP32[$$0460588>>2]|0;
           $151 = ($150|0)>(-1);
           if ($151) {
            $157 = 1;
           } else {
            $152 = ((($149)) + 12|0);
            $153 = HEAP8[$152>>0]|0;
            $154 = $153 & 1;
            $155 = ($154<<24>>24)!=(0);
            $157 = $155;
           }
           $156 = $157&1;
           $158 = (_tre_stack_push_int($1,$156)|0);
           $159 = ($158|0)==(0);
           if (!($159)) {
            $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $158;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
            break L45;
           }
          } else {
           $160 = (_tre_stack_push_int($1,$$0486579)|0);
           $161 = ($160|0)==(0);
           if (!($161)) {
            $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $160;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
            break L45;
           }
           $162 = ((($149)) + 12|0);
           $163 = HEAP8[$162>>0]|0;
           $164 = $163 & 1;
           $165 = $164&255;
           $166 = (_tre_stack_push_int($1,$165)|0);
           $167 = ($166|0)==(0);
           if (!($167)) {
            $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $166;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
            break L45;
           }
          }
          $168 = (_tre_stack_push_voidptr($1,$56)|0);
          $169 = ($168|0)==(0);
          if ($169) {
           $170 = (_tre_stack_push_int($1,1)|0);
           $171 = ($170|0)==(0);
           if ($171) {
            $172 = HEAP32[$149>>2]|0;
            $173 = (_tre_stack_push_voidptr($1,$172)|0);
            $174 = ($173|0)==(0);
            if ($174) {
             $175 = (_tre_stack_push_int($1,0)|0);
             $176 = ($175|0)==(0);
             if ($176) {
              $177 = HEAP32[$$0460588>>2]|0;
              $178 = ($177|0)>(-1);
              if (!($178)) {
               $179 = ((($149)) + 12|0);
               $180 = HEAP8[$179>>0]|0;
               $181 = $180 & 1;
               $182 = ($181<<24>>24)==(0);
               if ($182) {
                $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = 0;$$2529 = 0;$$7469 = $$0462585;$$8494 = $$0486579;
                break L45;
               }
              }
              if ($7) {
               $$6477 = $$0471582;$$6518 = $$0512573;$$8 = 0;
              } else {
               $183 = (_tre_add_tag_left($0,$56,$$0486579)|0);
               $184 = ((($149)) + 12|0);
               $185 = HEAP8[$184>>0]|0;
               $186 = $185 & 1;
               $187 = ($186<<24>>24)==(0);
               $$0527$ = $187 ? $$0527570 : 1;
               $$pn = HEAP32[$35>>2]|0;
               $$sink2 = (($$pn) + ($$0486579<<2)|0);
               HEAP32[$$sink2>>2] = $$0527$;
               $188 = ($$0512573|0)>(-1);
               if ($188) {
                $189 = HEAP32[$36>>2]|0;
                $$0531 = 0;
                while(1) {
                 $190 = (($189) + ($$0531<<2)|0);
                 $191 = HEAP32[$190>>2]|0;
                 $192 = ($191|0)>(-1);
                 $193 = (($$0531) + 1)|0;
                 if ($192) {
                  $$0531 = $193;
                 } else {
                  break;
                 }
                }
                HEAP32[$190>>2] = $$0486579;
                $194 = (($189) + ($193<<2)|0);
                HEAP32[$194>>2] = $$0512573;
                $195 = (($$0531) + 2)|0;
                $196 = (($189) + ($195<<2)|0);
                HEAP32[$196>>2] = -1;
                $197 = (($$0471582) + 1)|0;
                $$5476 = $197;$$5517 = -1;
               } else {
                $$5476 = $$0471582;$$5517 = $$0512573;
               }
               _tre_purge_regset($$0460588,$3,$$0486579);
               $$6477 = $$5476;$$6518 = $$5517;$$8 = $183;
              }
              HEAP32[$$0460588>>2] = -1;
              $198 = (($$0462585) + 1)|0;
              $199 = (($$0501576) + 1)|0;
              $$10511 = $199;$$13484 = $$6477;$$13525 = $$6518;$$14 = $$8;$$2529 = 0;$$7469 = $198;$$8494 = $$0501576;
             } else {
              $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $175;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
             }
            } else {
             $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $173;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
            }
           } else {
            $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $170;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
           }
          } else {
           $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $168;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
          }
          break;
         }
         case 3:  {
          $200 = ((($56)) + 4|0);
          $201 = HEAP32[$200>>2]|0;
          $202 = HEAP32[$201>>2]|0;
          $203 = ((($201)) + 4|0);
          $204 = HEAP32[$203>>2]|0;
          $205 = HEAP32[$$0460588>>2]|0;
          $206 = ($205|0)>(-1);
          $207 = (($$0501576) + 1)|0;
          $$0499 = $206 ? $207 : $$0501576;
          $208 = (_tre_stack_push_int($1,$$0499)|0);
          $209 = ($208|0)==(0);
          if ($209) {
           $$0500 = $206 ? $$0501576 : $$0486579;
           $210 = (_tre_stack_push_int($1,$$0500)|0);
           $211 = ($210|0)==(0);
           if ($211) {
            $212 = (_tre_stack_push_voidptr($1,$$0460588)|0);
            $213 = ($212|0)==(0);
            if ($213) {
             $214 = HEAP32[$$0460588>>2]|0;
             $$lobit = $214 >>> 31;
             $$lobit$not = $$lobit ^ 1;
             $215 = (_tre_stack_push_int($1,$$lobit$not)|0);
             $216 = ($215|0)==(0);
             if ($216) {
              $217 = (_tre_stack_push_voidptr($1,$56)|0);
              $218 = ($217|0)==(0);
              if ($218) {
               $219 = (_tre_stack_push_voidptr($1,$204)|0);
               $220 = ($219|0)==(0);
               if ($220) {
                $221 = (_tre_stack_push_voidptr($1,$202)|0);
                $222 = ($221|0)==(0);
                if ($222) {
                 $223 = (_tre_stack_push_int($1,3)|0);
                 $224 = ($223|0)==(0);
                 if ($224) {
                  $225 = (_tre_stack_push_voidptr($1,$204)|0);
                  $226 = ($225|0)==(0);
                  if ($226) {
                   $227 = (_tre_stack_push_int($1,0)|0);
                   $228 = ($227|0)==(0);
                   if (!($228)) {
                    $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $227;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
                    break L45;
                   }
                   $229 = (_tre_stack_push_int($1,2)|0);
                   $230 = ($229|0)==(0);
                   if (!($230)) {
                    $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $229;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
                    break L45;
                   }
                   $231 = (_tre_stack_push_voidptr($1,$202)|0);
                   $232 = ($231|0)==(0);
                   if (!($232)) {
                    $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $231;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
                    break L45;
                   }
                   $233 = (_tre_stack_push_int($1,0)|0);
                   $234 = ($233|0)==(0);
                   if (!($234)) {
                    $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $233;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
                    break L45;
                   }
                   $235 = HEAP32[$$0460588>>2]|0;
                   $236 = ($235|0)>(-1);
                   if ($236) {
                    if ($7) {
                     $$10481 = $$0471582;$$10522 = $$0512573;$$11 = 0;
                    } else {
                     $237 = (_tre_add_tag_left($0,$56,$$0486579)|0);
                     $238 = HEAP32[$35>>2]|0;
                     $239 = (($238) + ($$0486579<<2)|0);
                     HEAP32[$239>>2] = $$0527570;
                     $240 = ($$0512573|0)>(-1);
                     if ($240) {
                      $241 = HEAP32[$36>>2]|0;
                      $$0498 = 0;
                      while(1) {
                       $242 = (($241) + ($$0498<<2)|0);
                       $243 = HEAP32[$242>>2]|0;
                       $244 = ($243|0)>(-1);
                       $245 = (($$0498) + 1)|0;
                       if ($244) {
                        $$0498 = $245;
                       } else {
                        break;
                       }
                      }
                      HEAP32[$242>>2] = $$0486579;
                      $246 = (($241) + ($245<<2)|0);
                      HEAP32[$246>>2] = $$0512573;
                      $247 = (($$0498) + 2)|0;
                      $248 = (($241) + ($247<<2)|0);
                      HEAP32[$248>>2] = -1;
                      $249 = (($$0471582) + 1)|0;
                      $$9480 = $249;$$9521 = -1;
                     } else {
                      $$9480 = $$0471582;$$9521 = $$0512573;
                     }
                     _tre_purge_regset($$0460588,$3,$$0486579);
                     $$10481 = $$9480;$$10522 = $$9521;$$11 = $237;
                    }
                    HEAP32[$$0460588>>2] = -1;
                    $250 = (($$0462585) + 1)|0;
                    $$11482 = $$10481;$$11523 = $$10522;$$12 = $$11;$$5467 = $250;$$5491 = $$0501576;$$7508 = $207;
                   } else {
                    $$11482 = $$0471582;$$11523 = $$0512573;$$12 = 0;$$5467 = $$0462585;$$5491 = $$0486579;$$7508 = $$0501576;
                   }
                   $251 = ((($56)) + 16|0);
                   $252 = HEAP32[$251>>2]|0;
                   $253 = ($252|0)>(0);
                   $254 = (($$7508) + 1)|0;
                   $255 = (($$7508) + 2)|0;
                   $$8509 = $253 ? $255 : $$7508;
                   $$6492 = $253 ? $254 : $$5491;
                   $$10511 = $$8509;$$13484 = $$11482;$$13525 = $$11523;$$14 = $$12;$$2529 = $$0527570;$$7469 = $$5467;$$8494 = $$6492;
                  } else {
                   $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $225;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
                  }
                 } else {
                  $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $223;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
                 }
                } else {
                 $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $221;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
                }
               } else {
                $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $219;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
               }
              } else {
               $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $217;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
              }
             } else {
              $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $215;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
             }
            } else {
             $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $212;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
            }
           } else {
            $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $210;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
           }
          } else {
           $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = $208;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
          }
          break;
         }
         default: {
          $$10511 = $$0501576;$$13484 = $$0471582;$$13525 = $$0512573;$$14 = 0;$$2529 = $$0527570;$$7469 = $$0462585;$$8494 = $$0486579;
         }
         }
        } while(0);
        $256 = HEAP32[$57>>2]|0;
        $257 = ($256|0)>(-1);
        if ($257) {
         $$0497 = 0;
         while(1) {
          $258 = (($20) + ($$0497<<2)|0);
          $259 = HEAP32[$258>>2]|0;
          $260 = ($259|0)>(-1);
          $261 = (($$0497) + 1)|0;
          if ($260) {
           $$0497 = $261;
          } else {
           break;
          }
         }
         HEAP32[$258>>2] = $256;
         $262 = (($20) + ($261<<2)|0);
         HEAP32[$262>>2] = -1;
         $$0459$be = $$14;$$0460$be = $$0460588;$$0462$be = $$7469;$$0471$be = $$13484;$$0486$be = $$8494;$$0501$be = $$10511;$$0512$be = $$13525;$$0527$be = $$2529;
        } else {
         $$0459$be = $$14;$$0460$be = $$0460588;$$0462$be = $$7469;$$0471$be = $$13484;$$0486$be = $$8494;$$0501$be = $$10511;$$0512$be = $$13525;$$0527$be = $$2529;
        }
        break;
       }
       case 1:  {
        $263 = (_tre_stack_pop_voidptr($1)|0);
        if ($7) {
         $264 = ((($263)) + 4|0);
         $265 = HEAP32[$264>>2]|0;
         $266 = HEAP32[$265>>2]|0;
         $267 = ((($266)) + 20|0);
         $268 = HEAP32[$267>>2]|0;
         $269 = (_tre_stack_pop_int($1)|0);
         $270 = (($269) + ($268))|0;
         $271 = ((($263)) + 20|0);
         HEAP32[$271>>2] = $270;
         $$0496 = 0;$$14526 = -1;
        } else {
         $272 = (_tre_stack_pop_int($1)|0);
         $273 = (_tre_stack_pop_int($1)|0);
         $274 = ($272|0)==(0);
         $$0512$ = $274 ? $$0512573 : $273;
         $$0496 = $272;$$14526 = $$0512$;
        }
        $275 = ($$0496|0)==(0);
        $$543 = $275&1;
        $$3530 = $7 ? $$0527570 : $$543;
        $$0459$be = 0;$$0460$be = $$0460588;$$0462$be = $$0462585;$$0471$be = $$0471582;$$0486$be = $$0486579;$$0501$be = $$0501576;$$0512$be = $$14526;$$0527$be = $$3530;
        break;
       }
       case 4:  {
        $276 = (_tre_stack_pop_int($1)|0);
        $277 = (_tre_stack_pop_int($1)|0);
        $278 = ($276|0)>(-1);
        $$$0486 = $278 ? $276 : $$0486579;
        $$0459$be = 0;$$0460$be = $$0460588;$$0462$be = $$0462585;$$0471$be = $$0471582;$$0486$be = $$$0486;$$0501$be = $277;$$0512$be = $$0512573;$$0527$be = $$0527570;
        break;
       }
       case 5:  {
        $279 = (_tre_stack_pop_voidptr($1)|0);
        if ($7) {
         $280 = ((($279)) + 4|0);
         $281 = HEAP32[$280>>2]|0;
         $282 = HEAP32[$281>>2]|0;
         $283 = ((($282)) + 20|0);
         $284 = HEAP32[$283>>2]|0;
         $285 = ((($281)) + 4|0);
         $286 = HEAP32[$285>>2]|0;
         $287 = ((($286)) + 20|0);
         $288 = HEAP32[$287>>2]|0;
         $289 = (($288) + ($284))|0;
         $290 = ((($279)) + 20|0);
         HEAP32[$290>>2] = $289;
         $$0459$be = 0;$$0460$be = $$0460588;$$0462$be = $$0462585;$$0471$be = $$0471582;$$0486$be = $$0486579;$$0501$be = $$0501576;$$0512$be = $$0512573;$$0527$be = $$0527570;
        } else {
         $$0459$be = 0;$$0460$be = $$0460588;$$0462$be = $$0462585;$$0471$be = $$0471582;$$0486$be = $$0486579;$$0501$be = $$0501576;$$0512$be = $$0512573;$$0527$be = $$0527570;
        }
        break;
       }
       case 2:  {
        $$1461 = $$0460588;
        while(1) {
         $291 = HEAP32[$$1461>>2]|0;
         $292 = ($291|0)>(-1);
         $293 = ((($$1461)) + 4|0);
         if ($292) {
          $$1461 = $293;
         } else {
          $$0459$be = 0;$$0460$be = $$1461;$$0462$be = $$0462585;$$0471$be = $$0471582;$$0486$be = $$0486579;$$0501$be = $$0501576;$$0512$be = $$0512573;$$0527$be = $$0527570;
          break;
         }
        }
        break;
       }
       case 3:  {
        $294 = (_tre_stack_pop_voidptr($1)|0);
        $295 = (_tre_stack_pop_voidptr($1)|0);
        $296 = (_tre_stack_pop_voidptr($1)|0);
        $297 = (_tre_stack_pop_int($1)|0);
        if ($7) {
         $298 = ((($296)) + 4|0);
         $299 = HEAP32[$298>>2]|0;
         $300 = HEAP32[$299>>2]|0;
         $301 = ((($300)) + 20|0);
         $302 = HEAP32[$301>>2]|0;
         $303 = ((($299)) + 4|0);
         $304 = HEAP32[$303>>2]|0;
         $305 = ((($304)) + 20|0);
         $306 = HEAP32[$305>>2]|0;
         $307 = ((($296)) + 16|0);
         $308 = HEAP32[$307>>2]|0;
         $309 = ($308|0)>(0);
         $310 = $309 ? 2 : 0;
         $311 = (($302) + ($297))|0;
         $312 = (($311) + ($306))|0;
         $313 = (($312) + ($310))|0;
         $314 = ((($296)) + 20|0);
         HEAP32[$314>>2] = $313;
         $$pre$phi608Z2D = $307;
        } else {
         $$pre = ((($296)) + 16|0);
         $$pre$phi608Z2D = $$pre;
        }
        $315 = (_tre_stack_pop_voidptr($1)|0);
        $316 = (_tre_stack_pop_int($1)|0);
        $317 = (_tre_stack_pop_int($1)|0);
        $318 = HEAP32[$$pre$phi608Z2D>>2]|0;
        $319 = ($318|0)>(0);
        if ($319) {
         if ($7) {
          $$16 = 0;
         } else {
          $320 = (_tre_add_tag_right($0,$294,$316)|0);
          $321 = HEAP32[$35>>2]|0;
          $322 = (($321) + ($316<<2)|0);
          HEAP32[$322>>2] = 1;
          $323 = ($320|0)==(0);
          if ($323) {
           $324 = (_tre_add_tag_right($0,$295,$317)|0);
           $$15 = $324;
          } else {
           $$15 = $320;
          }
          $325 = HEAP32[$35>>2]|0;
          $326 = (($325) + ($317<<2)|0);
          HEAP32[$326>>2] = 1;
          $$16 = $$15;
         }
         $327 = (($$0462585) + 2)|0;
         $$0459$be = $$16;$$0460$be = $315;$$0462$be = $327;$$0471$be = $$0471582;$$0486$be = $$0486579;$$0501$be = $$0501576;$$0512$be = $$0512573;$$0527$be = 1;
        } else {
         $$0459$be = 0;$$0460$be = $315;$$0462$be = $$0462585;$$0471$be = $$0471582;$$0486$be = $$0486579;$$0501$be = $$0501576;$$0512$be = $$0512573;$$0527$be = 1;
        }
        break;
       }
       default: {
        $$0459$be = 0;$$0460$be = $$0460588;$$0462$be = $$0462585;$$0471$be = $$0471582;$$0486$be = $$0486579;$$0501$be = $$0501576;$$0512$be = $$0512573;$$0527$be = $$0527570;
       }
       }
      } while(0);
      $39 = (_tre_stack_num_objects($1)|0);
      $40 = ($39|0)<=($4|0);
      $41 = ($$0459$be|0)!=(0);
      $or$cond6 = $41 | $40;
      if ($or$cond6) {
       $$0459$lcssa = $$0459$be;$$0460$lcssa = $$0460$be;$$0462$lcssa = $$0462$be;$$0471$lcssa = $$0471$be;$$0486$lcssa = $$0486$be;$$0512$lcssa = $$0512$be;
       break L15;
      } else {
       $$0460588 = $$0460$be;$$0462585 = $$0462$be;$$0471582 = $$0471$be;$$0486579 = $$0486$be;$$0501576 = $$0501$be;$$0512573 = $$0512$be;$$0527570 = $$0527$be;
      }
     }
    }
   } while(0);
   if ($7) {
    $$14485 = $$0471$lcssa;
   } else {
    _tre_purge_regset($$0460$lcssa,$3,$$0486$lcssa);
    $328 = ($$0512$lcssa|0)>(-1);
    if ($328) {
     $329 = ((($3)) + 36|0);
     $330 = HEAP32[$329>>2]|0;
     $$0 = 0;
     while(1) {
      $331 = (($330) + ($$0<<2)|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = ($332|0)>(-1);
      $334 = (($$0) + 1)|0;
      if ($333) {
       $$0 = $334;
      } else {
       break;
      }
     }
     HEAP32[$331>>2] = $$0486$lcssa;
     $335 = (($330) + ($334<<2)|0);
     HEAP32[$335>>2] = $$0512$lcssa;
     $336 = (($$0) + 2)|0;
     $337 = (($330) + ($336<<2)|0);
     HEAP32[$337>>2] = -1;
     $338 = (($$0471$lcssa) + 1)|0;
     $$14485 = $338;
    } else {
     $$14485 = $$0471$lcssa;
    }
   }
   $339 = ((($3)) + 48|0);
   HEAP32[$339>>2] = $$0462$lcssa;
   $340 = ((($3)) + 40|0);
   HEAP32[$340>>2] = $$0462$lcssa;
   $341 = ((($3)) + 44|0);
   HEAP32[$341>>2] = $$14485;
   _free($15);
   _free($20);
   _free($25);
   $$0458 = $$0459$lcssa;
  }
 } while(0);
 return ($$0458|0);
}
function _tre_expand_ast($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0167$lcssa = 0, $$0180$lcssa = 0, $$0185$lcssa = 0, $$0185241279 = 0, $$0189249$be = 0, $$0189249$lcssa = 0, $$0189249284 = 0, $$0194248$be = 0, $$0194248285 = 0, $$1184245 = 0, $$1186 = 0, $$13 = 0, $$210 = 0, $$2182 = 0, $$3188 = 0, $$3188217 = 0, $$4$ph = 0, $$6$ph = 0, $$8$ph = 0, $$be = 0;
 var $$lcssa = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = (_tre_stack_num_objects($1)|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$6>>2] = 0;
 $11 = (_tre_stack_push_voidptr($1,$2)|0);
 $12 = ($11|0)==(0);
 L1: do {
  if ($12) {
   $13 = (_tre_stack_push_int($1,0)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = (_tre_stack_num_objects($1)|0);
    $16 = ($15|0)>($10|0);
    L4: do {
     if ($16) {
      $$0189249284 = 0;$$0194248285 = 0;$28 = 0;
      L5: while(1) {
       $17 = (_tre_stack_pop_int($1)|0);
       $18 = (_tre_stack_pop_voidptr($1)|0);
       L7: do {
        switch ($17|0) {
        case 0:  {
         $19 = HEAP32[$18>>2]|0;
         switch ($19|0) {
         case 0:  {
          $20 = ((($18)) + 4|0);
          $21 = HEAP32[$20>>2]|0;
          $22 = HEAP32[$21>>2]|0;
          $23 = ($22|0)>(-1);
          $24 = ($22|0)==(-4);
          $or$cond = $23 | $24;
          if (!($or$cond)) {
           $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
           break L7;
          }
          $25 = ((($21)) + 8|0);
          $26 = HEAP32[$25>>2]|0;
          $27 = (($26) + ($28))|0;
          HEAP32[$25>>2] = $27;
          $29 = HEAP32[$6>>2]|0;
          $30 = ($27|0)>($29|0);
          if (!($30)) {
           $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
           break L7;
          }
          HEAP32[$6>>2] = $27;
          $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
          break L7;
          break;
         }
         case 3:  {
          $31 = ((($18)) + 4|0);
          $32 = HEAP32[$31>>2]|0;
          $33 = ((($32)) + 4|0);
          $34 = HEAP32[$33>>2]|0;
          $35 = (_tre_stack_push_voidptr($1,$34)|0);
          $36 = ($35|0)==(0);
          if (!($36)) {
           $$0167$lcssa = $35;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $37 = (_tre_stack_push_int($1,0)|0);
          $38 = ($37|0)==(0);
          if (!($38)) {
           $$0167$lcssa = $37;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $39 = HEAP32[$32>>2]|0;
          $40 = (_tre_stack_push_voidptr($1,$39)|0);
          $41 = ($40|0)==(0);
          if (!($41)) {
           $$0167$lcssa = $40;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          break;
         }
         case 1:  {
          $42 = ((($18)) + 4|0);
          $43 = HEAP32[$42>>2]|0;
          $44 = ((($43)) + 4|0);
          $45 = HEAP32[$44>>2]|0;
          $46 = (_tre_stack_push_voidptr($1,$45)|0);
          $47 = ($46|0)==(0);
          if (!($47)) {
           $$0167$lcssa = $46;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $48 = (_tre_stack_push_int($1,0)|0);
          $49 = ($48|0)==(0);
          if (!($49)) {
           $$0167$lcssa = $48;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $50 = HEAP32[$43>>2]|0;
          $51 = (_tre_stack_push_voidptr($1,$50)|0);
          $52 = ($51|0)==(0);
          if (!($52)) {
           $$0167$lcssa = $51;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          break;
         }
         case 2:  {
          $53 = ((($18)) + 4|0);
          $54 = HEAP32[$53>>2]|0;
          $55 = (_tre_stack_push_int($1,$28)|0);
          $56 = ($55|0)==(0);
          if (!($56)) {
           $$0167$lcssa = $55;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $57 = (_tre_stack_push_voidptr($1,$18)|0);
          $58 = ($57|0)==(0);
          if (!($58)) {
           $$0167$lcssa = $57;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $59 = (_tre_stack_push_int($1,1)|0);
          $60 = ($59|0)==(0);
          if (!($60)) {
           $$0167$lcssa = $59;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $61 = HEAP32[$54>>2]|0;
          $62 = (_tre_stack_push_voidptr($1,$61)|0);
          $63 = ($62|0)==(0);
          if (!($63)) {
           $$0167$lcssa = $62;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $64 = (_tre_stack_push_int($1,0)|0);
          $65 = ($64|0)==(0);
          if (!($65)) {
           $$0167$lcssa = $64;$$0189249$lcssa = $$0189249284;
           break L4;
          }
          $66 = ((($54)) + 4|0);
          $67 = HEAP32[$66>>2]|0;
          $68 = ($67|0)>(1);
          if ($68) {
           label = 22;
          } else {
           $69 = ((($54)) + 8|0);
           $70 = HEAP32[$69>>2]|0;
           $71 = ($70|0)>(1);
           if ($71) {
            label = 22;
           } else {
            $152 = $28;
           }
          }
          if ((label|0) == 22) {
           label = 0;
           HEAP32[$5>>2] = 0;
           $152 = 0;
          }
          $72 = (($$0194248285) + 1)|0;
          $$0189249$be = $$0189249284;$$0194248$be = $72;$$be = $152;
          break L7;
          break;
         }
         default: {
          $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
          break L7;
         }
         }
         $73 = (_tre_stack_push_int($1,0)|0);
         $74 = ($73|0)==(0);
         if ($74) {
          $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
         } else {
          $$0167$lcssa = $73;$$0189249$lcssa = $$0189249284;
          break L4;
         }
         break;
        }
        case 1:  {
         $77 = ((($18)) + 4|0);
         $78 = HEAP32[$77>>2]|0;
         $79 = (_tre_stack_pop_int($1)|0);
         HEAP32[$5>>2] = $79;
         $80 = ((($78)) + 4|0);
         $81 = HEAP32[$80>>2]|0;
         $82 = ($81|0)>(1);
         if ($82) {
          HEAP32[$7>>2] = 0;
          label = 30;
         } else {
          $83 = ((($78)) + 8|0);
          $84 = HEAP32[$83>>2]|0;
          $85 = ($84|0)>(1);
          if ($85) {
           HEAP32[$7>>2] = 0;
           $86 = ($81|0)>(0);
           if ($86) {
            label = 30;
           } else {
            $$0180$lcssa = $79;$$0185$lcssa = 0;$$lcssa = $81;
            label = 37;
           }
          } else {
           $145 = $79;
          }
         }
         L36: do {
          if ((label|0) == 30) {
           label = 0;
           $87 = ($81|0)>(1);
           $88 = $87 ? 1 : 2;
           $89 = HEAP32[$78>>2]|0;
           $90 = (_tre_copy_ast($0,$1,$89,$88,$5,$4,$8,$6)|0);
           $91 = ($90|0)==(0);
           if ($91) {
            $$0185241279 = 0;$153 = $79;$98 = 1;
           } else {
            $$4$ph = $90;
            label = 34;
            break L5;
           }
           while(1) {
            $92 = ($$0185241279|0)==(0|0);
            $93 = HEAP32[$8>>2]|0;
            if ($92) {
             $$1186 = $93;
            } else {
             $94 = (_tre_ast_new_catenation($0,$$0185241279,$93)|0);
             $$1186 = $94;
            }
            $95 = ($$1186|0)==(0|0);
            if ($95) {
             $$4$ph = 12;
             label = 34;
             break L5;
            }
            $96 = HEAP32[$80>>2]|0;
            $97 = ($98|0)<($96|0);
            if (!($97)) {
             $$0180$lcssa = $153;$$0185$lcssa = $$1186;$$lcssa = $96;
             label = 37;
             break L36;
            }
            $$pre = HEAP32[$5>>2]|0;
            $99 = (($98) + 1)|0;
            $100 = ($99|0)<($96|0);
            $101 = $100 ? 1 : 2;
            $102 = HEAP32[$78>>2]|0;
            $103 = (_tre_copy_ast($0,$1,$102,$101,$5,$4,$8,$6)|0);
            $104 = ($103|0)==(0);
            if ($104) {
             $$0185241279 = $$1186;$153 = $$pre;$98 = $99;
            } else {
             $$4$ph = $103;
             label = 34;
             break L5;
            }
           }
          }
         } while(0);
         if ((label|0) == 37) {
          label = 0;
          $105 = ((($78)) + 8|0);
          $106 = HEAP32[$105>>2]|0;
          $107 = ($106|0)==(-1);
          if ($107) {
           $109 = HEAP32[$5>>2]|0;
           $110 = HEAP32[$78>>2]|0;
           $111 = (_tre_copy_ast($0,$1,$110,0,$5,0,$7,$6)|0);
           $112 = ($111|0)==(0);
           if (!($112)) {
            $$8$ph = $111;
            break L5;
           }
           $113 = HEAP32[$7>>2]|0;
           $114 = (_tre_ast_new_iter($0,$113,0,-1,0)|0);
           HEAP32[$7>>2] = $114;
           $115 = ($114|0)==(0|0);
           if ($115) {
            $$8$ph = 12;
            break L5;
           } else {
            $$2182 = $109;$137 = $114;
           }
          } else {
           $108 = ($$lcssa|0)<($106|0);
           if ($108) {
            $$1184245 = $$lcssa;$121 = 0;
            while(1) {
             $116 = HEAP32[$5>>2]|0;
             $117 = HEAP32[$78>>2]|0;
             $118 = (_tre_copy_ast($0,$1,$117,0,$5,0,$9,$6)|0);
             $119 = ($118|0)==(0);
             if (!($119)) {
              $$6$ph = $118;
              label = 49;
              break L5;
             }
             $120 = ($121|0)==(0|0);
             if ($120) {
              $124 = HEAP32[$9>>2]|0;
              HEAP32[$7>>2] = $124;
              $125 = $124;
              $127 = $125;
             } else {
              $122 = HEAP32[$9>>2]|0;
              $123 = (_tre_ast_new_catenation($0,$122,$121)|0);
              HEAP32[$7>>2] = $123;
              $127 = $123;
             }
             $126 = ($127|0)==(0|0);
             if ($126) {
              $$6$ph = 12;
              label = 49;
              break L5;
             }
             $128 = (_tre_ast_new_literal($0,-1,-1,-1)|0);
             $129 = ($128|0)==(0|0);
             if ($129) {
              $$6$ph = 12;
              label = 49;
              break L5;
             }
             $130 = (_tre_ast_new_union($0,$128,$127)|0);
             HEAP32[$7>>2] = $130;
             $131 = ($130|0)==(0|0);
             if ($131) {
              $$6$ph = 12;
              label = 49;
              break L5;
             }
             $132 = (($$1184245) + 1)|0;
             $133 = HEAP32[$105>>2]|0;
             $134 = ($132|0)<($133|0);
             if ($134) {
              $$1184245 = $132;$121 = $130;
             } else {
              $$2182 = $116;$137 = $130;
              break;
             }
            }
           } else {
            $$2182 = $$0180$lcssa;$137 = 0;
           }
          }
          HEAP32[$5>>2] = $$2182;
          $135 = ($$0185$lcssa|0)==(0|0);
          if ($135) {
           $$3188 = $137;
           label = 54;
          } else {
           $136 = ($137|0)==(0|0);
           if ($136) {
            $$3188217 = $$0185$lcssa;
           } else {
            $138 = (_tre_ast_new_catenation($0,$$0185$lcssa,$137)|0);
            $$3188 = $138;
            label = 54;
           }
          }
          if ((label|0) == 54) {
           label = 0;
           $139 = ($$3188|0)==(0|0);
           if ($139) {
            $$8$ph = 12;
            break L5;
           } else {
            $$3188217 = $$3188;
           }
          }
          $140 = ((($$3188217)) + 4|0);
          $141 = HEAP32[$140>>2]|0;
          HEAP32[$77>>2] = $141;
          $142 = HEAP32[$$3188217>>2]|0;
          HEAP32[$18>>2] = $142;
          $145 = $$2182;
         }
         $143 = (($$0194248285) + -1)|0;
         $144 = (($145) - ($79))|0;
         $146 = (($144) + ($$0189249284))|0;
         $147 = ($143|0)==(0);
         if ($147) {
          HEAP32[$5>>2] = $146;
          $$0189249$be = $146;$$0194248$be = 0;$$be = $146;
         } else {
          $$0189249$be = $146;$$0194248$be = $143;$$be = $145;
         }
         break;
        }
        default: {
         $$0189249$be = $$0189249284;$$0194248$be = $$0194248285;$$be = $28;
        }
        }
       } while(0);
       $75 = (_tre_stack_num_objects($1)|0);
       $76 = ($75|0)>($10|0);
       if ($76) {
        $$0189249284 = $$0189249$be;$$0194248285 = $$0194248$be;$28 = $$be;
       } else {
        $$0167$lcssa = 0;$$0189249$lcssa = $$0189249$be;
        break L4;
       }
      }
      if ((label|0) == 34) {
       $$8$ph = $$4$ph;
      }
      else if ((label|0) == 49) {
       $$8$ph = $$6$ph;
      }
      $$13 = $$8$ph;
      break L1;
     } else {
      $$0167$lcssa = 0;$$0189249$lcssa = 0;
     }
    } while(0);
    $148 = HEAP32[$3>>2]|0;
    $149 = (($148) + ($$0189249$lcssa))|0;
    $150 = HEAP32[$6>>2]|0;
    $151 = ($150|0)>($149|0);
    $$210 = $151 ? $150 : $149;
    HEAP32[$3>>2] = $$210;
    $$13 = $$0167$lcssa;
   } else {
    $$13 = $13;
   }
  } else {
   $$13 = $11;
  }
 } while(0);
 STACKTOP = sp;return ($$13|0);
}
function _tre_ast_new_literal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (___tre_mem_alloc_impl($0,0,0,1,20)|0);
 $5 = (_tre_ast_new_node($0,0,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
 } else {
  HEAP32[$4>>2] = $1;
  $7 = ((($4)) + 4|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($4)) + 8|0);
  HEAP32[$8>>2] = $3;
  $$0 = $5;
 }
 return ($$0|0);
}
function _tre_ast_new_catenation($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$0 = $2;
 } else {
  $4 = (___tre_mem_alloc_impl($0,0,0,1,8)|0);
  $5 = (_tre_ast_new_node($0,1,$4)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$0 = 0;
  } else {
   HEAP32[$4>>2] = $1;
   $7 = ((($4)) + 4|0);
   HEAP32[$7>>2] = $2;
   $8 = ((($1)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($2)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($9))|0;
   $13 = ((($5)) + 16|0);
   HEAP32[$13>>2] = $12;
   $$0 = $5;
  }
 }
 return ($$0|0);
}
function _tre_compute_nfl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$21$ph = 0, $$24 = 0, $$316 = 0, $$pre = 0, $$pre$phi390Z2D = 0, $$pre389 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (_tre_stack_num_objects($1)|0);
 $6 = (_tre_stack_push_voidptr($1,$2)|0);
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = (_tre_stack_push_int($1,0)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = (_tre_stack_num_objects($1)|0);
    $11 = ($10|0)>($5|0);
    if ($11) {
     L5: while(1) {
      $12 = (_tre_stack_pop_int($1)|0);
      $13 = (_tre_stack_pop_voidptr($1)|0);
      L7: do {
       switch ($12|0) {
       case 0:  {
        $14 = HEAP32[$13>>2]|0;
        switch ($14|0) {
        case 0:  {
         $15 = ((($13)) + 4|0);
         $16 = HEAP32[$15>>2]|0;
         $17 = HEAP32[$16>>2]|0;
         $18 = ($17|0)==(-4);
         if ($18) {
          $19 = ((($13)) + 8|0);
          HEAP32[$19>>2] = 0;
          $20 = ((($16)) + 8|0);
          $21 = HEAP32[$20>>2]|0;
          $22 = (_tre_set_one($0,$21,0,1114111,0,0,-1)|0);
          $23 = ((($13)) + 24|0);
          HEAP32[$23>>2] = $22;
          $24 = ($22|0)==(0|0);
          if ($24) {
           $$24 = 12;
           break L1;
          }
          $25 = HEAP32[$20>>2]|0;
          $26 = ((($16)) + 4|0);
          $27 = HEAP32[$26>>2]|0;
          $28 = (_tre_set_one($0,$25,0,1114111,0,0,$27)|0);
          $29 = ((($13)) + 28|0);
          HEAP32[$29>>2] = $28;
          $30 = ($28|0)==(0|0);
          if ($30) {
           $$24 = 12;
           break L1;
          } else {
           break L7;
          }
         }
         $31 = ($17|0)<(0);
         $32 = ((($13)) + 8|0);
         if ($31) {
          HEAP32[$32>>2] = 1;
          $33 = (_tre_set_empty($0)|0);
          $34 = ((($13)) + 24|0);
          HEAP32[$34>>2] = $33;
          $35 = ($33|0)==(0|0);
          if ($35) {
           $$24 = 12;
           break L1;
          }
          $36 = (_tre_set_empty($0)|0);
          $37 = ((($13)) + 28|0);
          HEAP32[$37>>2] = $36;
          $38 = ($36|0)==(0|0);
          if ($38) {
           $$24 = 12;
           break L1;
          } else {
           break L7;
          }
         } else {
          HEAP32[$32>>2] = 0;
          $39 = ((($16)) + 8|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = ((($16)) + 4|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = (_tre_set_one($0,$40,$17,$42,0,0,-1)|0);
          $44 = ((($13)) + 24|0);
          HEAP32[$44>>2] = $43;
          $45 = ($43|0)==(0|0);
          if ($45) {
           $$24 = 12;
           break L1;
          }
          $46 = HEAP32[$39>>2]|0;
          $47 = HEAP32[$16>>2]|0;
          $48 = HEAP32[$41>>2]|0;
          $49 = ((($16)) + 12|0);
          $50 = HEAP32[$49>>2]|0;
          $51 = ((($16)) + 16|0);
          $52 = HEAP32[$51>>2]|0;
          $53 = (_tre_set_one($0,$46,$47,$48,$50,$52,-1)|0);
          $54 = ((($13)) + 28|0);
          HEAP32[$54>>2] = $53;
          $55 = ($53|0)==(0|0);
          if ($55) {
           $$24 = 12;
           break L1;
          } else {
           break L7;
          }
         }
         break;
        }
        case 3:  {
         $56 = (_tre_stack_push_voidptr($1,$13)|0);
         $57 = ($56|0)==(0);
         if (!($57)) {
          $$24 = $56;
          break L1;
         }
         $58 = (_tre_stack_push_int($1,1)|0);
         $59 = ($58|0)==(0);
         if (!($59)) {
          $$24 = $58;
          break L1;
         }
         $60 = ((($13)) + 4|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = ((($61)) + 4|0);
         $63 = HEAP32[$62>>2]|0;
         $64 = (_tre_stack_push_voidptr($1,$63)|0);
         $65 = ($64|0)==(0);
         if (!($65)) {
          $$24 = $64;
          break L1;
         }
         $66 = (_tre_stack_push_int($1,0)|0);
         $67 = ($66|0)==(0);
         if (!($67)) {
          $$24 = $66;
          break L1;
         }
         $68 = HEAP32[$60>>2]|0;
         $69 = HEAP32[$68>>2]|0;
         $70 = (_tre_stack_push_voidptr($1,$69)|0);
         $71 = ($70|0)==(0);
         if (!($71)) {
          $$24 = $70;
          break L1;
         }
         $72 = (_tre_stack_push_int($1,0)|0);
         $73 = ($72|0)==(0);
         if ($73) {
          break L7;
         } else {
          $$24 = $72;
          break L1;
         }
         break;
        }
        case 1:  {
         $74 = (_tre_stack_push_voidptr($1,$13)|0);
         $75 = ($74|0)==(0);
         if (!($75)) {
          $$24 = $74;
          break L1;
         }
         $76 = (_tre_stack_push_int($1,2)|0);
         $77 = ($76|0)==(0);
         if (!($77)) {
          $$24 = $76;
          break L1;
         }
         $78 = ((($13)) + 4|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = ((($79)) + 4|0);
         $81 = HEAP32[$80>>2]|0;
         $82 = (_tre_stack_push_voidptr($1,$81)|0);
         $83 = ($82|0)==(0);
         if (!($83)) {
          $$24 = $82;
          break L1;
         }
         $84 = (_tre_stack_push_int($1,0)|0);
         $85 = ($84|0)==(0);
         if (!($85)) {
          $$24 = $84;
          break L1;
         }
         $86 = HEAP32[$78>>2]|0;
         $87 = HEAP32[$86>>2]|0;
         $88 = (_tre_stack_push_voidptr($1,$87)|0);
         $89 = ($88|0)==(0);
         if (!($89)) {
          $$24 = $88;
          break L1;
         }
         $90 = (_tre_stack_push_int($1,0)|0);
         $91 = ($90|0)==(0);
         if ($91) {
          break L7;
         } else {
          $$24 = $90;
          break L1;
         }
         break;
        }
        case 2:  {
         $92 = (_tre_stack_push_voidptr($1,$13)|0);
         $93 = ($92|0)==(0);
         if (!($93)) {
          $$24 = $92;
          break L1;
         }
         $94 = (_tre_stack_push_int($1,3)|0);
         $95 = ($94|0)==(0);
         if (!($95)) {
          $$24 = $94;
          break L1;
         }
         $96 = ((($13)) + 4|0);
         $97 = HEAP32[$96>>2]|0;
         $98 = HEAP32[$97>>2]|0;
         $99 = (_tre_stack_push_voidptr($1,$98)|0);
         $100 = ($99|0)==(0);
         if (!($100)) {
          $$24 = $99;
          break L1;
         }
         $101 = (_tre_stack_push_int($1,0)|0);
         $102 = ($101|0)==(0);
         if ($102) {
          break L7;
         } else {
          $$24 = $101;
          break L1;
         }
         break;
        }
        default: {
         break L7;
        }
        }
        break;
       }
       case 1:  {
        $103 = ((($13)) + 4|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = HEAP32[$104>>2]|0;
        $106 = ((($105)) + 8|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = ($107|0)==(0);
        $109 = ((($104)) + 4|0);
        $110 = HEAP32[$109>>2]|0;
        if ($108) {
         $111 = ((($110)) + 8|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = ($112|0)!=(0);
         $115 = $113;
        } else {
         $115 = 1;
        }
        $114 = $115&1;
        $116 = ((($13)) + 8|0);
        HEAP32[$116>>2] = $114;
        $117 = ((($105)) + 24|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = ((($110)) + 24|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = (_tre_set_union($0,$118,$120,0,0)|0);
        $122 = ((($13)) + 24|0);
        HEAP32[$122>>2] = $121;
        $123 = ($121|0)==(0|0);
        if ($123) {
         $$24 = 12;
         break L1;
        }
        $124 = HEAP32[$104>>2]|0;
        $125 = ((($124)) + 28|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = HEAP32[$109>>2]|0;
        $128 = ((($127)) + 28|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = (_tre_set_union($0,$126,$129,0,0)|0);
        $131 = ((($13)) + 28|0);
        HEAP32[$131>>2] = $130;
        $132 = ($130|0)==(0|0);
        if ($132) {
         $$24 = 12;
         break L1;
        }
        break;
       }
       case 3:  {
        $133 = ((($13)) + 4|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = ((($134)) + 4|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ($136|0)==(0);
        $$pre = HEAP32[$134>>2]|0;
        if ($137) {
         $$sink = 1;
        } else {
         $138 = ((($$pre)) + 8|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = ($139|0)!=(0);
         $$316 = $140&1;
         $$sink = $$316;
        }
        $141 = ((($13)) + 8|0);
        HEAP32[$141>>2] = $$sink;
        $142 = ((($$pre)) + 24|0);
        $143 = HEAP32[$142>>2]|0;
        $144 = ((($13)) + 24|0);
        HEAP32[$144>>2] = $143;
        $145 = ((($$pre)) + 28|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = ((($13)) + 28|0);
        HEAP32[$147>>2] = $146;
        break;
       }
       case 2:  {
        $150 = ((($13)) + 4|0);
        $151 = HEAP32[$150>>2]|0;
        $152 = HEAP32[$151>>2]|0;
        $153 = ((($152)) + 8|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = ($154|0)==(0);
        if ($155) {
         $162 = 0;
        } else {
         $156 = ((($151)) + 4|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = ((($157)) + 8|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)!=(0);
         $162 = $160;
        }
        $161 = $162&1;
        $163 = ((($13)) + 8|0);
        HEAP32[$163>>2] = $161;
        $164 = HEAP32[$153>>2]|0;
        $165 = ($164|0)==(0);
        if ($165) {
         $188 = ((($152)) + 24|0);
         $189 = HEAP32[$188>>2]|0;
         $190 = ((($13)) + 24|0);
         HEAP32[$190>>2] = $189;
         $$pre389 = ((($151)) + 4|0);
         $$pre$phi390Z2D = $$pre389;
        } else {
         $166 = (_tre_match_empty($1,$152,0,0,$3)|0);
         $167 = ($166|0)==(0);
         if (!($167)) {
          $$21$ph = $166;
          break L5;
         }
         $168 = HEAP32[$3>>2]|0;
         $169 = $168 << 2;
         $170 = (($169) + 4)|0;
         $171 = (_malloc($170)|0);
         $172 = ($171|0)==(0|0);
         if ($172) {
          $$21$ph = 12;
          break L5;
         }
         HEAP32[$171>>2] = -1;
         HEAP32[$4>>2] = 0;
         $173 = HEAP32[$151>>2]|0;
         $174 = (_tre_match_empty($1,$173,$171,$4,0)|0);
         $175 = ($174|0)==(0);
         if (!($175)) {
          label = 45;
          break L5;
         }
         $176 = ((($151)) + 4|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ((($177)) + 24|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = HEAP32[$151>>2]|0;
         $181 = ((($180)) + 24|0);
         $182 = HEAP32[$181>>2]|0;
         $183 = HEAP32[$4>>2]|0;
         $184 = (_tre_set_union($0,$179,$182,$171,$183)|0);
         $185 = ((($13)) + 24|0);
         HEAP32[$185>>2] = $184;
         _free($171);
         $186 = HEAP32[$185>>2]|0;
         $187 = ($186|0)==(0|0);
         if ($187) {
          $$21$ph = 12;
          break L5;
         } else {
          $$pre$phi390Z2D = $176;
         }
        }
        $191 = HEAP32[$$pre$phi390Z2D>>2]|0;
        $192 = ((($191)) + 8|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==(0);
        if ($194) {
         $216 = ((($191)) + 28|0);
         $217 = HEAP32[$216>>2]|0;
         $218 = ((($13)) + 28|0);
         HEAP32[$218>>2] = $217;
        } else {
         $195 = (_tre_match_empty($1,$191,0,0,$3)|0);
         $196 = ($195|0)==(0);
         if (!($196)) {
          $$21$ph = $195;
          break L5;
         }
         $197 = HEAP32[$3>>2]|0;
         $198 = $197 << 2;
         $199 = (($198) + 4)|0;
         $200 = (_malloc($199)|0);
         $201 = ($200|0)==(0|0);
         if ($201) {
          $$21$ph = 12;
          break L5;
         }
         HEAP32[$200>>2] = -1;
         HEAP32[$4>>2] = 0;
         $202 = HEAP32[$$pre$phi390Z2D>>2]|0;
         $203 = (_tre_match_empty($1,$202,$200,$4,0)|0);
         $204 = ($203|0)==(0);
         if (!($204)) {
          label = 52;
          break L5;
         }
         $205 = HEAP32[$151>>2]|0;
         $206 = ((($205)) + 28|0);
         $207 = HEAP32[$206>>2]|0;
         $208 = HEAP32[$$pre$phi390Z2D>>2]|0;
         $209 = ((($208)) + 28|0);
         $210 = HEAP32[$209>>2]|0;
         $211 = HEAP32[$4>>2]|0;
         $212 = (_tre_set_union($0,$207,$210,$200,$211)|0);
         $213 = ((($13)) + 28|0);
         HEAP32[$213>>2] = $212;
         _free($200);
         $214 = HEAP32[$213>>2]|0;
         $215 = ($214|0)==(0|0);
         if ($215) {
          $$21$ph = 12;
          break L5;
         }
        }
        break;
       }
       default: {
       }
       }
      } while(0);
      $148 = (_tre_stack_num_objects($1)|0);
      $149 = ($148|0)>($5|0);
      if (!($149)) {
       $$24 = 0;
       break L1;
      }
     }
     if ((label|0) == 45) {
      _free($171);
      $$21$ph = $174;
     }
     else if ((label|0) == 52) {
      _free($200);
      $$21$ph = $203;
     }
     $$24 = $$21$ph;
    } else {
     $$24 = 0;
    }
   } else {
    $$24 = $8;
   }
  } else {
   $$24 = $6;
  }
 } while(0);
 STACKTOP = sp;return ($$24|0);
}
function _tre_ast_to_tnfa($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$051 = 0, $$sink52 = 0, $$tr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$tr = $0;
 L1: while(1) {
  $4 = HEAP32[$$tr>>2]|0;
  switch ($4|0) {
  case 2:  {
   $25 = ((($$tr)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(-1);
   if ($29) {
    $30 = HEAP32[$26>>2]|0;
    $31 = ((($30)) + 28|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($30)) + 24|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (_tre_make_trans($32,$34,$1,$2,$3)|0);
    $36 = ($35|0)==(0);
    if ($36) {
     $$sink52 = $26;
    } else {
     $$051 = $35;
     break L1;
    }
   } else {
    $$sink52 = $26;
   }
   break;
  }
  case 3:  {
   $5 = ((($$tr)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = (_tre_ast_to_tnfa($7,$1,$2,$3)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $$051 = $8;
    break L1;
   }
   $10 = ((($6)) + 4|0);
   $$sink52 = $10;
   break;
  }
  case 1:  {
   $11 = ((($$tr)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 28|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($12)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_tre_make_trans($15,$19,$1,$2,$3)|0);
   $21 = ($20|0)==(0);
   if (!($21)) {
    $$051 = $20;
    break L1;
   }
   $22 = HEAP32[$12>>2]|0;
   $23 = (_tre_ast_to_tnfa($22,$1,$2,$3)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $$sink52 = $16;
   } else {
    $$051 = $23;
    break L1;
   }
   break;
  }
  default: {
   $$051 = 0;
   break L1;
  }
  }
  $37 = HEAP32[$$sink52>>2]|0;
  $$tr = $37;
 }
 return ($$051|0);
}
function ___tre_mem_destroy($0) {
 $0 = $0|0;
 var $$in1011 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$in1011 = $1;
  while(1) {
   $3 = HEAP32[$$in1011>>2]|0;
   _free($3);
   $4 = ((($$in1011)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   _free($$in1011);
   $6 = ($5|0)==(0|0);
   if ($6) {
    break;
   } else {
    $$in1011 = $5;
   }
  }
 }
 _free($0);
 return;
}
function _regfree($0) {
 $0 = $0|0;
 var $$04250 = 0, $$047 = 0, $$146 = 0, $$lcssa = 0, $$lcssa45 = 0, $$pre = 0, $$pre57 = 0, $$pre58 = 0, $$pre59 = 0, $$pre60 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  $7 = HEAP32[$2>>2]|0;
  if ($6) {
   $$lcssa45 = $7;
  } else {
   $$04250 = 0;$9 = $7;
   while(1) {
    $8 = (((($9) + ($$04250<<5)|0)) + 8|0);
    $10 = HEAP32[$8>>2]|0;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $59 = $9;
    } else {
     $12 = (((($9) + ($$04250<<5)|0)) + 16|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0|0);
     if ($14) {
      $16 = $9;
     } else {
      _free($13);
      $$pre = HEAP32[$2>>2]|0;
      $16 = $$pre;
     }
     $15 = (((($16) + ($$04250<<5)|0)) + 28|0);
     $17 = HEAP32[$15>>2]|0;
     $18 = ($17|0)==(0|0);
     if ($18) {
      $59 = $16;
     } else {
      _free($17);
      $$pre57 = HEAP32[$2>>2]|0;
      $59 = $$pre57;
     }
    }
    $19 = (($$04250) + 1)|0;
    $20 = HEAP32[$4>>2]|0;
    $21 = ($19>>>0)<($20>>>0);
    if ($21) {
     $$04250 = $19;$9 = $59;
    } else {
     $$lcssa45 = $59;
     break;
    }
   }
  }
  $22 = ($$lcssa45|0)==(0|0);
  if (!($22)) {
   _free($$lcssa45);
  }
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $26 = ((($24)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $36 = $24;
   } else {
    $$047 = $24;
    while(1) {
     $29 = ((($$047)) + 16|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(0|0);
     if (!($31)) {
      _free($30);
     }
     $32 = ((($$047)) + 32|0);
     $33 = ((($$047)) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0|0);
     if ($35) {
      break;
     } else {
      $$047 = $32;
     }
    }
    $$pre58 = HEAP32[$23>>2]|0;
    $36 = $$pre58;
   }
   _free($36);
  }
  $37 = ((($2)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   $40 = ((($2)) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0);
   if ($42) {
    $$lcssa = $38;
   } else {
    $$146 = 0;$44 = $38;$60 = $41;
    while(1) {
     $43 = (((($44) + (($$146*12)|0)|0)) + 8|0);
     $45 = HEAP32[$43>>2]|0;
     $46 = ($45|0)==(0|0);
     if ($46) {
      $49 = $60;$61 = $44;
     } else {
      _free($45);
      $$pre59 = HEAP32[$40>>2]|0;
      $$pre60 = HEAP32[$37>>2]|0;
      $49 = $$pre59;$61 = $$pre60;
     }
     $47 = (($$146) + 1)|0;
     $48 = ($47>>>0)<($49>>>0);
     if ($48) {
      $$146 = $47;$44 = $61;$60 = $49;
     } else {
      $$lcssa = $61;
      break;
     }
    }
   }
   _free($$lcssa);
  }
  $50 = ((($2)) + 32|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(0|0);
  if (!($52)) {
   _free($51);
  }
  $53 = ((($2)) + 20|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0|0);
  if (!($55)) {
   _free($54);
  }
  $56 = ((($2)) + 36|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(0|0);
  if (!($58)) {
   _free($57);
  }
  _free($2);
 }
 return;
}
function _tre_make_trans($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$ph175 = 0, $$0119171 = 0, $$0120167 = 0, $$0121 = 0, $$0124 = 0, $$0127 = 0, $$0128 = 0, $$0131$ph174 = 0, $$0131158 = 0, $$1 = 0, $$1122 = 0, $$1125161 = 0, $$2 = 0, $$2123169 = 0, $$2126 = 0, $$3 = 0, $$4164 = 0, $$5 = 0, $$lcssa155 = 0, $$pre189 = 0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)==(0|0);
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)>(-1);
 L1: do {
  if ($5) {
   if ($7) {
    $8 = ((($1)) + 32|0);
    $137 = $6;$142 = $0;
    while(1) {
     $134 = HEAP32[$1>>2]|0;
     $135 = ($134|0)>(-1);
     if ($135) {
      $136 = (($3) + ($137<<2)|0);
      $138 = HEAP32[$136>>2]|0;
      $139 = (($138) + 1)|0;
      HEAP32[$136>>2] = $139;
      $140 = HEAP32[$8>>2]|0;
      $141 = ($140|0)>(-1);
      if ($141) {
       $147 = $8;
       while(1) {
        $$pre189 = HEAP32[$142>>2]|0;
        $143 = (($3) + ($$pre189<<2)|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (($144) + 1)|0;
        HEAP32[$143>>2] = $145;
        $146 = ((($147)) + 32|0);
        $148 = HEAP32[$146>>2]|0;
        $149 = ($148|0)>(-1);
        if ($149) {
         $147 = $146;
        } else {
         break;
        }
       }
      }
     }
     $150 = ((($142)) + 32|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)>(-1);
     if ($152) {
      $137 = $151;$142 = $150;
     } else {
      $$0128 = 0;
      break;
     }
    }
   } else {
    $$0128 = 0;
   }
  } else {
   if ($7) {
    $12 = $0;
    while(1) {
     $9 = HEAP32[$1>>2]|0;
     $10 = ($9|0)>(-1);
     L15: do {
      if ($10) {
       $11 = ((($12)) + 4|0);
       $13 = ((($12)) + 8|0);
       $14 = ((($12)) + 16|0);
       $15 = ((($12)) + 20|0);
       $16 = ((($12)) + 24|0);
       $17 = ((($12)) + 28|0);
       $18 = ((($12)) + 12|0);
       $$0$ph175 = -1;$$0131$ph174 = $1;$153 = $9;
       while(1) {
        $$0131158 = $$0131$ph174;$20 = $153;
        while(1) {
         $19 = ($20|0)==($$0$ph175|0);
         if (!($19)) {
          break;
         }
         $21 = ((($$0131158)) + 32|0);
         $22 = HEAP32[$21>>2]|0;
         $23 = ($22|0)>(-1);
         if ($23) {
          $$0131158 = $21;$20 = $22;
         } else {
          break L15;
         }
        }
        $24 = HEAP32[$12>>2]|0;
        $25 = (($4) + ($24<<2)|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = (($2) + ($26<<5)|0);
        $$0127 = $27;
        while(1) {
         $28 = ((($$0127)) + 8|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = ($29|0)==(0|0);
         $31 = ((($$0127)) + 32|0);
         if ($30) {
          break;
         } else {
          $$0127 = $31;
         }
        }
        $32 = ((($$0127)) + 40|0);
        HEAP32[$32>>2] = 0;
        $33 = HEAP32[$11>>2]|0;
        HEAP32[$$0127>>2] = $33;
        $34 = HEAP32[$13>>2]|0;
        $35 = ((($$0127)) + 4|0);
        HEAP32[$35>>2] = $34;
        $36 = (($4) + ($20<<2)|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = (($2) + ($37<<5)|0);
        HEAP32[$28>>2] = $38;
        $39 = ((($$0127)) + 12|0);
        HEAP32[$39>>2] = $20;
        $40 = HEAP32[$14>>2]|0;
        $41 = ((($$0131158)) + 16|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = $42 | $40;
        $44 = HEAP32[$15>>2]|0;
        $45 = ($44|0)!=(0);
        $46 = $45 ? 4 : 0;
        $47 = $43 | $46;
        $48 = HEAP32[$16>>2]|0;
        $49 = ($48|0)!=(0|0);
        $50 = $49 ? 8 : 0;
        $51 = $47 | $50;
        $52 = ((($$0127)) + 20|0);
        HEAP32[$52>>2] = $51;
        $53 = HEAP32[$17>>2]|0;
        $54 = ($53|0)>(-1);
        if ($54) {
         $55 = $51 | 256;
         HEAP32[$52>>2] = $55;
         $$sink = $53;
        } else {
         $$sink = $44;
        }
        $56 = ((($$0127)) + 24|0);
        HEAP32[$56>>2] = $$sink;
        $57 = HEAP32[$16>>2]|0;
        $58 = ($57|0)==(0|0);
        if ($58) {
         $77 = ((($$0127)) + 28|0);
         HEAP32[$77>>2] = 0;
        } else {
         $$0124 = 0;
         while(1) {
          $59 = (($57) + ($$0124<<2)|0);
          $60 = HEAP32[$59>>2]|0;
          $61 = ($60|0)==(0);
          $62 = (($$0124) + 1)|0;
          if ($61) {
           break;
          } else {
           $$0124 = $62;
          }
         }
         $63 = $62 << 2;
         $64 = (_malloc($63)|0);
         $65 = ((($$0127)) + 28|0);
         HEAP32[$65>>2] = $64;
         $66 = ($64|0)==(0|0);
         if ($66) {
          $$0128 = 12;
          break L1;
         }
         $67 = HEAP32[$16>>2]|0;
         $68 = HEAP32[$67>>2]|0;
         $69 = ($68|0)==(0);
         if ($69) {
          $$lcssa155 = $64;
         } else {
          $$1125161 = 0;$70 = $68;$71 = $64;
          while(1) {
           HEAP32[$71>>2] = $70;
           $72 = (($$1125161) + 1)|0;
           $73 = (($67) + ($72<<2)|0);
           $74 = HEAP32[$73>>2]|0;
           $75 = ($74|0)==(0);
           $76 = (($64) + ($72<<2)|0);
           if ($75) {
            $$lcssa155 = $76;
            break;
           } else {
            $$1125161 = $72;$70 = $74;$71 = $76;
           }
          }
         }
         HEAP32[$$lcssa155>>2] = 0;
        }
        $78 = HEAP32[$18>>2]|0;
        $79 = ($78|0)==(0|0);
        if ($79) {
         $$3 = 0;
        } else {
         $$2126 = 0;
         while(1) {
          $80 = (($78) + ($$2126<<2)|0);
          $81 = HEAP32[$80>>2]|0;
          $82 = ($81|0)>(-1);
          $83 = (($$2126) + 1)|0;
          if ($82) {
           $$2126 = $83;
          } else {
           $$3 = $$2126;
           break;
          }
         }
        }
        $84 = ((($$0131158)) + 12|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ($85|0)==(0|0);
        if ($86) {
         $$1122 = 0;
        } else {
         $$0121 = 0;
         while(1) {
          $87 = (($85) + ($$0121<<2)|0);
          $88 = HEAP32[$87>>2]|0;
          $89 = ($88|0)>(-1);
          $90 = (($$0121) + 1)|0;
          if ($89) {
           $$0121 = $90;
          } else {
           $$1122 = $$0121;
           break;
          }
         }
        }
        $91 = ((($$0127)) + 16|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = ($92|0)==(0|0);
        if (!($93)) {
         _free($92);
        }
        HEAP32[$91>>2] = 0;
        $94 = (($$1122) + ($$3))|0;
        $95 = ($94|0)>(0);
        if ($95) {
         $96 = $94 << 2;
         $97 = (($96) + 4)|0;
         $98 = (_malloc($97)|0);
         HEAP32[$91>>2] = $98;
         $99 = ($98|0)==(0|0);
         if ($99) {
          $$0128 = 12;
          break L1;
         }
         $100 = HEAP32[$18>>2]|0;
         $101 = ($100|0)==(0|0);
         if ($101) {
          $$5 = 0;
         } else {
          $102 = HEAP32[$100>>2]|0;
          $103 = ($102|0)>(-1);
          if ($103) {
           $$4164 = 0;$105 = $102;
           while(1) {
            $104 = (($98) + ($$4164<<2)|0);
            HEAP32[$104>>2] = $105;
            $106 = (($$4164) + 1)|0;
            $107 = (($100) + ($106<<2)|0);
            $108 = HEAP32[$107>>2]|0;
            $109 = ($108|0)>(-1);
            if ($109) {
             $$4164 = $106;$105 = $108;
            } else {
             $$5 = $106;
             break;
            }
           }
          } else {
           $$5 = 0;
          }
         }
         $110 = HEAP32[$84>>2]|0;
         $111 = ($110|0)==(0|0);
         if ($111) {
          $$2 = $$5;
         } else {
          $112 = HEAP32[$110>>2]|0;
          $113 = ($112|0)>(-1);
          if ($113) {
           $114 = ($$5|0)>(0);
           $$0119171 = $$5;$$2123169 = 0;$120 = $112;
           while(1) {
            L64: do {
             if ($114) {
              $$0120167 = 0;
              while(1) {
               $117 = (($98) + ($$0120167<<2)|0);
               $118 = HEAP32[$117>>2]|0;
               $119 = ($118|0)==($120|0);
               $116 = (($$0120167) + 1)|0;
               if ($119) {
                $$1 = $$0119171;
                break L64;
               }
               $115 = ($116|0)<($$5|0);
               if ($115) {
                $$0120167 = $116;
               } else {
                label = 39;
                break;
               }
              }
             } else {
              label = 39;
             }
            } while(0);
            if ((label|0) == 39) {
             label = 0;
             $121 = (($$0119171) + 1)|0;
             $122 = (($98) + ($$0119171<<2)|0);
             HEAP32[$122>>2] = $120;
             $$1 = $121;
            }
            $123 = (($$2123169) + 1)|0;
            $124 = (($110) + ($123<<2)|0);
            $125 = HEAP32[$124>>2]|0;
            $126 = ($125|0)>(-1);
            if ($126) {
             $$0119171 = $$1;$$2123169 = $123;$120 = $125;
            } else {
             $$2 = $$1;
             break;
            }
           }
          } else {
           $$2 = $$5;
          }
         }
         $127 = (($98) + ($$2<<2)|0);
         HEAP32[$127>>2] = -1;
        }
        $128 = ((($$0131158)) + 32|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = ($129|0)>(-1);
        if ($130) {
         $$0$ph175 = $20;$$0131$ph174 = $128;$153 = $129;
        } else {
         break;
        }
       }
      }
     } while(0);
     $131 = ((($12)) + 32|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)>(-1);
     if ($133) {
      $12 = $131;
     } else {
      $$0128 = 0;
      break;
     }
    }
   } else {
    $$0128 = 0;
   }
  }
 } while(0);
 return ($$0128|0);
}
function _tre_stack_num_objects($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _tre_stack_push_voidptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 $3 = (_tre_stack_push($0,$$byval_copy)|0);
 STACKTOP = sp;return ($3|0);
}
function _tre_stack_push_int($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
 $3 = (_tre_stack_push($0,$$byval_copy)|0);
 STACKTOP = sp;return ($3|0);
}
function _tre_stack_pop_int($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[$3>>2] = $5;
 $6 = (($2) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 return ($7|0);
}
function _tre_stack_pop_voidptr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[$3>>2] = $5;
 $6 = (($2) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 return ($7|0);
}
function _tre_set_one($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (___tre_mem_alloc_impl($0,0,0,1,64)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
 } else {
  HEAP32[$7>>2] = $1;
  $9 = ((($7)) + 4|0);
  HEAP32[$9>>2] = $2;
  $10 = ((($7)) + 8|0);
  HEAP32[$10>>2] = $3;
  $11 = ((($7)) + 20|0);
  HEAP32[$11>>2] = $4;
  $12 = ((($7)) + 24|0);
  HEAP32[$12>>2] = $5;
  $13 = ((($7)) + 28|0);
  HEAP32[$13>>2] = $6;
  $14 = ((($7)) + 32|0);
  HEAP32[$14>>2] = -1;
  $15 = ((($7)) + 36|0);
  HEAP32[$15>>2] = -1;
  $16 = ((($7)) + 40|0);
  HEAP32[$16>>2] = -1;
  $$0 = $7;
 }
 return ($$0|0);
}
function _tre_set_empty($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___tre_mem_alloc_impl($0,0,0,1,32)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP32[$1>>2] = -1;
  $3 = ((($1)) + 4|0);
  HEAP32[$3>>2] = -1;
  $4 = ((($1)) + 8|0);
  HEAP32[$4>>2] = -1;
  $$0 = $1;
 }
 return ($$0|0);
}
function _tre_set_union($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$0173 = 0, $$0174$lcssa = 0, $$0174202 = 0, $$0175$lcssa = 0, $$0175197 = 0, $$0177 = 0, $$0179 = 0, $$0212 = 0, $$1$lcssa = 0, $$1176$lcssa = 0, $$1176205 = 0, $$1178193 = 0, $$1180$lcssa = 0, $$1180209 = 0, $$1192 = 0, $$2 = 0, $$lcssa = 0, $$sink = 0, $$sink5 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $exitcond226 = 0, $exitcond227 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($3|0)==(0|0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$0212 = 0;
  while(1) {
   $6 = (($3) + ($$0212<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>(-1);
   $9 = (($$0212) + 1)|0;
   if ($8) {
    $$0212 = $9;
   } else {
    $$0$lcssa = $$0212;
    break;
   }
  }
 }
 $$0179 = 0;
 while(1) {
  $10 = (($1) + ($$0179<<5)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)>(-1);
  $13 = (($$0179) + 1)|0;
  if ($12) {
   $$0179 = $13;
  } else {
   $$0177 = 0;
   break;
  }
 }
 while(1) {
  $14 = (($2) + ($$0177<<5)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>(-1);
  $17 = (($$0177) + 1)|0;
  if ($16) {
   $$0177 = $17;
  } else {
   break;
  }
 }
 $18 = (($$0177) + ($$0179))|0;
 $19 = $18 << 5;
 $20 = (($19) + 32)|0;
 $21 = (___tre_mem_alloc_impl($0,0,0,1,$20)|0);
 $22 = ($21|0)==(0|0);
 L10: do {
  if ($22) {
   $$0173 = 0;
  } else {
   $23 = HEAP32[$1>>2]|0;
   $24 = ($23|0)>(-1);
   if ($24) {
    $25 = ($$0$lcssa|0)>(0);
    $$1180209 = 0;$30 = $23;
    while(1) {
     $29 = (($21) + ($$1180209<<5)|0);
     HEAP32[$29>>2] = $30;
     $31 = (((($1) + ($$1180209<<5)|0)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (((($21) + ($$1180209<<5)|0)) + 4|0);
     HEAP32[$33>>2] = $32;
     $34 = (((($1) + ($$1180209<<5)|0)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (((($21) + ($$1180209<<5)|0)) + 8|0);
     HEAP32[$36>>2] = $35;
     $37 = (((($1) + ($$1180209<<5)|0)) + 16|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $38 | $4;
     $40 = (((($21) + ($$1180209<<5)|0)) + 16|0);
     HEAP32[$40>>2] = $39;
     $41 = (((($1) + ($$1180209<<5)|0)) + 20|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (((($21) + ($$1180209<<5)|0)) + 20|0);
     HEAP32[$43>>2] = $42;
     $44 = (((($1) + ($$1180209<<5)|0)) + 24|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (((($21) + ($$1180209<<5)|0)) + 24|0);
     HEAP32[$46>>2] = $45;
     $47 = (((($1) + ($$1180209<<5)|0)) + 28|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (((($21) + ($$1180209<<5)|0)) + 28|0);
     HEAP32[$49>>2] = $48;
     $50 = (((($1) + ($$1180209<<5)|0)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==(0|0);
     $or$cond = $5 & $52;
     if ($or$cond) {
      $$sink = 0;
     } else {
      if ($52) {
       $$0175$lcssa = 0;
      } else {
       $$0175197 = 0;
       while(1) {
        $53 = (($51) + ($$0175197<<2)|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)>(-1);
        $56 = (($$0175197) + 1)|0;
        if ($55) {
         $$0175197 = $56;
        } else {
         $$0175$lcssa = $$0175197;
         break;
        }
       }
      }
      $57 = (($$0175$lcssa) + ($$0$lcssa))|0;
      $58 = $57 << 2;
      $59 = (($58) + 4)|0;
      $60 = (___tre_mem_alloc_impl($0,0,0,0,$59)|0);
      $61 = ($60|0)==(0|0);
      if ($61) {
       $$0173 = 0;
       break L10;
      }
      $62 = ($$0175$lcssa|0)>(0);
      if ($62) {
       $63 = HEAP32[$50>>2]|0;
       $$0174202 = 0;
       while(1) {
        $64 = (($63) + ($$0174202<<2)|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = (($60) + ($$0174202<<2)|0);
        HEAP32[$66>>2] = $65;
        $67 = (($$0174202) + 1)|0;
        $exitcond226 = ($67|0)==($$0175$lcssa|0);
        if ($exitcond226) {
         $$0174$lcssa = $$0175$lcssa;
         break;
        } else {
         $$0174202 = $67;
        }
       }
      } else {
       $$0174$lcssa = 0;
      }
      if ($25) {
       $$1176205 = 0;
       while(1) {
        $68 = (($3) + ($$1176205<<2)|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = (($$1176205) + ($$0174$lcssa))|0;
        $71 = (($60) + ($70<<2)|0);
        HEAP32[$71>>2] = $69;
        $72 = (($$1176205) + 1)|0;
        $exitcond227 = ($72|0)==($$0$lcssa|0);
        if ($exitcond227) {
         $$1176$lcssa = $$0$lcssa;
         break;
        } else {
         $$1176205 = $72;
        }
       }
      } else {
       $$1176$lcssa = 0;
      }
      $73 = (($$1176$lcssa) + ($$0174$lcssa))|0;
      $74 = (($60) + ($73<<2)|0);
      HEAP32[$74>>2] = -1;
      $$sink = $60;
     }
     $75 = (((($21) + ($$1180209<<5)|0)) + 12|0);
     HEAP32[$75>>2] = $$sink;
     $76 = (($$1180209) + 1)|0;
     $77 = (($1) + ($76<<5)|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)>(-1);
     if ($79) {
      $$1180209 = $76;$30 = $78;
     } else {
      $$1180$lcssa = $76;
      break;
     }
    }
   } else {
    $$1180$lcssa = 0;
   }
   $26 = HEAP32[$2>>2]|0;
   $27 = ($26|0)>(-1);
   $28 = (($21) + ($$1180$lcssa<<5)|0);
   if ($27) {
    $$1178193 = 0;$80 = $26;$81 = $28;$85 = $$1180$lcssa;
    while(1) {
     HEAP32[$81>>2] = $80;
     $82 = (((($2) + ($$1178193<<5)|0)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (((($21) + ($85<<5)|0)) + 4|0);
     HEAP32[$84>>2] = $83;
     $86 = (((($2) + ($$1178193<<5)|0)) + 8|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (((($21) + ($85<<5)|0)) + 8|0);
     HEAP32[$88>>2] = $87;
     $89 = (((($2) + ($$1178193<<5)|0)) + 16|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (((($21) + ($85<<5)|0)) + 16|0);
     HEAP32[$91>>2] = $90;
     $92 = (((($2) + ($$1178193<<5)|0)) + 20|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (((($21) + ($85<<5)|0)) + 20|0);
     HEAP32[$94>>2] = $93;
     $95 = (((($2) + ($$1178193<<5)|0)) + 24|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (((($21) + ($85<<5)|0)) + 24|0);
     HEAP32[$97>>2] = $96;
     $98 = (((($2) + ($$1178193<<5)|0)) + 28|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (((($21) + ($85<<5)|0)) + 28|0);
     HEAP32[$100>>2] = $99;
     $101 = (((($2) + ($$1178193<<5)|0)) + 12|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)==(0|0);
     if ($103) {
      $$sink5 = 0;
     } else {
      $$2 = 0;
      while(1) {
       $104 = (($102) + ($$2<<2)|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ($105|0)>(-1);
       $107 = (($$2) + 1)|0;
       if ($106) {
        $$2 = $107;
       } else {
        break;
       }
      }
      $108 = $$2 << 2;
      $109 = (($108) + 4)|0;
      $110 = (___tre_mem_alloc_impl($0,0,0,0,$109)|0);
      $111 = ($110|0)==(0|0);
      if ($111) {
       $$0173 = 0;
       break L10;
      }
      $112 = ($$2|0)>(0);
      if ($112) {
       $113 = HEAP32[$101>>2]|0;
       $$1192 = 0;
       while(1) {
        $114 = (($113) + ($$1192<<2)|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (($110) + ($$1192<<2)|0);
        HEAP32[$116>>2] = $115;
        $117 = (($$1192) + 1)|0;
        $exitcond = ($117|0)==($$2|0);
        if ($exitcond) {
         $$1$lcssa = $$2;
         break;
        } else {
         $$1192 = $117;
        }
       }
      } else {
       $$1$lcssa = 0;
      }
      $118 = (($110) + ($$1$lcssa<<2)|0);
      HEAP32[$118>>2] = -1;
      $$sink5 = $110;
     }
     $119 = (((($21) + ($85<<5)|0)) + 12|0);
     HEAP32[$119>>2] = $$sink5;
     $120 = (($$1178193) + 1)|0;
     $121 = (($2) + ($120<<5)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ($122|0)>(-1);
     $124 = (($120) + ($$1180$lcssa))|0;
     $125 = (($21) + ($124<<5)|0);
     if ($123) {
      $$1178193 = $120;$80 = $122;$81 = $125;$85 = $124;
     } else {
      $$lcssa = $125;
      break;
     }
    }
   } else {
    $$lcssa = $28;
   }
   HEAP32[$$lcssa>>2] = -1;
   $$0173 = $21;
  }
 } while(0);
 return ($$0173|0);
}
function _tre_match_empty($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$062 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_tre_stack_num_objects($0)|0);
 $6 = ($4|0)!=(0|0);
 if ($6) {
  HEAP32[$4>>2] = 0;
 }
 $7 = (_tre_stack_push_voidptr($0,$1)|0);
 $8 = ($7|0)==(0);
 L4: do {
  if ($8) {
   $9 = ($2|0)==(0|0);
   $10 = ($3|0)==(0|0);
   $11 = (_tre_stack_num_objects($0)|0);
   $12 = ($11|0)>($5|0);
   if ($12) {
    while(1) {
     $13 = (_tre_stack_pop_voidptr($0)|0);
     $14 = HEAP32[$13>>2]|0;
     L8: do {
      switch ($14|0) {
      case 0:  {
       $19 = ((($13)) + 4|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = HEAP32[$20>>2]|0;
       switch ($21|0) {
       case -3:  {
        break;
       }
       case -2:  {
        if ($10) {
         break L8;
        }
        $34 = ((($20)) + 4|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = HEAP32[$3>>2]|0;
        $37 = $36 | $35;
        HEAP32[$3>>2] = $37;
        break L8;
        break;
       }
       default: {
        break L8;
       }
       }
       $22 = ((($20)) + 4|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)>(-1);
       if ($24) {
        L15: do {
         if (!($9)) {
          $$062 = 0;
          while(1) {
           $25 = (($2) + ($$062<<2)|0);
           $26 = HEAP32[$25>>2]|0;
           $27 = ($26|0)>(-1);
           if (!($27)) {
            break;
           }
           $28 = ($26|0)==($23|0);
           $29 = (($$062) + 1)|0;
           if ($28) {
            break L15;
           } else {
            $$062 = $29;
           }
          }
          $30 = (($$062) + 1)|0;
          $31 = (($2) + ($30<<2)|0);
          HEAP32[$25>>2] = $23;
          HEAP32[$31>>2] = -1;
         }
        } while(0);
        if ($6) {
         $32 = HEAP32[$4>>2]|0;
         $33 = (($32) + 1)|0;
         HEAP32[$4>>2] = $33;
        }
       }
       break;
      }
      case 3:  {
       $38 = ((($13)) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = HEAP32[$39>>2]|0;
       $41 = ((($40)) + 8|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(0);
       if (!($43)) {
        $$sink = $40;
        label = 6;
        break L8;
       }
       $44 = ((($39)) + 4|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ((($45)) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0);
       if (!($48)) {
        $$sink = $45;
        label = 6;
       }
       break;
      }
      case 1:  {
       $49 = ((($13)) + 4|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = HEAP32[$50>>2]|0;
       $52 = (_tre_stack_push_voidptr($0,$51)|0);
       $53 = ($52|0)==(0);
       if (!($53)) {
        $$0$lcssa = $52;
        break L4;
       }
       $54 = ((($50)) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       $$sink = $55;
       label = 6;
       break;
      }
      case 2:  {
       $56 = ((($13)) + 4|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = HEAP32[$57>>2]|0;
       $59 = ((($58)) + 8|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==(0);
       if (!($61)) {
        $$sink = $58;
        label = 6;
       }
       break;
      }
      default: {
      }
      }
     } while(0);
     if ((label|0) == 6) {
      label = 0;
      $15 = (_tre_stack_push_voidptr($0,$$sink)|0);
      $16 = ($15|0)==(0);
      if (!($16)) {
       $$0$lcssa = $15;
       break L4;
      }
     }
     $17 = (_tre_stack_num_objects($0)|0);
     $18 = ($17|0)>($5|0);
     if (!($18)) {
      $$0$lcssa = 0;
      break L4;
     }
    }
   } else {
    $$0$lcssa = 0;
   }
  } else {
   $$0$lcssa = $7;
  }
 } while(0);
 return ($$0$lcssa|0);
}
function ___tre_mem_alloc_impl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$3 = 0, $$55 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre61$pre$phiZZ2D = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9>>>0)<($4>>>0);
   if ($10) {
    $12 = ($1|0)==(0);
    do {
     if ($12) {
      $16 = $4 << 3;
      $17 = ($16>>>0)>(1024);
      $$ = $17 ? $16 : 1024;
      $18 = (_malloc(8)|0);
      $19 = ($18|0)==(0|0);
      if ($19) {
       HEAP32[$5>>2] = 1;
       $$3 = 0;
       break L1;
      }
      $20 = (_malloc($$)|0);
      HEAP32[$18>>2] = $20;
      $21 = ($20|0)==(0|0);
      $22 = $20;
      if ($21) {
       _free($18);
       HEAP32[$5>>2] = 1;
       $$3 = 0;
       break L1;
      }
      $23 = ((($18)) + 4|0);
      HEAP32[$23>>2] = 0;
      $24 = ((($0)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)==(0|0);
      if (!($26)) {
       $27 = ((($25)) + 4|0);
       HEAP32[$27>>2] = $18;
      }
      $28 = HEAP32[$0>>2]|0;
      $29 = ($28|0)==(0|0);
      if ($29) {
       HEAP32[$0>>2] = $18;
      }
      HEAP32[$24>>2] = $18;
      $30 = ((($0)) + 8|0);
      HEAP32[$30>>2] = $22;
      $$pre61$pre$phiZZ2D = $30;$$sink = $$;$42 = $20;$43 = $22;
     } else {
      $13 = ($2|0)==(0|0);
      if ($13) {
       HEAP32[$5>>2] = 1;
       $$3 = 0;
       break L1;
      } else {
       $14 = ((($0)) + 8|0);
       HEAP32[$14>>2] = $2;
       $15 = $2;
       $$pre61$pre$phiZZ2D = $14;$$sink = 1024;$42 = $2;$43 = $15;
       break;
      }
     }
    } while(0);
    HEAP32[$8>>2] = $$sink;
    $$pre$phiZ2D = $$pre61$pre$phiZZ2D;$32 = $43;$38 = $42;$40 = $$sink;
   } else {
    $$phi$trans$insert = ((($0)) + 8|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $$pre$phiZ2D = $$phi$trans$insert;$32 = $$pre;$38 = $11;$40 = $9;
   }
   $31 = (($32) + ($4))|0;
   $33 = $31 & 3;
   $34 = ($33|0)==(0);
   $35 = (4 - ($33))|0;
   $$55 = $34 ? 0 : $35;
   $36 = (($$55) + ($4))|0;
   $37 = (($38) + ($36)|0);
   HEAP32[$$pre$phiZ2D>>2] = $37;
   $39 = (($40) - ($36))|0;
   HEAP32[$8>>2] = $39;
   $41 = ($3|0)==(0);
   if ($41) {
    $$3 = $38;
   } else {
    (_memset(($38|0),0,($36|0))|0);
    $$3 = $38;
   }
  } else {
   $$3 = 0;
  }
 } while(0);
 return ($$3|0);
}
function _tre_stack_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = ((($0)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($3<<2)|0);
  $9 = HEAP32[$1>>2]|0;
  HEAP32[$8>>2] = $9;
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$2>>2] = $11;
  $$1 = 0;
 } else {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($4|0)<($13|0);
  if ($14) {
   $15 = ((($0)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($4))|0;
   $18 = ($17|0)>($13|0);
   $$ = $18 ? $13 : $17;
   $19 = ((($0)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $$ << 2;
   $22 = (_realloc($20,$21)|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    $$1 = 12;
   } else {
    HEAP32[$0>>2] = $$;
    HEAP32[$19>>2] = $22;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
    (_tre_stack_push($0,$$byval_copy)|0);
    $$1 = 0;
   }
  } else {
   $$1 = 12;
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function _tre_ast_new_node($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___tre_mem_alloc_impl($0,0,0,1,32)|0);
 $4 = ($3|0)!=(0|0);
 $5 = ($2|0)!=(0|0);
 $or$cond = $5 & $4;
 if ($or$cond) {
  $6 = ((($3)) + 4|0);
  HEAP32[$6>>2] = $2;
  HEAP32[$3>>2] = $1;
  $7 = ((($3)) + 8|0);
  HEAP32[$7>>2] = -1;
  $8 = ((($3)) + 12|0);
  HEAP32[$8>>2] = -1;
  $$0 = $3;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _tre_copy_ast($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0146$ph$ph = 0, $$0151$ph$ph = 0, $$0155$ph$be = 0, $$0155$ph$ph = 0, $$0155$ph194 = 0, $$0162 = 0, $$0163 = 0, $$0164 = 0, $$1 = 0, $$1147 = 0, $$1152 = 0, $$3149 = 0, $$3154 = 0, $$4150 = 0, $$5160 = 0, $$6 = 0, $$7 = 0, $$old2 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond165 = 0, $or$cond167 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = (_tre_stack_num_objects($1)|0);
 (_tre_stack_push_voidptr($1,$2)|0);
 $9 = (_tre_stack_push_int($1,0)|0);
 $$old2 = ($9|0)==(0);
 L1: do {
  if ($$old2) {
   $10 = $3 & 1;
   $11 = ($10|0)==(0);
   $12 = $3 & 2;
   $13 = ($12|0)!=(0);
   $$0146$ph$ph = 0;$$0151$ph$ph = 1;$$0155$ph$ph = $6;
   while(1) {
    $14 = (_tre_stack_num_objects($1)|0);
    $15 = ($14|0)>($8|0);
    if ($15) {
     $$0155$ph194 = $$0155$ph$ph;
    } else {
     $$4150 = $$0146$ph$ph;$$7 = 0;
     break L1;
    }
    L5: while(1) {
     L7: while(1) {
      $16 = (_tre_stack_pop_int($1)|0);
      switch ($16|0) {
      case 1:  {
       label = 7;
       break L7;
       break;
      }
      case 0:  {
       $20 = (_tre_stack_pop_voidptr($1)|0);
       $21 = HEAP32[$20>>2]|0;
       switch ($21|0) {
       case 0:  {
        label = 9;
        break L5;
        break;
       }
       case 3:  {
        label = 19;
        break L5;
        break;
       }
       case 1:  {
        label = 26;
        break L5;
        break;
       }
       case 2:  {
        label = 33;
        break L7;
        break;
       }
       default: {
       }
       }
       break;
      }
      default: {
      }
      }
      $17 = (_tre_stack_num_objects($1)|0);
      $18 = ($17|0)>($8|0);
      if (!($18)) {
       $$4150 = $$0146$ph$ph;$$7 = 0;
       break L1;
      }
     }
     if ((label|0) == 7) {
      label = 0;
      $19 = (_tre_stack_pop_voidptr($1)|0);
      $$0155$ph$be = $19;
     }
     else if ((label|0) == 33) {
      label = 0;
      $96 = ((($20)) + 4|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = HEAP32[$97>>2]|0;
      $99 = (_tre_stack_push_voidptr($1,$98)|0);
      $100 = ($99|0)==(0);
      if (!($100)) {
       $$4150 = $$0146$ph$ph;$$7 = $99;
       break L1;
      }
      $101 = (_tre_stack_push_int($1,0)|0);
      $102 = ($101|0)==(0);
      if (!($102)) {
       $$4150 = $$0146$ph$ph;$$7 = $101;
       break L1;
      }
      $103 = HEAP32[$97>>2]|0;
      $104 = ((($97)) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ((($97)) + 8|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ((($97)) + 12|0);
      $109 = HEAP8[$108>>0]|0;
      $110 = $109 & 1;
      $111 = $110&255;
      $112 = (_tre_ast_new_iter($0,$103,$105,$107,$111)|0);
      HEAP32[$$0155$ph194>>2] = $112;
      $113 = ($112|0)==(0|0);
      if ($113) {
       $$4150 = $$0146$ph$ph;$$7 = 12;
       break L1;
      }
      $114 = ((($112)) + 4|0);
      $115 = HEAP32[$114>>2]|0;
      $$0155$ph$be = $115;
     }
     $116 = (_tre_stack_num_objects($1)|0);
     $117 = ($116|0)>($8|0);
     if ($117) {
      $$0155$ph194 = $$0155$ph$be;
     } else {
      $$4150 = $$0146$ph$ph;$$7 = 0;
      break L1;
     }
    }
    if ((label|0) == 9) {
     label = 0;
     $22 = ((($20)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ((($23)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$23>>2]|0;
     $27 = ((($23)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($26|0)>(-1);
     $30 = ($26|0)==(-4);
     $or$cond165 = $29 | $30;
     if ($or$cond165) {
      $31 = HEAP32[$4>>2]|0;
      $32 = (($31) + ($25))|0;
      $33 = (($$0146$ph$ph) + 1)|0;
      $$0162 = $28;$$0163 = $26;$$0164 = $32;$$1147 = $33;$$1152 = $$0151$ph$ph;
     } else {
      $34 = ($26|0)!=(-3);
      $or$cond167 = $11 | $34;
      if ($or$cond167) {
       $35 = ($26|0)==(-3);
       if ($35) {
        $36 = ($$0151$ph$ph|0)!=(0);
        $or$cond = $13 & $36;
        if ($or$cond) {
         $37 = (($5) + ($28<<2)|0);
         HEAP32[$37>>2] = 1;
         $$0162 = $28;$$0163 = -3;$$0164 = $25;$$1147 = $$0146$ph$ph;$$1152 = 0;
        } else {
         $$0162 = $28;$$0163 = -3;$$0164 = $25;$$1147 = $$0146$ph$ph;$$1152 = $$0151$ph$ph;
        }
       } else {
        $$0162 = $28;$$0163 = $26;$$0164 = $25;$$1147 = $$0146$ph$ph;$$1152 = $$0151$ph$ph;
       }
      } else {
       $$0162 = -1;$$0163 = -1;$$0164 = -1;$$1147 = $$0146$ph$ph;$$1152 = $$0151$ph$ph;
      }
     }
     $38 = (_tre_ast_new_literal($0,$$0163,$$0162,$$0164)|0);
     HEAP32[$$0155$ph194>>2] = $38;
     $39 = ($38|0)==(0|0);
     if ($39) {
      $$1 = 12;
     } else {
      $40 = ((($38)) + 4|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($23)) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ((($41)) + 12|0);
      HEAP32[$44>>2] = $43;
      $45 = ((($23)) + 16|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ((($41)) + 16|0);
      HEAP32[$47>>2] = $46;
      $$1 = 0;
     }
     $48 = HEAP32[$7>>2]|0;
     $49 = ($$0164|0)>($48|0);
     if ($49) {
      HEAP32[$7>>2] = $$0164;
      $$3149 = $$1147;$$3154 = $$1152;$$5160 = $$0155$ph194;$$6 = $$1;
     } else {
      $$3149 = $$1147;$$3154 = $$1152;$$5160 = $$0155$ph194;$$6 = $$1;
     }
    }
    else if ((label|0) == 19) {
     label = 0;
     $50 = ((($20)) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$51>>2]|0;
     $53 = ((($51)) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (_tre_ast_new_union($0,$52,$54)|0);
     HEAP32[$$0155$ph194>>2] = $55;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $$4150 = $$0146$ph$ph;$$7 = 12;
      break L1;
     }
     $57 = ((($55)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = HEAP32[$53>>2]|0;
     $60 = (_tre_stack_push_voidptr($1,$59)|0);
     $61 = ($60|0)==(0);
     if (!($61)) {
      $$4150 = $$0146$ph$ph;$$7 = $60;
      break L1;
     }
     $62 = (_tre_stack_push_int($1,0)|0);
     $63 = ($62|0)==(0);
     if (!($63)) {
      $$4150 = $$0146$ph$ph;$$7 = $62;
      break L1;
     }
     $64 = ((($58)) + 4|0);
     $65 = (_tre_stack_push_voidptr($1,$64)|0);
     $66 = ($65|0)==(0);
     if (!($66)) {
      $$4150 = $$0146$ph$ph;$$7 = $65;
      break L1;
     }
     $67 = (_tre_stack_push_int($1,1)|0);
     $68 = ($67|0)==(0);
     if (!($68)) {
      $$4150 = $$0146$ph$ph;$$7 = $67;
      break L1;
     }
     $69 = HEAP32[$51>>2]|0;
     $70 = (_tre_stack_push_voidptr($1,$69)|0);
     $71 = ($70|0)==(0);
     if (!($71)) {
      $$4150 = $$0146$ph$ph;$$7 = $70;
      break L1;
     }
     $72 = (_tre_stack_push_int($1,0)|0);
     $$3149 = $$0146$ph$ph;$$3154 = $$0151$ph$ph;$$5160 = $58;$$6 = $72;
    }
    else if ((label|0) == 26) {
     label = 0;
     $73 = ((($20)) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($74)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (_tre_ast_new_catenation($0,$75,$77)|0);
     HEAP32[$$0155$ph194>>2] = $78;
     $79 = ($78|0)==(0|0);
     if ($79) {
      $$4150 = $$0146$ph$ph;$$7 = 12;
      break L1;
     }
     $80 = ((($78)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     HEAP32[$81>>2] = 0;
     $82 = ((($81)) + 4|0);
     HEAP32[$82>>2] = 0;
     $83 = HEAP32[$76>>2]|0;
     $84 = (_tre_stack_push_voidptr($1,$83)|0);
     $85 = ($84|0)==(0);
     if (!($85)) {
      $$4150 = $$0146$ph$ph;$$7 = $84;
      break L1;
     }
     $86 = (_tre_stack_push_int($1,0)|0);
     $87 = ($86|0)==(0);
     if (!($87)) {
      $$4150 = $$0146$ph$ph;$$7 = $86;
      break L1;
     }
     $88 = (_tre_stack_push_voidptr($1,$82)|0);
     $89 = ($88|0)==(0);
     if (!($89)) {
      $$4150 = $$0146$ph$ph;$$7 = $88;
      break L1;
     }
     $90 = (_tre_stack_push_int($1,1)|0);
     $91 = ($90|0)==(0);
     if (!($91)) {
      $$4150 = $$0146$ph$ph;$$7 = $90;
      break L1;
     }
     $92 = HEAP32[$74>>2]|0;
     $93 = (_tre_stack_push_voidptr($1,$92)|0);
     $94 = ($93|0)==(0);
     if (!($94)) {
      $$4150 = $$0146$ph$ph;$$7 = $93;
      break L1;
     }
     $95 = (_tre_stack_push_int($1,0)|0);
     $$3149 = $$0146$ph$ph;$$3154 = $$0151$ph$ph;$$5160 = $81;$$6 = $95;
    }
    $118 = ($$6|0)==(0);
    if ($118) {
     $$0146$ph$ph = $$3149;$$0151$ph$ph = $$3154;$$0155$ph$ph = $$5160;
    } else {
     $$4150 = $$3149;$$7 = $$6;
     break;
    }
   }
  } else {
   $$4150 = 0;$$7 = $9;
  }
 } while(0);
 $119 = HEAP32[$4>>2]|0;
 $120 = (($119) + ($$4150))|0;
 HEAP32[$4>>2] = $120;
 return ($$7|0);
}
function _tre_ast_new_iter($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (___tre_mem_alloc_impl($0,0,0,1,16)|0);
 $6 = (_tre_ast_new_node($0,2,$5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
 } else {
  HEAP32[$5>>2] = $1;
  $8 = ((($5)) + 4|0);
  HEAP32[$8>>2] = $2;
  $9 = ((($5)) + 8|0);
  HEAP32[$9>>2] = $3;
  $10 = ((($5)) + 12|0);
  $11 = $4&255;
  $12 = HEAP8[$10>>0]|0;
  $13 = $11 & 1;
  $14 = $12 & -2;
  $15 = $14 | $13;
  HEAP8[$10>>0] = $15;
  $16 = ((($1)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($6)) + 16|0);
  HEAP32[$18>>2] = $17;
  $$0 = $6;
 }
 return ($$0|0);
}
function _tre_ast_new_union($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$0 = $2;
 } else {
  $4 = (___tre_mem_alloc_impl($0,0,0,1,8)|0);
  $5 = (_tre_ast_new_node($0,3,$4)|0);
  $6 = ($5|0)!=(0|0);
  $7 = ($2|0)!=(0|0);
  $or$cond = $7 & $6;
  if ($or$cond) {
   HEAP32[$4>>2] = $1;
   $8 = ((($4)) + 4|0);
   HEAP32[$8>>2] = $2;
   $9 = ((($1)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($2)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($10))|0;
   $14 = ((($5)) + 16|0);
   HEAP32[$14>>2] = $13;
   $$0 = $5;
  } else {
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _tre_add_tag_left($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___tre_mem_alloc_impl($0,0,0,0,8)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 12;
 } else {
  $5 = (_tre_ast_new_literal($0,-3,$2,-1)|0);
  HEAP32[$3>>2] = $5;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$0 = 12;
  } else {
   $7 = (___tre_mem_alloc_impl($0,0,0,0,32)|0);
   $8 = ((($3)) + 4|0);
   HEAP32[$8>>2] = $7;
   $9 = ($7|0)==(0|0);
   if ($9) {
    $$0 = 12;
   } else {
    $10 = ((($1)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($7)) + 4|0);
    HEAP32[$12>>2] = $11;
    $13 = HEAP32[$1>>2]|0;
    HEAP32[$7>>2] = $13;
    $14 = ((($7)) + 8|0);
    HEAP32[$14>>2] = -1;
    $15 = ((($7)) + 12|0);
    HEAP32[$15>>2] = -1;
    $16 = ((($7)) + 16|0);
    ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;
    HEAP32[$10>>2] = $3;
    HEAP32[$1>>2] = 1;
    $$0 = 0;
   }
  }
 }
 return ($$0|0);
}
function _tre_purge_regset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)>(-1);
 if ($4) {
  $5 = ((($1)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $$016 = 0;$8 = $3;
  while(1) {
   $7 = $8 >>> 1;
   $9 = $8 & 1;
   $10 = ($9|0)==(0);
   $11 = (((($6) + (($7*12)|0)|0)) + 4|0);
   $12 = (($6) + (($7*12)|0)|0);
   $$sink = $10 ? $12 : $11;
   HEAP32[$$sink>>2] = $2;
   $13 = (($$016) + 1)|0;
   $14 = (($0) + ($13<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)>(-1);
   if ($16) {
    $$016 = $13;$8 = $15;
   } else {
    break;
   }
  }
 }
 HEAP32[$0>>2] = -1;
 return;
}
function _tre_add_tag_right($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___tre_mem_alloc_impl($0,0,0,0,8)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 12;
 } else {
  $5 = (_tre_ast_new_literal($0,-3,$2,-1)|0);
  $6 = ((($3)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = ($5|0)==(0|0);
  if ($7) {
   $$0 = 12;
  } else {
   $8 = (___tre_mem_alloc_impl($0,0,0,0,32)|0);
   HEAP32[$3>>2] = $8;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$0 = 12;
   } else {
    $10 = ((($1)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($8)) + 4|0);
    HEAP32[$12>>2] = $11;
    $13 = HEAP32[$1>>2]|0;
    HEAP32[$8>>2] = $13;
    $14 = ((($8)) + 8|0);
    HEAP32[$14>>2] = -1;
    $15 = ((($8)) + 12|0);
    HEAP32[$15>>2] = -1;
    $16 = ((($8)) + 16|0);
    ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;
    HEAP32[$10>>2] = $3;
    HEAP32[$1>>2] = 1;
    $$0 = 0;
   }
  }
 }
 return ($$0|0);
}
function _parse_atom($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$0125 = 0, $$0130$lcssa = 0, $$0130139 = 0, $$0131$lcssa = 0, $$0131138 = 0, $$1 = 0, $$132 = 0, $$133 = 0, $$2 = 0, $$2127 = 0, $$3 = 0, $$4 = 0, $$4129 = 0, $$5 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond134 = 0, $cond135 = 0, $or$cond = 0, $or$cond137 = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = HEAP8[$1>>0]|0;
 $7 = $6 << 24 >> 24;
 L1: do {
  switch ($7|0) {
  case 91:  {
   $8 = ((($1)) + 1|0);
   $9 = (_parse_bracket($0,$8)|0);
   $$0 = $9;
   break;
  }
  case 92:  {
   $10 = ((($1)) + 1|0);
   $11 = (_tre_expand_macro($10)|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = (_parse_atom($0,$11)|0);
    $14 = ((($1)) + 2|0);
    $15 = ((($0)) + 12|0);
    HEAP32[$15>>2] = $14;
    $$0 = $13;
    break L1;
   }
   $16 = HEAP8[$10>>0]|0;
   $17 = $16 << 24 >> 24;
   switch ($17|0) {
   case 0:  {
    $$0 = 5;
    break L1;
    break;
   }
   case 98:  {
    $18 = HEAP32[$0>>2]|0;
    $19 = (_tre_ast_new_literal($18,-2,64,-1)|0);
    $$0125 = $19;$$2 = $10;
    break;
   }
   case 66:  {
    $20 = HEAP32[$0>>2]|0;
    $21 = (_tre_ast_new_literal($20,-2,128,-1)|0);
    $$0125 = $21;$$2 = $10;
    break;
   }
   case 60:  {
    $22 = HEAP32[$0>>2]|0;
    $23 = (_tre_ast_new_literal($22,-2,16,-1)|0);
    $$0125 = $23;$$2 = $10;
    break;
   }
   case 62:  {
    $24 = HEAP32[$0>>2]|0;
    $25 = (_tre_ast_new_literal($24,-2,32,-1)|0);
    $$0125 = $25;$$2 = $10;
    break;
   }
   case 120:  {
    $26 = ((($1)) + 2|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = ($27<<24>>24)==(123);
    $29 = ((($1)) + 3|0);
    $$ = $28 ? 8 : 2;
    $$132 = $28 ? $29 : $26;
    $$0130139 = 0;$$0131138 = 0;
    while(1) {
     $30 = (($$132) + ($$0130139)|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31 << 24 >> 24;
     $33 = (_hexval_539($32)|0);
     $34 = ($33|0)<(0);
     if ($34) {
      $$0130$lcssa = $$0130139;$$0131$lcssa = $$0131138;
      break;
     }
     $35 = $$0131138 << 4;
     $36 = (($33) + ($35))|0;
     $37 = (($$0130139) + 1)|0;
     $38 = ($37|0)<($$|0);
     $39 = ($36|0)<(1114112);
     $40 = $39 & $38;
     if ($40) {
      $$0130139 = $37;$$0131138 = $36;
     } else {
      $$0130$lcssa = $37;$$0131$lcssa = $36;
      break;
     }
    }
    $41 = (($$132) + ($$0130$lcssa)|0);
    if ($28) {
     $42 = HEAP8[$41>>0]|0;
     $43 = ($42<<24>>24)==(125);
     if (!($43)) {
      $$0 = 9;
      break L1;
     }
     $44 = ((($41)) + 1|0);
     $$1 = $44;
    } else {
     $$1 = $41;
    }
    $45 = HEAP32[$0>>2]|0;
    $46 = ((($0)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[$46>>2] = $48;
    $49 = (_tre_ast_new_literal($45,$$0131$lcssa,$$0131$lcssa,$47)|0);
    $50 = ((($$1)) + -1|0);
    $$0125 = $49;$$2 = $50;
    break;
   }
   case 63: case 43: case 123:  {
    $cond = ($5|0)==(0);
    if ($cond) {
     $$0 = 13;
     break L1;
    } else {
     $$3 = $10;
     label = 37;
     break L1;
    }
    break;
   }
   case 124:  {
    $cond134 = ($5|0)==(0);
    if (!($cond134)) {
     $$3 = $10;
     label = 37;
     break L1;
    }
    $51 = HEAP32[$0>>2]|0;
    $52 = (_tre_ast_new_literal($51,-1,-1,-1)|0);
    $$4 = $1;$$5 = $52;
    label = 45;
    break L1;
    break;
   }
   default: {
    $53 = ($5|0)==(0);
    $54 = (($17) + -49)|0;
    $55 = ($54>>>0)<(9);
    $or$cond137 = $53 & $55;
    if (!($or$cond137)) {
     $$3 = $10;
     label = 37;
     break L1;
    }
    $56 = (($17) + -48)|0;
    $57 = HEAP32[$0>>2]|0;
    $58 = ((($0)) + 24|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + 1)|0;
    HEAP32[$58>>2] = $60;
    $61 = (_tre_ast_new_literal($57,-4,$56,$59)|0);
    $62 = ((($0)) + 28|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($56|0)<($63|0);
    $$133 = $64 ? $63 : $56;
    HEAP32[$62>>2] = $$133;
    $$0125 = $61;$$2 = $10;
   }
   }
   $65 = ((($$2)) + 1|0);
   $$4 = $65;$$5 = $$0125;
   label = 45;
   break;
  }
  case 46:  {
   $66 = $4 & 4;
   $67 = ($66|0)==(0);
   $68 = HEAP32[$0>>2]|0;
   $69 = ((($0)) + 24|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 1)|0;
   HEAP32[$69>>2] = $71;
   if ($67) {
    $81 = (_tre_ast_new_literal($68,0,1114111,$70)|0);
    $$2127 = $81;
   } else {
    $72 = (_tre_ast_new_literal($68,0,9,$70)|0);
    $73 = HEAP32[$0>>2]|0;
    $74 = HEAP32[$69>>2]|0;
    $75 = (($74) + 1)|0;
    HEAP32[$69>>2] = $75;
    $76 = (_tre_ast_new_literal($73,11,1114111,$74)|0);
    $77 = ($72|0)!=(0|0);
    $78 = ($76|0)!=(0|0);
    $or$cond = $77 & $78;
    if ($or$cond) {
     $79 = HEAP32[$0>>2]|0;
     $80 = (_tre_ast_new_union($79,$72,$76)|0);
     $$2127 = $80;
    } else {
     $$2127 = 0;
    }
   }
   $82 = ((($1)) + 1|0);
   $$4 = $82;$$5 = $$2127;
   label = 45;
   break;
  }
  case 94:  {
   $83 = ($5|0)==(0);
   if ($83) {
    $84 = ((($0)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($1|0);
    if (!($86)) {
     $$3 = $1;
     label = 37;
     break L1;
    }
   }
   $87 = HEAP32[$0>>2]|0;
   $88 = (_tre_ast_new_literal($87,-2,1,-1)|0);
   $89 = ((($1)) + 1|0);
   $$4 = $89;$$5 = $88;
   label = 45;
   break;
  }
  case 36:  {
   $90 = ($5|0)==(0);
   $91 = ((($1)) + 1|0);
   if ($90) {
    $92 = HEAP8[$91>>0]|0;
    $93 = ($92<<24>>24)==(0);
    if (!($93)) {
     $$3 = $1;
     label = 37;
     break L1;
    }
   }
   $94 = HEAP32[$0>>2]|0;
   $95 = (_tre_ast_new_literal($94,-2,2,-1)|0);
   $$4 = $91;$$5 = $95;
   label = 45;
   break;
  }
  case 63: case 43: case 123: case 42:  {
   $cond135 = ($5|0)==(0);
   if ($cond135) {
    $$3 = $1;
    label = 37;
   } else {
    $$0 = 13;
   }
   break;
  }
  case 124:  {
   $96 = ($5|0)==(0);
   if ($96) {
    $$3 = $1;
    label = 37;
   } else {
    label = 36;
   }
   break;
  }
  case 0:  {
   label = 36;
   break;
  }
  default: {
   $$3 = $1;
   label = 37;
  }
  }
 } while(0);
 if ((label|0) == 36) {
  $97 = HEAP32[$0>>2]|0;
  $98 = (_tre_ast_new_literal($97,-1,-1,-1)|0);
  $$4 = $1;$$5 = $98;
  label = 45;
 }
 else if ((label|0) == 37) {
  $99 = (_mbtowc($2,$$3,-1)|0);
  $100 = ($99|0)<(0);
  if ($100) {
   $$0 = 2;
  } else {
   $101 = HEAP32[$3>>2]|0;
   $102 = $101 & 2;
   $103 = ($102|0)==(0);
   do {
    if ($103) {
     label = 43;
    } else {
     $104 = HEAP32[$2>>2]|0;
     $105 = (_iswupper($104)|0);
     $106 = ($105|0)==(0);
     if ($106) {
      $107 = HEAP32[$2>>2]|0;
      $108 = (_iswlower($107)|0);
      $109 = ($108|0)==(0);
      if ($109) {
       label = 43;
       break;
      }
     }
     $110 = HEAP32[$0>>2]|0;
     $111 = HEAP32[$2>>2]|0;
     $112 = (_towupper($111)|0);
     $113 = HEAP32[$2>>2]|0;
     $114 = (_towupper($113)|0);
     $115 = ((($0)) + 24|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (_tre_ast_new_literal($110,$112,$114,$116)|0);
     $118 = HEAP32[$0>>2]|0;
     $119 = HEAP32[$2>>2]|0;
     $120 = (_towlower($119)|0);
     $121 = HEAP32[$2>>2]|0;
     $122 = (_towlower($121)|0);
     $123 = HEAP32[$115>>2]|0;
     $124 = (_tre_ast_new_literal($118,$120,$122,$123)|0);
     $125 = ($117|0)!=(0|0);
     $126 = ($124|0)!=(0|0);
     $or$cond3 = $125 & $126;
     if ($or$cond3) {
      $127 = HEAP32[$0>>2]|0;
      $128 = (_tre_ast_new_union($127,$117,$124)|0);
      $$4129 = $128;$$pre$phiZ2D = $115;
     } else {
      $$4129 = 0;$$pre$phiZ2D = $115;
     }
    }
   } while(0);
   if ((label|0) == 43) {
    $129 = HEAP32[$0>>2]|0;
    $130 = HEAP32[$2>>2]|0;
    $131 = ((($0)) + 24|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (_tre_ast_new_literal($129,$130,$130,$132)|0);
    $$4129 = $133;$$pre$phiZ2D = $131;
   }
   $134 = HEAP32[$$pre$phiZ2D>>2]|0;
   $135 = (($134) + 1)|0;
   HEAP32[$$pre$phiZ2D>>2] = $135;
   $136 = (($$3) + ($99)|0);
   $$4 = $136;$$5 = $$4129;
   label = 45;
  }
 }
 if ((label|0) == 45) {
  $137 = ($$5|0)==(0|0);
  if ($137) {
   $$0 = 12;
  } else {
   $138 = ((($0)) + 8|0);
   HEAP32[$138>>2] = $$5;
   $139 = ((($0)) + 12|0);
   HEAP32[$139>>2] = $$4;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _parse_dup($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$016 = 0, $$1 = 0, $$pre = 0, $$pre17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (_parse_dup_count($0,$4)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(44);
 if ($8) {
  $9 = ((($6)) + 1|0);
  $10 = (_parse_dup_count($9,$5)|0);
  $$pre = HEAP32[$5>>2]|0;
  $$pre17 = HEAP32[$4>>2]|0;
  $$016 = $10;$13 = $$pre;$14 = $$pre17;
 } else {
  $11 = HEAP32[$4>>2]|0;
  HEAP32[$5>>2] = $11;
  $$016 = $6;$13 = $11;$14 = $11;
 }
 $12 = ($13|0)<($14|0);
 $15 = ($13|0)>(-1);
 $or$cond = $15 & $12;
 $16 = ($13|0)>(255);
 $or$cond3 = $16 | $or$cond;
 $17 = ($14>>>0)>(255);
 $18 = $17 | $or$cond3;
 do {
  if ($18) {
   $$0 = 0;
  } else {
   $19 = ($1|0)==(0);
   if ($19) {
    $20 = ((($$016)) + 1|0);
    $21 = HEAP8[$$016>>0]|0;
    $22 = ($21<<24>>24)==(92);
    if ($22) {
     $$1 = $20;
    } else {
     $$0 = 0;
     break;
    }
   } else {
    $$1 = $$016;
   }
   $23 = HEAP8[$$1>>0]|0;
   $24 = ($23<<24>>24)==(125);
   if ($24) {
    $25 = ((($$1)) + 1|0);
    HEAP32[$2>>2] = $14;
    HEAP32[$3>>2] = $13;
    $$0 = $25;
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _marksub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $$119 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (_tre_ast_new_literal($6,-1,-1,-1)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$1 = 12;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = (_tre_ast_new_catenation($9,$7,$1)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$1 = 12;
   } else {
    $12 = ((($1)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($10)) + 16|0);
    HEAP32[$14>>2] = $13;
    $$119 = $10;$18 = $13;
    label = 6;
   }
  }
 } else {
  $$phi$trans$insert = ((($1)) + 16|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$119 = $1;$18 = $$pre;
  label = 6;
 }
 if ((label|0) == 6) {
  $15 = ((($$119)) + 12|0);
  HEAP32[$15>>2] = $2;
  $16 = ((($$119)) + 16|0);
  $17 = (($18) + 1)|0;
  HEAP32[$16>>2] = $17;
  $19 = ((($0)) + 8|0);
  HEAP32[$19>>2] = $$119;
  $$1 = 0;
 }
 return ($$1|0);
}
function _parse_dup_count($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = -1;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $$0 = $0;
  } else {
   HEAP32[$1>>2] = 0;
   $$012 = $0;$7 = 0;
   while(1) {
    $6 = ($7*10)|0;
    $8 = HEAP8[$$012>>0]|0;
    $9 = $8 << 24 >> 24;
    $10 = (($6) + -48)|0;
    $11 = (($10) + ($9))|0;
    HEAP32[$1>>2] = $11;
    $12 = ((($$012)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = (_isdigit($14)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $$0 = $12;
     break L1;
    }
    $17 = HEAP32[$1>>2]|0;
    $18 = ($17|0)>(255);
    if ($18) {
     $$0 = $12;
     break;
    } else {
     $$012 = $12;$7 = $17;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _parse_bracket($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$064 = 0, $$065 = 0, $$06674 = 0, $$06773 = 0, $$07172 = 0, $$1 = 0, $$168 = 0, $$2 = 0, $$269 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $2 = sp + 264|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 12|0);
 HEAP32[$6>>2] = 32;
 $7 = (_malloc(128)|0);
 $8 = ((($2)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = ($7|0)==(0|0);
 if ($9) {
  $$065 = 12;
 } else {
  $10 = ((($3)) + 4|0);
  HEAP32[$10>>2] = 0;
  $11 = HEAP8[$1>>0]|0;
  $12 = ($11<<24>>24)==(94);
  $13 = $12&1;
  HEAP32[$3>>2] = $13;
  $14 = ((($1)) + 1|0);
  $$ = $12 ? $14 : $1;
  $15 = (_parse_bracket_terms($0,$$,$2,$3)|0);
  $16 = ($15|0)==(0);
  L3: do {
   if ($16) {
    $17 = HEAP32[$3>>2]|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $$064 = 0;
    } else {
     $19 = HEAP32[$8>>2]|0;
     $20 = HEAP32[$5>>2]|0;
     _qsort($19,$20,4,10);
     $21 = (_tre_new_lit($2)|0);
     $22 = ($21|0)==(0|0);
     if ($22) {
      $$0 = 12;$$2 = 0;
      break;
     }
     HEAP32[$21>>2] = 1114112;
     $23 = ((($21)) + 4|0);
     HEAP32[$23>>2] = 1114112;
     $24 = ((($21)) + 8|0);
     HEAP32[$24>>2] = -1;
     $25 = HEAP32[$10>>2]|0;
     $26 = ($25|0)==(0);
     if ($26) {
      $$064 = 0;
     } else {
      $27 = HEAP32[$0>>2]|0;
      $28 = $25 << 2;
      $29 = (($28) + 4)|0;
      $30 = (___tre_mem_alloc_impl($27,0,0,0,$29)|0);
      $31 = ($30|0)==(0|0);
      if ($31) {
       $$0 = 12;$$2 = 0;
       break;
      }
      $32 = ((($3)) + 8|0);
      (_memcpy(($30|0),($32|0),($28|0))|0);
      $33 = (($30) + ($25<<2)|0);
      HEAP32[$33>>2] = 0;
      $$064 = $30;
     }
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = ($34|0)>(0);
    if ($35) {
     $36 = HEAP32[$8>>2]|0;
     $37 = ((($0)) + 24|0);
     $$06674 = 0;$$06773 = 0;$$07172 = 0;
     while(1) {
      $38 = (($36) + ($$07172<<2)|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = HEAP32[$39>>2]|0;
      $41 = ((($39)) + 4|0);
      $42 = HEAP32[$41>>2]|0;
      do {
       if ($18) {
        $$168 = $$06773;
        label = 14;
       } else {
        $43 = ($40|0)>($$06773|0);
        if ($43) {
         $47 = (($40) + -1)|0;
         HEAP32[$39>>2] = $$06773;
         HEAP32[$41>>2] = $47;
         $48 = (($42) + 1)|0;
         $$168 = $48;
         label = 14;
         break;
        } else {
         $44 = (($42) + 1)|0;
         $45 = ($44|0)>=($$06773|0);
         $46 = $45 ? $44 : $$06773;
         $$1 = $$06674;$$269 = $46;
         break;
        }
       }
      } while(0);
      if ((label|0) == 14) {
       label = 0;
       $49 = HEAP32[$37>>2]|0;
       $50 = ((($39)) + 8|0);
       HEAP32[$50>>2] = $49;
       $51 = ((($39)) + 16|0);
       HEAP32[$51>>2] = $$064;
       $52 = HEAP32[$0>>2]|0;
       $53 = (_tre_ast_new_node($52,0,$39)|0);
       $54 = HEAP32[$0>>2]|0;
       $55 = (_tre_ast_new_union($54,$$06674,$53)|0);
       $56 = ($55|0)==(0|0);
       if ($56) {
        $$0 = 12;$$2 = 0;
        break L3;
       } else {
        $$1 = $55;$$269 = $$168;
       }
      }
      $57 = (($$07172) + 1)|0;
      $58 = ($57|0)<($34|0);
      if ($58) {
       $$06674 = $$1;$$06773 = $$269;$$07172 = $57;
      } else {
       $$0 = 0;$$2 = $$1;
       break;
      }
     }
    } else {
     $$0 = 0;$$2 = 0;
    }
   } else {
    $$0 = $15;$$2 = 0;
   }
  } while(0);
  $59 = HEAP32[$8>>2]|0;
  _free($59);
  $60 = ((($0)) + 24|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 1)|0;
  HEAP32[$60>>2] = $62;
  $63 = ((($0)) + 8|0);
  HEAP32[$63>>2] = $$2;
  $$065 = $$0;
 }
 STACKTOP = sp;return ($$065|0);
}
function _tre_expand_macro($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$05 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $$05 = 0;
 while(1) {
  $2 = (1480 + ($$05<<3)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==($1<<24>>24);
  if ($4) {
   $$0$lcssa = $$05;
   break;
  }
  $5 = (($$05) + 1)|0;
  $6 = ($5|0)==(12);
  if ($6) {
   $$0$lcssa = 12;
   break;
  } else {
   $$05 = $5;
  }
 }
 $7 = (((1480 + ($$0$lcssa<<3)|0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 return ($8|0);
}
function _hexval_539($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 if ($2) {
  return ($1|0);
 } else {
  $3 = $0 | 32;
  $4 = (($3) + -97)|0;
  $5 = ($4>>>0)<(6);
  $6 = (($3) + -87)|0;
  $$ = $5 ? $6 : -1;
  return ($$|0);
 }
 return (0)|0;
}
function _parse_bracket_terms($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$082119 = 0, $$091$be = 0, $$091120 = 0, $$190101 = 0, $$285103 = 0, $$288102 = 0, $$293100 = 0, $$4 = 0, $$lcssa110 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond94 = 0, $or$cond95 = 0, $or$cond96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $5 = sp + 4|0;
 $6 = (_mbtowc($4,$1,-1)|0);
 $7 = ($6|0)<(1);
 $8 = HEAP8[$1>>0]|0;
 L1: do {
  if ($7) {
   $$lcssa110 = $8;
   label = 3;
  } else {
   $9 = ((($3)) + 4|0);
   $10 = ((($0)) + 32|0);
   $$091120 = $1;$14 = $8;$43 = $6;
   L3: while(1) {
    $13 = ($14<<24>>24)!=(93);
    $15 = ($$091120|0)==($1|0);
    $or$cond94 = $15 | $13;
    if (!($or$cond94)) {
     label = 5;
     break;
    }
    $18 = ($14<<24>>24)!=(45);
    $or$cond95 = $15 | $18;
    L6: do {
     if (!($or$cond95)) {
      $19 = ((($$091120)) + 1|0);
      $20 = HEAP8[$19>>0]|0;
      switch ($20<<24>>24) {
      case 93:  {
       break L6;
       break;
      }
      case 45:  {
       break;
      }
      default: {
       $$4 = 11;
       break L1;
      }
      }
      $21 = ((($$091120)) + 2|0);
      $22 = HEAP8[$21>>0]|0;
      $23 = ($22<<24>>24)==(93);
      if ($23) {
       $$4 = 11;
       break L1;
      }
     }
    } while(0);
    $24 = ($14<<24>>24)==(91);
    L10: do {
     if ($24) {
      $25 = ((($$091120)) + 1|0);
      $26 = HEAP8[$25>>0]|0;
      switch ($26<<24>>24) {
      case 61: case 46:  {
       $$4 = 3;
       break L1;
       break;
      }
      case 58:  {
       break;
      }
      default: {
       label = 17;
       break L10;
      }
      }
      $27 = ((($$091120)) + 2|0);
      $$082119 = 0;
      L13: while(1) {
       $28 = (($27) + ($$082119)|0);
       $29 = HEAP8[$28>>0]|0;
       switch ($29<<24>>24) {
       case 0:  {
        label = 16;
        break L3;
        break;
       }
       case 58:  {
        break L13;
        break;
       }
       default: {
       }
       }
       $30 = (($$082119) + 1)|0;
       $31 = ($$082119|0)<(13);
       if ($31) {
        $$082119 = $30;
       } else {
        label = 16;
        break L3;
       }
      }
      (_memcpy(($5|0),($27|0),($$082119|0))|0);
      $32 = (($5) + ($$082119)|0);
      HEAP8[$32>>0] = 0;
      $33 = (_wctype($5)|0);
      $34 = ($33|0)==(0);
      if ($34) {
       label = 16;
       break L3;
      }
      $35 = (($$082119) + 1)|0;
      $36 = (($27) + ($35)|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(93);
      $39 = (($$082119) + 2)|0;
      $40 = (($27) + ($39)|0);
      if (!($38)) {
       label = 16;
       break L3;
      }
      $54 = HEAP32[$3>>2]|0;
      $55 = ($54|0)==(0);
      if ($55) {
       $$190101 = $33;$$285103 = 1114111;$$288102 = 0;$$293100 = $40;$71 = 1;
       label = 25;
      } else {
       $56 = HEAP32[$9>>2]|0;
       $57 = ($56|0)>(63);
       if ($57) {
        $$4 = 12;
        break L1;
       }
       $58 = (($56) + 1)|0;
       HEAP32[$9>>2] = $58;
       $59 = (((($3)) + 8|0) + ($56<<2)|0);
       HEAP32[$59>>2] = $33;
       $$091$be = $40;
      }
     } else {
      label = 17;
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     $41 = HEAP32[$4>>2]|0;
     $42 = (($$091120) + ($43)|0);
     $44 = HEAP8[$42>>0]|0;
     $45 = ($44<<24>>24)==(45);
     if ($45) {
      $46 = ((($42)) + 1|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = ($47<<24>>24)==(93);
      if ($48) {
       $$190101 = 0;$$285103 = $41;$$288102 = $41;$$293100 = $42;$71 = 0;
       label = 25;
      } else {
       $49 = (_mbtowc($4,$46,-1)|0);
       $50 = HEAP32[$4>>2]|0;
       $51 = ($49|0)<(1);
       $52 = ($41|0)>($50|0);
       $or$cond96 = $51 | $52;
       if ($or$cond96) {
        $$4 = 11;
        break L1;
       }
       $53 = (($46) + ($49)|0);
       $$190101 = 0;$$285103 = $50;$$288102 = $41;$$293100 = $53;$71 = 0;
       label = 25;
      }
     } else {
      $$190101 = 0;$$285103 = $41;$$288102 = $41;$$293100 = $42;$71 = 0;
      label = 25;
     }
    }
    if ((label|0) == 25) {
     label = 0;
     $63 = (_tre_new_lit($2)|0);
     $64 = ($63|0)==(0|0);
     if ($64) {
      $$4 = 12;
      break L1;
     }
     HEAP32[$63>>2] = $$288102;
     $65 = ((($63)) + 4|0);
     HEAP32[$65>>2] = $$285103;
     $66 = ((($63)) + 12|0);
     HEAP32[$66>>2] = $$190101;
     $67 = ((($63)) + 8|0);
     HEAP32[$67>>2] = -1;
     $68 = HEAP32[$10>>2]|0;
     $69 = $68 & 2;
     $70 = ($69|0)==(0);
     $or$cond = $71 | $70;
     if ($or$cond) {
      $$091$be = $$293100;
     } else {
      $72 = (_add_icase_literals($2,$$288102,$$285103)|0);
      $73 = ($72|0)==(0);
      if ($73) {
       $$091$be = $$293100;
      } else {
       $$4 = 12;
       break L1;
      }
     }
    }
    $60 = (_mbtowc($4,$$091$be,-1)|0);
    $61 = ($60|0)<(1);
    $62 = HEAP8[$$091$be>>0]|0;
    if ($61) {
     $$lcssa110 = $62;
     label = 3;
     break L1;
    } else {
     $$091120 = $$091$be;$14 = $62;$43 = $60;
    }
   }
   if ((label|0) == 5) {
    $16 = ((($$091120)) + 1|0);
    $17 = ((($0)) + 12|0);
    HEAP32[$17>>2] = $16;
    $$4 = 0;
    break;
   }
   else if ((label|0) == 16) {
    $$4 = 4;
    break;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $11 = ($$lcssa110<<24>>24)!=(0);
  $12 = $11 ? 2 : 7;
  $$4 = $12;
 }
 STACKTOP = sp;return ($$4|0);
}
function _tre_compare_lit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 return ($6|0);
}
function _tre_new_lit($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre16 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 if ($5) {
  $$phi$trans$insert = ((($0)) + 4|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $14 = $2;$16 = $$pre;
  label = 6;
 } else {
  $6 = ($4|0)>(32767);
  if ($6) {
   $$0 = 0;
  } else {
   $7 = $4 << 1;
   HEAP32[$3>>2] = $7;
   $8 = ((($0)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $4 << 3;
   $11 = (_realloc($9,$10)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$0 = 0;
   } else {
    HEAP32[$8>>2] = $11;
    $$pre16 = HEAP32[$1>>2]|0;
    $14 = $$pre16;$16 = $11;
    label = 6;
   }
  }
 }
 if ((label|0) == 6) {
  $13 = (($14) + 1)|0;
  HEAP32[$1>>2] = $13;
  $15 = (($16) + ($14<<2)|0);
  $17 = HEAP32[$0>>2]|0;
  $18 = (___tre_mem_alloc_impl($17,0,0,1,20)|0);
  HEAP32[$15>>2] = $18;
  $$0 = $18;
 }
 return ($$0|0);
}
function _add_icase_literals($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$be = 0, $$036 = 0, $$036$in = 0, $$039 = 0, $$040 = 0, $$042 = 0, $$1 = 0, $$1$in = 0, $$137 = 0, $$137$in = 0, $$2 = 0, $$2$in = 0, $$238 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)>($2|0);
 L1: do {
  if ($3) {
   $$040 = 0;
  } else {
   $$042 = $1;
   while(1) {
    $4 = (_iswlower($$042)|0);
    $5 = ($4|0)==(0);
    L4: do {
     if ($5) {
      $10 = (_iswupper($$042)|0);
      $11 = ($10|0)==(0);
      if ($11) {
       $16 = (($$042) + 1)|0;
       $$0$be = $16;
       break;
      }
      $12 = (_towlower($$042)|0);
      $$137$in = $12;$$2$in = $$042;
      while(1) {
       $$2 = (($$2$in) + 1)|0;
       $$137 = (($$137$in) + 1)|0;
       $13 = ($$2$in|0)<($2|0);
       if (!($13)) {
        $$039 = $12;$$238 = $$137;$$3 = $$2;
        label = 12;
        break L4;
       }
       $14 = (_towlower($$2)|0);
       $15 = ($14|0)==($$137|0);
       if ($15) {
        $$137$in = $$137;$$2$in = $$2;
       } else {
        $$039 = $12;$$238 = $$137;$$3 = $$2;
        label = 12;
        break;
       }
      }
     } else {
      $6 = (_towupper($$042)|0);
      $$036$in = $6;$$1$in = $$042;
      while(1) {
       $$1 = (($$1$in) + 1)|0;
       $$036 = (($$036$in) + 1)|0;
       $7 = ($$1$in|0)<($2|0);
       if (!($7)) {
        $$039 = $6;$$238 = $$036;$$3 = $$1;
        label = 12;
        break L4;
       }
       $8 = (_towupper($$1)|0);
       $9 = ($8|0)==($$036|0);
       if ($9) {
        $$036$in = $$036;$$1$in = $$1;
       } else {
        $$039 = $6;$$238 = $$036;$$3 = $$1;
        label = 12;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 12) {
     label = 0;
     $18 = (_tre_new_lit($0)|0);
     $19 = ($18|0)==(0|0);
     if ($19) {
      $$040 = -1;
      break L1;
     }
     HEAP32[$18>>2] = $$039;
     $20 = (($$238) + -1)|0;
     $21 = ((($18)) + 4|0);
     HEAP32[$21>>2] = $20;
     $22 = ((($18)) + 8|0);
     HEAP32[$22>>2] = -1;
     $$0$be = $$3;
    }
    $17 = ($$0$be|0)>($2|0);
    if ($17) {
     $$040 = 0;
     break;
    } else {
     $$042 = $$0$be;
    }
   }
  }
 } while(0);
 return ($$040|0);
}
function _regexec($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$026 = 0, $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 8;
 $11 = ($10|0)==(0);
 $$ = $11 ? $2 : 0;
 $12 = ((($7)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 $15 = ($$|0)!=(0);
 $or$cond = $14 & $15;
 if ($or$cond) {
  $16 = $13 << 2;
  $17 = (_malloc($16)|0);
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$027 = 12;
  } else {
   $$0 = $17;$28 = $17;
   label = 3;
  }
 } else {
  $$0 = 0;$28 = 0;
  label = 3;
 }
 if ((label|0) == 3) {
  $19 = ((($7)) + 60|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = (_tre_tnfa_run_parallel($7,$1,$$0,$4,$5)|0);
   $$026 = $23;
  } else {
   $22 = (_tre_tnfa_run_backtrack($7,$1,$$0,$4,$5)|0);
   $$026 = $22;
  }
  $24 = ($$026|0)==(0);
  if ($24) {
   $25 = HEAP32[$8>>2]|0;
   $26 = HEAP32[$5>>2]|0;
   _tre_fill_pmatch($$,$3,$25,$7,$$0,$26);
  }
  $27 = ($$0|0)==(0|0);
  if ($27) {
   $$027 = $$026;
  } else {
   _free($28);
   $$027 = $$026;
  }
 }
 STACKTOP = sp;return ($$027|0);
}
function _tre_tnfa_run_backtrack($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0450619672 = 0, $$0452615 = 0, $$0458 = 0, $$0463 = 0, $$0463$pn = 0, $$0467 = 0, $$0476 = 0, $$0477640 = 0, $$0479630 = 0, $$0481595 = 0, $$0482 = 0, $$0486591 = 0, $$0487586 = 0, $$0501 = 0, $$0503601 = 0, $$0505 = 0, $$0519598 = 0, $$0529$ph = 0, $$0531597 = 0;
 var $$0535 = 0, $$0611 = 0, $$11516 = 0, $$12517 = 0, $$13518 = 0, $$14 = 0, $$1459 = 0, $$1468 = 0, $$1480 = 0, $$1483 = 0, $$1502 = 0, $$1504627 = 0, $$1506599 = 0, $$1520 = 0, $$1530 = 0, $$1532 = 0, $$1536 = 0, $$2455 = 0, $$2465 = 0, $$2469 = 0;
 var $$2484 = 0, $$2521608 = 0, $$2533 = 0, $$3461 = 0, $$3466 = 0, $$3470 = 0, $$3485 = 0, $$3508 = 0, $$3522 = 0, $$3534 = 0, $$4462 = 0, $$4523 = 0, $$5472 = 0, $$5510 = 0, $$5524623 = 0, $$6473 = 0, $$6500 = 0, $$6511 = 0, $$6525 = 0, $$7474 = 0;
 var $$7512624 = 0, $$7526637 = 0, $$8475 = 0, $$8527 = 0, $$9514 = 0, $$9528 = 0, $$old = 0, $$old11 = 0, $$old37 = 0, $$old38 = 0, $$ph = 0, $$pr = 0, $$pr537 = 0, $$pr545 = 0, $$pr547 = 0, $$pre = 0, $$pre654 = 0, $$pre658 = 0, $$pre660 = 0, $$pre661 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge642 = 0, $brmerge645 = 0, $brmerge646 = 0, $not$ = 0, $or$cond$not = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond15 = 0, $or$cond18 = 0, $or$cond21 = 0, $or$cond24 = 0;
 var $or$cond27$not = 0, $or$cond30 = 0, $or$cond36 = 0, $or$cond39 = 0, $or$cond42 = 0, $or$cond45 = 0, $or$cond48 = 0, $or$cond51 = 0, $or$cond6 = 0, $or$cond644 = 0, $or$cond648 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = $3 & 1;
 $7 = $3 & 2;
 $8 = ((($0)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 4;
 $11 = (___tre_mem_new_impl(0,0)|0);
 $12 = ($11|0)==(0|0);
 L1: do {
  if ($12) {
   $$14 = 12;
  } else {
   $13 = (___tre_mem_alloc_impl($11,0,0,0,32)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    ___tre_mem_destroy($11);
    $$14 = 12;
    break;
   }
   $15 = ((($13)) + 24|0);
   HEAP32[$15>>2] = 0;
   $16 = ((($13)) + 28|0);
   HEAP32[$16>>2] = 0;
   $17 = ((($0)) + 40|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   if ($19) {
    $$0535 = 0;$134 = 0;
    label = 6;
   } else {
    $20 = $18 << 2;
    $21 = (_malloc($20)|0);
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$1502 = 0;$$1530 = 0;$$1536 = $21;$$6500 = 12;$447 = 0;$449 = 0;$451 = 0;
    } else {
     $$0535 = $21;$134 = $21;
     label = 6;
    }
   }
   L8: do {
    if ((label|0) == 6) {
     $23 = ((($0)) + 28|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0);
     if ($25) {
      $$0501 = 0;$136 = 0;
     } else {
      $26 = $24 << 3;
      $27 = (_malloc($26)|0);
      $28 = ($27|0)==(0|0);
      if ($28) {
       $$1502 = $27;$$1530 = 0;$$1536 = $$0535;$$6500 = 12;$447 = $134;$449 = 0;$451 = 0;
       break;
      } else {
       $$0501 = $27;$136 = $27;
      }
     }
     $29 = ((($0)) + 52|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(0);
     if ($31) {
      $$0529$ph = 0;$$ph = 0;
     } else {
      $32 = $30 << 2;
      $33 = (_malloc($32)|0);
      $34 = ($33|0)==(0|0);
      if ($34) {
       $$1502 = $$0501;$$1530 = $33;$$1536 = $$0535;$$6500 = 12;$447 = $134;$449 = $136;$451 = 0;
       break;
      } else {
       $$0529$ph = $33;$$ph = $33;
      }
     }
     $35 = ((($0)) + 8|0);
     $36 = ((($0)) + 12|0);
     $37 = ($2|0)==(0|0);
     $38 = ($2|0)!=(0|0);
     $39 = ((($0)) + 32|0);
     $40 = ($10|0)!=(0);
     $41 = ($6|0)==(0);
     $$0458 = $1;$$0467 = 1;$$0476 = -1;$$0482 = -1;$$0505 = $13;$64 = 0;
     L16: while(1) {
      $42 = HEAP32[$17>>2]|0;
      $43 = ($42|0)>(0);
      if ($43) {
       $$0487586 = 0;$452 = $42;
       while(1) {
        $47 = (($$0535) + ($$0487586<<2)|0);
        HEAP32[$47>>2] = -1;
        if ($37) {
         $51 = $452;
        } else {
         $48 = (($2) + ($$0487586<<2)|0);
         HEAP32[$48>>2] = -1;
         $$pre = HEAP32[$17>>2]|0;
         $51 = $$pre;
        }
        $49 = (($$0487586) + 1)|0;
        $50 = ($49|0)<($51|0);
        if ($50) {
         $$0487586 = $49;$452 = $51;
        } else {
         break;
        }
       }
      }
      $44 = HEAP32[$29>>2]|0;
      $45 = ($44|0)>(0);
      if ($45) {
       $46 = $44 << 2;
       _memset(($$ph|0),0,($46|0))|0;
      }
      $52 = (($$0467) + ($$0476))|0;
      $53 = (_mbtowc($5,$$0458,4)|0);
      $54 = ($53|0)<(1);
      if ($54) {
       $55 = ($53|0)<(0);
       if ($55) {
        $$1502 = $$0501;$$1530 = $$0529$ph;$$1536 = $$0535;$$6500 = 1;$447 = $134;$449 = $136;$451 = $$ph;
        break L8;
       } else {
        $$1468 = 1;
       }
      } else {
       $$1468 = $53;
      }
      $56 = (($$0458) + ($$1468)|0);
      $57 = HEAP32[$5>>2]|0;
      $58 = HEAP32[$35>>2]|0;
      $59 = ((($58)) + 8|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if ($61) {
       $$12517 = $$0505;$$2484 = $$0482;$$7474 = $$1468;$$8527 = 0;
       label = 171;
      } else {
       $62 = ($52|0)!=(0);
       $63 = ($64|0)==(95);
       $65 = ($52|0)==(0);
       $66 = ($52|0)<(1);
       $67 = ($64|0)==(10);
       $or$cond6 = $40 & $67;
       $or$cond$not = $66 & $41;
       $$0503601 = $58;$$0519598 = 0;$$0531597 = 0;$$1506599 = $$0505;$125 = $59;
       while(1) {
        $68 = ((($$0503601)) + 20|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==(0);
        L35: do {
         if ($70) {
          label = 49;
         } else {
          $71 = $69 & 1;
          $72 = ($71|0)==(0);
          $brmerge = $72 | $or$cond$not;
          $brmerge642 = $brmerge | $or$cond6;
          if ($brmerge642) {
           $73 = $69 & 2;
           $74 = ($73|0)==(0);
           if (!($74)) {
            $75 = HEAP32[$5>>2]|0;
            $76 = $75 | $7;
            $77 = ($76|0)==(0);
            $78 = ($75|0)==(10);
            $or$cond10 = $40 & $78;
            $or$cond644 = $77 | $or$cond10;
            if (!($or$cond644)) {
             $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
             break;
            }
           }
           $79 = $69 & 16;
           $80 = ($79|0)==(0);
           do {
            if (!($80)) {
             if ($63) {
              $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
              break L35;
             }
             $81 = (_iswalnum($64)|0);
             $82 = ($81|0)==(0);
             if (!($82)) {
              $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
              break L35;
             }
             $83 = HEAP32[$5>>2]|0;
             $84 = ($83|0)==(95);
             if ($84) {
              break;
             }
             $85 = (_iswalnum($83)|0);
             $86 = ($85|0)==(0);
             if ($86) {
              $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
              break L35;
             }
            }
           } while(0);
           $87 = HEAP32[$68>>2]|0;
           $88 = $87 & 32;
           $89 = ($88|0)==(0);
           if ($89) {
            $98 = $87;
           } else {
            if ($63) {
             $$old = HEAP32[$5>>2]|0;
             $$old11 = ($$old|0)==(95);
             if ($$old11) {
              $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
              break;
             } else {
              $94 = $$old;
             }
            } else {
             $90 = (_iswalnum($64)|0);
             $91 = ($90|0)==(0);
             $92 = HEAP32[$5>>2]|0;
             $93 = ($92|0)==(95);
             $or$cond12 = $91 | $93;
             if ($or$cond12) {
              $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
              break;
             } else {
              $94 = $92;
             }
            }
            $95 = (_iswalnum($94)|0);
            $96 = ($95|0)==(0);
            if (!($96)) {
             $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
             break;
            }
            $$pre654 = HEAP32[$68>>2]|0;
            $98 = $$pre654;
           }
           $97 = $98 & 64;
           $99 = ($97|0)!=(0);
           $or$cond15 = $62 & $99;
           $100 = HEAP32[$5>>2]|0;
           $101 = ($100|0)!=(0);
           $or$cond18 = $101 & $or$cond15;
           do {
            if ($or$cond18) {
             if ($63) {
              $105 = $100;$109 = 1;
             } else {
              $102 = (_iswalnum($64)|0);
              $103 = ($102|0)!=(0);
              $$pr = HEAP32[$5>>2]|0;
              $105 = $$pr;$109 = $103;
             }
             $104 = ($105|0)==(95);
             if ($104) {
              if ($109) {
               $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
               break L35;
              } else {
               break;
              }
             } else {
              $106 = (_iswalnum($105)|0);
              $107 = ($106|0)!=(0);
              $108 = $109 ^ $107;
              if ($108) {
               break;
              } else {
               $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
               break L35;
              }
             }
            }
           } while(0);
           $110 = HEAP32[$68>>2]|0;
           $111 = $110 & 128;
           $112 = ($111|0)==(0);
           if ($112) {
            label = 49;
            break;
           }
           $113 = HEAP32[$5>>2]|0;
           $114 = ($113|0)==(0);
           $or$cond21 = $65 | $114;
           if ($or$cond21) {
            $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
            break;
           }
           if ($63) {
            $118 = $113;$122 = 1;
           } else {
            $115 = (_iswalnum($64)|0);
            $116 = ($115|0)!=(0);
            $$pr537 = HEAP32[$5>>2]|0;
            $118 = $$pr537;$122 = $116;
           }
           $117 = ($118|0)==(95);
           if ($117) {
            if ($122) {
             label = 49;
             break;
            } else {
             $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
             break;
            }
           } else {
            $119 = (_iswalnum($118)|0);
            $120 = ($119|0)!=(0);
            $121 = $122 ^ $120;
            if ($121) {
             $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
             break;
            } else {
             label = 49;
             break;
            }
           }
          } else {
           $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$1506599;
          }
         }
        } while(0);
        do {
         if ((label|0) == 49) {
          label = 0;
          $123 = ($$0531597|0)==(0|0);
          if ($123) {
           $124 = HEAP32[$125>>2]|0;
           $126 = ((($$0503601)) + 16|0);
           $127 = HEAP32[$126>>2]|0;
           $$1520 = $127;$$1532 = $124;$$5510 = $$1506599;
           break;
          }
          $128 = ((($$1506599)) + 28|0);
          $129 = HEAP32[$128>>2]|0;
          $130 = ($129|0)==(0|0);
          if ($130) {
           $131 = (___tre_mem_alloc_impl($11,0,0,0,32)|0);
           $132 = ($131|0)==(0|0);
           if ($132) {
            label = 53;
            break L16;
           }
           $138 = ((($131)) + 24|0);
           HEAP32[$138>>2] = $$1506599;
           $139 = ((($131)) + 28|0);
           HEAP32[$139>>2] = 0;
           $140 = HEAP32[$17>>2]|0;
           $141 = $140 << 2;
           $142 = (___tre_mem_alloc_impl($11,0,0,0,$141)|0);
           $143 = ((($131)) + 20|0);
           HEAP32[$143>>2] = $142;
           $144 = ($142|0)==(0|0);
           if ($144) {
            label = 60;
            break L16;
           }
           HEAP32[$128>>2] = $131;
           $$3508 = $131;
          } else {
           $$3508 = $129;
          }
          HEAP32[$$3508>>2] = $52;
          $148 = ((($$3508)) + 4|0);
          HEAP32[$148>>2] = $56;
          $149 = HEAP32[$125>>2]|0;
          $150 = ((($$3508)) + 8|0);
          HEAP32[$150>>2] = $149;
          $151 = ((($$0503601)) + 12|0);
          $152 = HEAP32[$151>>2]|0;
          $153 = ((($$3508)) + 12|0);
          HEAP32[$153>>2] = $152;
          $154 = HEAP32[$5>>2]|0;
          $155 = ((($$3508)) + 16|0);
          HEAP32[$155>>2] = $154;
          $156 = HEAP32[$17>>2]|0;
          $157 = ($156|0)>(0);
          if ($157) {
           $158 = ((($$3508)) + 20|0);
           $159 = HEAP32[$158>>2]|0;
           $$0486591 = 0;
           while(1) {
            $160 = (($$0535) + ($$0486591<<2)|0);
            $161 = HEAP32[$160>>2]|0;
            $162 = (($159) + ($$0486591<<2)|0);
            HEAP32[$162>>2] = $161;
            $163 = (($$0486591) + 1)|0;
            $164 = HEAP32[$17>>2]|0;
            $165 = ($163|0)<($164|0);
            if ($165) {
             $$0486591 = $163;
            } else {
             break;
            }
           }
          }
          $166 = ((($$0503601)) + 16|0);
          $167 = HEAP32[$166>>2]|0;
          $168 = ($167|0)==(0|0);
          if ($168) {
           $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$3508;
          } else {
           $169 = HEAP32[$167>>2]|0;
           $170 = ($169|0)>(-1);
           if (!($170)) {
            $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$3508;
            break;
           }
           $171 = ((($$3508)) + 20|0);
           $172 = HEAP32[$171>>2]|0;
           $$0481595 = $167;$175 = $169;
           while(1) {
            $173 = ((($$0481595)) + 4|0);
            $174 = (($172) + ($175<<2)|0);
            HEAP32[$174>>2] = $52;
            $176 = HEAP32[$173>>2]|0;
            $177 = ($176|0)>(-1);
            if ($177) {
             $$0481595 = $173;$175 = $176;
            } else {
             $$1520 = $$0519598;$$1532 = $$0531597;$$5510 = $$3508;
             break;
            }
           }
          }
         }
        } while(0);
        $178 = ((($$0503601)) + 32|0);
        $179 = ((($$0503601)) + 40|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if ($181) {
         break;
        } else {
         $$0503601 = $178;$$0519598 = $$1520;$$0531597 = $$1532;$$1506599 = $$5510;$125 = $179;
        }
       }
       $182 = ($$1520|0)==(0|0);
       if ($182) {
        $$3522 = 0;
       } else {
        $183 = HEAP32[$$1520>>2]|0;
        $184 = ($183|0)>(-1);
        if ($184) {
         $$2521608 = $$1520;$186 = $183;
         while(1) {
          $185 = (($$0535) + ($186<<2)|0);
          HEAP32[$185>>2] = $52;
          $187 = ((($$2521608)) + 4|0);
          $188 = HEAP32[$187>>2]|0;
          $189 = ($188|0)>(-1);
          if ($189) {
           $$2521608 = $187;$186 = $188;
          } else {
           $$3522 = $187;
           break;
          }
         }
        } else {
         $$3522 = $$1520;
        }
       }
       $190 = ($$1532|0)==(0|0);
       if ($190) {
        $$12517 = $$5510;$$2484 = $$0482;$$7474 = $$1468;$$8527 = $$3522;
        label = 171;
       } else {
        $$0463 = $52;$$1459 = $56;$$1483 = $$0482;$$2469 = $$1468;$$2533 = $$1532;$$4523 = $$3522;$$6511 = $$5510;
        label = 79;
       }
      }
      L98: while(1) {
       if ((label|0) == 79) {
        label = 0;
        $191 = HEAP32[$36>>2]|0;
        $192 = ($$2533|0)==($191|0);
        if ($192) {
         $193 = ($$1483|0)<($$0463|0);
         if ($193) {
          if ($37) {
           $$12517 = $$6511;$$2484 = $$0463;$$7474 = $$2469;$$8527 = $$4523;
           label = 171;
           continue;
          }
          $$pre661 = HEAP32[$17>>2]|0;
          $200 = $$pre661;
         } else {
          $194 = ($$1483|0)==($$0463|0);
          $or$cond24 = $38 & $194;
          if (!($or$cond24)) {
           $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$2469;$$8527 = $$4523;
           label = 171;
           continue;
          }
          $195 = HEAP32[$17>>2]|0;
          $196 = HEAP32[$39>>2]|0;
          $197 = (_tre_tag_order($195,$196,$$0535,$2)|0);
          $198 = ($197|0)==(0);
          if ($198) {
           $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$2469;$$8527 = $$4523;
           label = 171;
           continue;
          } else {
           $200 = $195;
          }
         }
         $199 = ($200|0)>(0);
         if ($199) {
          $$0477640 = 0;
         } else {
          $$12517 = $$6511;$$2484 = $$0463;$$7474 = $$2469;$$8527 = $$4523;
          label = 171;
          continue;
         }
         while(1) {
          $201 = (($$0535) + ($$0477640<<2)|0);
          $202 = HEAP32[$201>>2]|0;
          $203 = (($2) + ($$0477640<<2)|0);
          HEAP32[$203>>2] = $202;
          $204 = (($$0477640) + 1)|0;
          $205 = HEAP32[$17>>2]|0;
          $206 = ($204|0)<($205|0);
          if ($206) {
           $$0477640 = $204;
          } else {
           $$12517 = $$6511;$$2484 = $$0463;$$7474 = $$2469;$$8527 = $$4523;
           label = 171;
           continue L98;
          }
         }
        }
        $207 = ((($$2533)) + 8|0);
        $208 = HEAP32[$207>>2]|0;
        $209 = ($208|0)==(0|0);
        if ($209) {
         label = 95;
        } else {
         $210 = ((($$2533)) + 20|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = $211 & 256;
         $213 = ($212|0)==(0);
         if ($213) {
          label = 95;
         } else {
          $214 = ((($$2533)) + 24|0);
          $215 = HEAP32[$214>>2]|0;
          $216 = (($215) + 1)|0;
          $217 = HEAP32[$8>>2]|0;
          $218 = $217 & -9;
          _tre_fill_pmatch($216,$$0501,$218,$0,$$0535,$$0463);
          $219 = (($$0501) + ($215<<3)|0);
          $220 = HEAP32[$219>>2]|0;
          $221 = (((($$0501) + ($215<<3)|0)) + 4|0);
          $222 = HEAP32[$221>>2]|0;
          $223 = (($222) - ($220))|0;
          $224 = (($1) + ($220)|0);
          $225 = ((($$1459)) + -1|0);
          $226 = (_strncmp($224,$225,$223)|0);
          $227 = ($226|0)==(0);
          if (!($227)) {
           $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$2469;$$8527 = $$4523;
           label = 171;
           continue;
          }
          $228 = ($223|0)==(0);
          $$ = $228&1;
          $229 = ((($$2533)) + 12|0);
          $230 = HEAP32[$229>>2]|0;
          if ($228) {
           $231 = (($$0529$ph) + ($230<<2)|0);
           $232 = HEAP32[$231>>2]|0;
           $233 = ($232|0)==(0);
           if (!($233)) {
            $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$2469;$$8527 = $$4523;
            label = 171;
            continue;
           }
          }
          $234 = (($$0529$ph) + ($230<<2)|0);
          HEAP32[$234>>2] = $$;
          $235 = (($223) + -1)|0;
          $236 = (($$1459) + ($235)|0);
          $237 = (($235) + ($$0463))|0;
          $238 = HEAP32[$5>>2]|0;
          $239 = (_mbtowc($5,$236,4)|0);
          $240 = ($239|0)<(1);
          if ($240) {
           $241 = ($239|0)<(0);
           if ($241) {
            $$1502 = $$0501;$$1530 = $$0529$ph;$$1536 = $$0535;$$6500 = 1;$447 = $134;$449 = $136;$451 = $$ph;
            break L8;
           } else {
            $$3470 = 1;
           }
          } else {
           $$3470 = $239;
          }
          $242 = (($236) + ($$3470)|0);
          $$0463$pn = $237;$$2455 = $238;$$3461 = $242;$$6473 = $$3470;
         }
        }
        if ((label|0) == 95) {
         label = 0;
         $243 = HEAP32[$5>>2]|0;
         $244 = ($243|0)==(0);
         if ($244) {
          $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$2469;$$8527 = $$4523;
          label = 171;
          continue;
         }
         $245 = (_mbtowc($5,$$1459,4)|0);
         $246 = ($245|0)<(1);
         if ($246) {
          $247 = ($245|0)<(0);
          if ($247) {
           $$1502 = $$0501;$$1530 = $$0529$ph;$$1536 = $$0535;$$6500 = 1;$447 = $134;$449 = $136;$451 = $$ph;
           break L8;
          } else {
           $$5472 = 1;
          }
         } else {
          $$5472 = $245;
         }
         $248 = (($$1459) + ($$5472)|0);
         $$0463$pn = $$0463;$$2455 = $243;$$3461 = $248;$$6473 = $$5472;
        }
        $$2465 = (($$0463$pn) + ($$2469))|0;
        $249 = HEAP32[$207>>2]|0;
        $250 = ($249|0)==(0|0);
        if ($250) {
         $$12517 = $$6511;$$2484 = $$1483;$$7474 = $$6473;$$8527 = $$4523;
         label = 171;
         continue;
        }
        $251 = ($$2465|0)!=(0);
        $252 = ($$2455|0)==(95);
        $253 = ($$2465|0)==(0);
        $254 = ($$2465|0)<(1);
        $255 = ($$2455|0)==(10);
        $or$cond30 = $40 & $255;
        $or$cond27$not = $254 & $41;
        $$0479630 = 0;$$1504627 = $$2533;$$5524623 = $$4523;$$7512624 = $$6511;$352 = $207;
        while(1) {
         $256 = HEAP32[$$1504627>>2]|0;
         $257 = ($256>>>0)>($$2455>>>0);
         L140: do {
          if ($257) {
           $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
          } else {
           $258 = ((($$1504627)) + 4|0);
           $259 = HEAP32[$258>>2]|0;
           $260 = ($259>>>0)<($$2455>>>0);
           if ($260) {
            $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
            break;
           }
           $261 = ((($$1504627)) + 20|0);
           $262 = HEAP32[$261>>2]|0;
           $263 = ($262|0)==(0);
           do {
            if (!($263)) {
             $264 = $262 & 1;
             $265 = ($264|0)==(0);
             $brmerge645 = $265 | $or$cond27$not;
             $brmerge646 = $brmerge645 | $or$cond30;
             if (!($brmerge646)) {
              $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
              break L140;
             }
             $266 = $262 & 2;
             $267 = ($266|0)==(0);
             if (!($267)) {
              $268 = HEAP32[$5>>2]|0;
              $269 = $268 | $7;
              $270 = ($269|0)==(0);
              $271 = ($268|0)==(10);
              $or$cond36 = $40 & $271;
              $or$cond648 = $270 | $or$cond36;
              if (!($or$cond648)) {
               $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
               break L140;
              }
             }
             $272 = $262 & 16;
             $273 = ($272|0)==(0);
             do {
              if (!($273)) {
               if ($252) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
               $274 = (_iswalnum($$2455)|0);
               $275 = ($274|0)==(0);
               if (!($275)) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
               $276 = HEAP32[$5>>2]|0;
               $277 = ($276|0)==(95);
               if ($277) {
                break;
               }
               $278 = (_iswalnum($276)|0);
               $279 = ($278|0)==(0);
               if ($279) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
              }
             } while(0);
             $280 = HEAP32[$261>>2]|0;
             $281 = $280 & 32;
             $282 = ($281|0)==(0);
             if ($282) {
              $291 = $280;
             } else {
              if ($252) {
               $$old37 = HEAP32[$5>>2]|0;
               $$old38 = ($$old37|0)==(95);
               if ($$old38) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               } else {
                $287 = $$old37;
               }
              } else {
               $283 = (_iswalnum($$2455)|0);
               $284 = ($283|0)==(0);
               $285 = HEAP32[$5>>2]|0;
               $286 = ($285|0)==(95);
               $or$cond39 = $284 | $286;
               if ($or$cond39) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               } else {
                $287 = $285;
               }
              }
              $288 = (_iswalnum($287)|0);
              $289 = ($288|0)==(0);
              if (!($289)) {
               $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
               break L140;
              }
              $$pre658 = HEAP32[$261>>2]|0;
              $291 = $$pre658;
             }
             $290 = $291 & 64;
             $292 = ($290|0)!=(0);
             $or$cond42 = $251 & $292;
             $293 = HEAP32[$5>>2]|0;
             $294 = ($293|0)!=(0);
             $or$cond45 = $294 & $or$cond42;
             do {
              if ($or$cond45) {
               if ($252) {
                $298 = $293;$302 = 1;
               } else {
                $295 = (_iswalnum($$2455)|0);
                $296 = ($295|0)!=(0);
                $$pr545 = HEAP32[$5>>2]|0;
                $298 = $$pr545;$302 = $296;
               }
               $297 = ($298|0)==(95);
               if ($297) {
                if ($302) {
                 $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                 break L140;
                } else {
                 break;
                }
               } else {
                $299 = (_iswalnum($298)|0);
                $300 = ($299|0)!=(0);
                $301 = $302 ^ $300;
                if ($301) {
                 break;
                } else {
                 $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                 break L140;
                }
               }
              }
             } while(0);
             $303 = HEAP32[$261>>2]|0;
             $304 = $303 & 128;
             $305 = ($304|0)==(0);
             do {
              if (!($305)) {
               $306 = HEAP32[$5>>2]|0;
               $307 = ($306|0)==(0);
               $or$cond48 = $253 | $307;
               if ($or$cond48) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
               if ($252) {
                $311 = $306;$315 = 1;
               } else {
                $308 = (_iswalnum($$2455)|0);
                $309 = ($308|0)!=(0);
                $$pr547 = HEAP32[$5>>2]|0;
                $311 = $$pr547;$315 = $309;
               }
               $310 = ($311|0)==(95);
               if ($310) {
                if ($315) {
                 break;
                } else {
                 $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                 break L140;
                }
               } else {
                $312 = (_iswalnum($311)|0);
                $313 = ($312|0)!=(0);
                $314 = $315 ^ $313;
                if ($314) {
                 $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                 break L140;
                } else {
                 break;
                }
               }
              }
             } while(0);
             $316 = HEAP32[$261>>2]|0;
             $317 = $316 & 4;
             $318 = ($317|0)==(0);
             do {
              if ($318) {
               $327 = $316;
              } else {
               $319 = HEAP32[$8>>2]|0;
               $320 = $319 & 2;
               $321 = ($320|0)==(0);
               if (!($321)) {
                $327 = $316;
                break;
               }
               $322 = ((($$1504627)) + 24|0);
               $323 = HEAP32[$322>>2]|0;
               $324 = (_iswctype($$2455,$323)|0);
               $325 = ($324|0)==(0);
               if ($325) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
               $$pre660 = HEAP32[$261>>2]|0;
               $327 = $$pre660;
              }
             } while(0);
             $326 = $327 & 4;
             $328 = ($326|0)==(0);
             do {
              if (!($328)) {
               $329 = HEAP32[$8>>2]|0;
               $330 = $329 & 2;
               $331 = ($330|0)==(0);
               if ($331) {
                break;
               }
               $332 = (_towlower($$2455)|0);
               $333 = ((($$1504627)) + 24|0);
               $334 = HEAP32[$333>>2]|0;
               $335 = (_iswctype($332,$334)|0);
               $336 = ($335|0)==(0);
               if (!($336)) {
                break;
               }
               $337 = (_towupper($$2455)|0);
               $338 = HEAP32[$333>>2]|0;
               $339 = (_iswctype($337,$338)|0);
               $340 = ($339|0)==(0);
               if ($340) {
                $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
                break L140;
               }
              }
             } while(0);
             $341 = HEAP32[$261>>2]|0;
             $342 = $341 & 8;
             $343 = ($342|0)==(0);
             if ($343) {
              break;
             }
             $344 = ((($$1504627)) + 28|0);
             $345 = HEAP32[$344>>2]|0;
             $346 = HEAP32[$8>>2]|0;
             $347 = $346 & 2;
             $348 = (_tre_neg_char_classes_match($345,$$2455,$347)|0);
             $349 = ($348|0)==(0);
             if (!($349)) {
              $$11516 = $$7512624;$$1480 = $$0479630;$$6525 = $$5524623;
              break L140;
             }
            }
           } while(0);
           $350 = ($$0479630|0)==(0|0);
           if ($350) {
            $351 = HEAP32[$352>>2]|0;
            $353 = ((($$1504627)) + 16|0);
            $354 = HEAP32[$353>>2]|0;
            $$11516 = $$7512624;$$1480 = $351;$$6525 = $354;
            break;
           }
           $355 = ((($$7512624)) + 28|0);
           $356 = HEAP32[$355>>2]|0;
           $357 = ($356|0)==(0|0);
           if ($357) {
            $358 = (___tre_mem_alloc_impl($11,0,0,0,32)|0);
            $359 = ($358|0)==(0|0);
            if ($359) {
             label = 145;
             break L16;
            }
            $363 = ((($358)) + 24|0);
            HEAP32[$363>>2] = $$7512624;
            $364 = ((($358)) + 28|0);
            HEAP32[$364>>2] = 0;
            $365 = HEAP32[$17>>2]|0;
            $366 = $365 << 2;
            $367 = (___tre_mem_alloc_impl($11,0,0,0,$366)|0);
            $368 = ((($358)) + 20|0);
            HEAP32[$368>>2] = $367;
            $369 = ($367|0)==(0|0);
            if ($369) {
             label = 152;
             break L16;
            }
            HEAP32[$355>>2] = $358;
            $$9514 = $358;
           } else {
            $$9514 = $356;
           }
           HEAP32[$$9514>>2] = $$2465;
           $373 = ((($$9514)) + 4|0);
           HEAP32[$373>>2] = $$3461;
           $374 = HEAP32[$352>>2]|0;
           $375 = ((($$9514)) + 8|0);
           HEAP32[$375>>2] = $374;
           $376 = ((($$1504627)) + 12|0);
           $377 = HEAP32[$376>>2]|0;
           $378 = ((($$9514)) + 12|0);
           HEAP32[$378>>2] = $377;
           $379 = HEAP32[$5>>2]|0;
           $380 = ((($$9514)) + 16|0);
           HEAP32[$380>>2] = $379;
           $381 = HEAP32[$17>>2]|0;
           $382 = ($381|0)>(0);
           if ($382) {
            $383 = ((($$9514)) + 20|0);
            $384 = HEAP32[$383>>2]|0;
            $$0452615 = 0;
            while(1) {
             $385 = (($$0535) + ($$0452615<<2)|0);
             $386 = HEAP32[$385>>2]|0;
             $387 = (($384) + ($$0452615<<2)|0);
             HEAP32[$387>>2] = $386;
             $388 = (($$0452615) + 1)|0;
             $389 = HEAP32[$17>>2]|0;
             $390 = ($388|0)<($389|0);
             if ($390) {
              $$0452615 = $388;
             } else {
              break;
             }
            }
           }
           $391 = ((($$1504627)) + 16|0);
           $392 = HEAP32[$391>>2]|0;
           $393 = ($392|0)==(0|0);
           if ($393) {
            $$11516 = $$9514;$$1480 = $$0479630;$$6525 = $$5524623;
            break;
           }
           $394 = ((($$9514)) + 20|0);
           $395 = HEAP32[$392>>2]|0;
           $396 = ($395|0)>(-1);
           if (!($396)) {
            $$11516 = $$9514;$$1480 = $$0479630;$$6525 = $$5524623;
            break;
           }
           $397 = HEAP32[$394>>2]|0;
           $$0450619672 = $392;$399 = $395;
           while(1) {
            $398 = (($397) + ($399<<2)|0);
            HEAP32[$398>>2] = $$2465;
            $400 = ((($$0450619672)) + 4|0);
            $401 = HEAP32[$400>>2]|0;
            $402 = ($401|0)>(-1);
            if ($402) {
             $$0450619672 = $400;$399 = $401;
            } else {
             $$11516 = $$9514;$$1480 = $$0479630;$$6525 = $$5524623;
             break;
            }
           }
          }
         } while(0);
         $403 = ((($$1504627)) + 32|0);
         $404 = ((($$1504627)) + 40|0);
         $405 = HEAP32[$404>>2]|0;
         $406 = ($405|0)==(0|0);
         if ($406) {
          break;
         } else {
          $$0479630 = $$1480;$$1504627 = $403;$$5524623 = $$6525;$$7512624 = $$11516;$352 = $404;
         }
        }
        $407 = ($$1480|0)==(0|0);
        if ($407) {
         $$12517 = $$11516;$$2484 = $$1483;$$7474 = $$6473;$$8527 = $$6525;
         label = 171;
         continue;
        }
        $408 = ($$6525|0)==(0|0);
        if ($408) {
         $$13518 = $$11516;$$3466 = $$2465;$$3485 = $$1483;$$3534 = $$1480;$$4462 = $$3461;$$8475 = $$6473;$$9528 = 0;
        } else {
         $409 = HEAP32[$$6525>>2]|0;
         $410 = ($409|0)>(-1);
         if ($410) {
          $$7526637 = $$6525;$413 = $409;
          while(1) {
           $411 = ((($$7526637)) + 4|0);
           $412 = (($$0535) + ($413<<2)|0);
           HEAP32[$412>>2] = $$2465;
           $414 = HEAP32[$411>>2]|0;
           $415 = ($414|0)>(-1);
           if ($415) {
            $$7526637 = $411;$413 = $414;
           } else {
            $$13518 = $$11516;$$3466 = $$2465;$$3485 = $$1483;$$3534 = $$1480;$$4462 = $$3461;$$8475 = $$6473;$$9528 = $411;
            break;
           }
          }
         } else {
          $$13518 = $$11516;$$3466 = $$2465;$$3485 = $$1483;$$3534 = $$1480;$$4462 = $$3461;$$8475 = $$6473;$$9528 = $$6525;
         }
        }
       }
       else if ((label|0) == 171) {
        label = 0;
        $416 = ((($$12517)) + 24|0);
        $417 = HEAP32[$416>>2]|0;
        $418 = ($417|0)==(0|0);
        if ($418) {
         break;
        }
        $419 = ((($$12517)) + 8|0);
        $420 = HEAP32[$419>>2]|0;
        $421 = ((($420)) + 20|0);
        $422 = HEAP32[$421>>2]|0;
        $423 = $422 & 256;
        $424 = ($423|0)==(0);
        if (!($424)) {
         $425 = ((($$12517)) + 12|0);
         $426 = HEAP32[$425>>2]|0;
         $427 = (($$0529$ph) + ($426<<2)|0);
         HEAP32[$427>>2] = 0;
        }
        $428 = HEAP32[$$12517>>2]|0;
        $429 = ((($$12517)) + 4|0);
        $430 = HEAP32[$429>>2]|0;
        $431 = ((($$12517)) + 16|0);
        $432 = HEAP32[$431>>2]|0;
        HEAP32[$5>>2] = $432;
        $433 = HEAP32[$17>>2]|0;
        $434 = ($433|0)>(0);
        if ($434) {
         $435 = ((($$12517)) + 20|0);
         $436 = HEAP32[$435>>2]|0;
         $$0611 = 0;
         while(1) {
          $437 = (($436) + ($$0611<<2)|0);
          $438 = HEAP32[$437>>2]|0;
          $439 = (($$0535) + ($$0611<<2)|0);
          HEAP32[$439>>2] = $438;
          $440 = (($$0611) + 1)|0;
          $441 = ($440|0)<($433|0);
          if ($441) {
           $$0611 = $440;
          } else {
           $$13518 = $417;$$3466 = $428;$$3485 = $$2484;$$3534 = $420;$$4462 = $430;$$8475 = $$7474;$$9528 = $$8527;
           break;
          }
         }
        } else {
         $$13518 = $417;$$3466 = $428;$$3485 = $$2484;$$3534 = $420;$$4462 = $430;$$8475 = $$7474;$$9528 = $$8527;
        }
       }
       $$0463 = $$3466;$$1459 = $$4462;$$1483 = $$3485;$$2469 = $$8475;$$2533 = $$3534;$$4523 = $$9528;$$6511 = $$13518;
       label = 79;
      }
      $442 = ($$2484|0)>(-1);
      $443 = HEAP32[$5>>2]|0;
      $444 = ($443|0)==(0);
      $or$cond51 = $442 | $444;
      if ($or$cond51) {
       label = 180;
       break;
      }
      HEAP32[$5>>2] = $57;
      $$0458 = $56;$$0467 = $$7474;$$0476 = $52;$$0482 = $$2484;$$0505 = $$12517;$64 = $57;
     }
     if ((label|0) == 53) {
      ___tre_mem_destroy($11);
      $133 = ($$0535|0)==(0|0);
      if (!($133)) {
       _free($134);
      }
      $135 = ($$0501|0)==(0|0);
      if (!($135)) {
       _free($136);
      }
      $137 = ($$0529$ph|0)==(0|0);
      if ($137) {
       $$14 = 12;
       break L1;
      }
      _free($$ph);
      $$14 = 12;
      break L1;
     }
     else if ((label|0) == 60) {
      ___tre_mem_destroy($11);
      $145 = ($$0535|0)==(0|0);
      if (!($145)) {
       _free($134);
      }
      $146 = ($$0501|0)==(0|0);
      if (!($146)) {
       _free($136);
      }
      $147 = ($$0529$ph|0)==(0|0);
      if ($147) {
       $$14 = 12;
       break L1;
      }
      _free($$ph);
      $$14 = 12;
      break L1;
     }
     else if ((label|0) == 145) {
      ___tre_mem_destroy($11);
      $360 = ($$0535|0)==(0|0);
      if (!($360)) {
       _free($134);
      }
      $361 = ($$0501|0)==(0|0);
      if (!($361)) {
       _free($136);
      }
      $362 = ($$0529$ph|0)==(0|0);
      if ($362) {
       $$14 = 12;
       break L1;
      }
      _free($$ph);
      $$14 = 12;
      break L1;
     }
     else if ((label|0) == 152) {
      ___tre_mem_destroy($11);
      $370 = ($$0535|0)==(0|0);
      if (!($370)) {
       _free($134);
      }
      $371 = ($$0501|0)==(0|0);
      if (!($371)) {
       _free($136);
      }
      $372 = ($$0529$ph|0)==(0|0);
      if ($372) {
       $$14 = 12;
       break L1;
      }
      _free($$ph);
      $$14 = 12;
      break L1;
     }
     else if ((label|0) == 180) {
      $not$ = $442 ^ 1;
      $445 = $not$&1;
      HEAP32[$4>>2] = $$2484;
      $$1502 = $$0501;$$1530 = $$0529$ph;$$1536 = $$0535;$$6500 = $445;$447 = $134;$449 = $136;$451 = $$ph;
      break;
     }
    }
   } while(0);
   ___tre_mem_destroy($11);
   $446 = ($$1536|0)==(0|0);
   if (!($446)) {
    _free($447);
   }
   $448 = ($$1502|0)==(0|0);
   if (!($448)) {
    _free($449);
   }
   $450 = ($$1530|0)==(0|0);
   if ($450) {
    $$14 = $$6500;
   } else {
    _free($451);
    $$14 = $$6500;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$14|0);
}
function _tre_tnfa_run_parallel($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0415 = 0, $$0420587 = 0, $$0421 = 0, $$0422 = 0, $$0423 = 0, $$0426 = 0, $$0427$ph533 = 0, $$0427511 = 0, $$0432 = 0, $$0437 = 0, $$0448586 = 0, $$0456 = 0, $$0457523 = 0, $$0460 = 0, $$0468540 = 0, $$1 = 0, $$10 = 0, $$10447 = 0, $$10447$lobit = 0;
 var $$1424 = 0, $$1428565 = 0, $$1430 = 0, $$1433$ph$lcssa = 0, $$1433$ph531 = 0, $$1433$ph532$mux = 0, $$1438$ph$lcssa = 0, $$1438$ph529 = 0, $$1438$ph530$mux = 0, $$1449584 = 0, $$1458549 = 0, $$1461$ph$lcssa = 0, $$1461$ph527 = 0, $$1469574 = 0, $$1471 = 0, $$1474 = 0, $$2425 = 0, $$2431$lcssa = 0, $$2431578 = 0, $$2434 = 0;
 var $$2439 = 0, $$2462 = 0, $$2472 = 0, $$2475 = 0, $$3$lcssa = 0, $$3435 = 0, $$3440 = 0, $$3451525 = 0, $$3463$lcssa = 0, $$3463542 = 0, $$4 = 0, $$4436 = 0, $$4441 = 0, $$4452537 = 0, $$4464 = 0, $$476 = 0, $$5 = 0, $$5442$lcssa = 0, $$5442576 = 0, $$5453546 = 0;
 var $$5465$lcssa = 0, $$5465575 = 0, $$6$lcssa = 0, $$6443$lcssa = 0, $$6443556 = 0, $$6454553 = 0, $$6466$lcssa = 0, $$6466555 = 0, $$6577 = 0, $$7$lcssa = 0, $$7444 = 0, $$7455551 = 0, $$7467 = 0, $$7559 = 0, $$8 = 0, $$9446 = 0, $$old = 0, $$old34 = 0, $$old35 = 0, $$old46 = 0;
 var $$old47 = 0, $$old8 = 0, $$pr = 0, $$pr481 = 0, $$pr485 = 0, $$pr487 = 0, $$pre = 0, $$pre$phi624Z2D = 0, $$pre$phi626Z2D = 0, $$pre618 = 0, $$pre620 = 0, $$pre622 = 0, $$pre625 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge590 = 0, $brmerge593 = 0, $brmerge594 = 0, $brmerge598 = 0, $exitcond = 0, $exitcond613 = 0, $exitcond615 = 0, $or$cond$not = 0, $or$cond12 = 0, $or$cond15 = 0, $or$cond18 = 0;
 var $or$cond21 = 0, $or$cond24$not = 0, $or$cond27 = 0, $or$cond3 = 0, $or$cond33 = 0, $or$cond36 = 0, $or$cond39 = 0, $or$cond42 = 0, $or$cond45 = 0, $or$cond48 = 0, $or$cond592 = 0, $or$cond596 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = $3 & 1;
 $7 = $3 & 2;
 $8 = ((($0)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 4;
 $11 = ($2|0)==(0|0);
 if ($11) {
  $$0456 = 0;
 } else {
  $12 = ((($0)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $$0456 = $13;
 }
 $14 = $$0456 << 2;
 $15 = ((($0)) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 << 3;
 $18 = (($17) + 8)|0;
 $19 = Math_imul($14, $16)|0;
 $20 = (($18) + ($19))|0;
 $21 = $20 << 1;
 $22 = (($14) + 12)|0;
 $23 = (($22) + ($17))|0;
 $24 = (($23) + ($21))|0;
 $25 = (_malloc($24)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  $$1 = 12;
 } else {
  (_memset(($25|0),0,($24|0))|0);
  $27 = (($25) + ($14)|0);
  $28 = $27;
  $29 = $28 & 3;
  $30 = ($29|0)==(0);
  $31 = (4 - ($29))|0;
  $$ = $30 ? 0 : $31;
  $32 = (($27) + ($$)|0);
  $33 = (($32) + ($18)|0);
  $34 = $33;
  $35 = $34 & 3;
  $36 = ($35|0)==(0);
  $37 = (4 - ($35))|0;
  $38 = $36 ? 0 : $37;
  $39 = (($33) + ($38)|0);
  $40 = (($39) + ($18)|0);
  $41 = $40;
  $42 = $41 & 3;
  $43 = ($42|0)==(0);
  $44 = (4 - ($42))|0;
  $$476 = $43 ? 0 : $44;
  $45 = (($40) + ($$476)|0);
  $46 = (($45) + ($17)|0);
  $47 = $46;
  $48 = $47 & 3;
  $49 = HEAP32[$15>>2]|0;
  $50 = ($49|0)>(0);
  if ($50) {
   $51 = ($48|0)==(0);
   $52 = (4 - ($48))|0;
   $53 = $51 ? 0 : $52;
   $54 = (($46) + ($53)|0);
   $$0420587 = $54;$$0448586 = 0;
   while(1) {
    $55 = (((($39) + ($$0448586<<3)|0)) + 4|0);
    HEAP32[$55>>2] = $$0420587;
    $56 = (($$0420587) + ($14)|0);
    $57 = (((($32) + ($$0448586<<3)|0)) + 4|0);
    HEAP32[$57>>2] = $56;
    $58 = (($56) + ($14)|0);
    $59 = (($$0448586) + 1)|0;
    $60 = ($59|0)<($49|0);
    if ($60) {
     $$0420587 = $58;$$0448586 = $59;
    } else {
     break;
    }
   }
   if ($50) {
    $$1449584 = 0;
    while(1) {
     $61 = (($45) + ($$1449584<<3)|0);
     HEAP32[$61>>2] = -1;
     $62 = (($$1449584) + 1)|0;
     $63 = ($62|0)<($49|0);
     if ($63) {
      $$1449584 = $62;
     } else {
      break;
     }
    }
   }
  }
  $64 = (_mbtowc($5,$1,4)|0);
  $65 = ($64|0)<(1);
  if ($65) {
   $66 = ($64|0)<(0);
   if ($66) {
    $$0426 = 1;
   } else {
    $$0423 = 1;
    label = 11;
   }
  } else {
   $$0423 = $64;
   label = 11;
  }
  L16: do {
   if ((label|0) == 11) {
    $67 = (($1) + ($$0423)|0);
    $68 = ((($0)) + 8|0);
    $69 = ($10|0)!=(0);
    $70 = ($6|0)==(0);
    $71 = ($$0456|0)>(0);
    $72 = ((($0)) + 12|0);
    $73 = ($$0456|0)<(1);
    $74 = ((($0)) + 44|0);
    $75 = ((($0)) + 32|0);
    $76 = ((($0)) + 36|0);
    $77 = ($$0456|0)==(0);
    $$0415 = 0;$$0421 = $67;$$0422 = 0;$$0432 = 0;$$0437 = -1;$$0460 = $32;$$1424 = $$0423;$$1430 = $25;$$1471 = $32;$$1474 = $39;
    while(1) {
     $78 = ($$0437|0)<(0);
     if ($78) {
      $79 = HEAP32[$68>>2]|0;
      $80 = ((($79)) + 8|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($81|0)==(0|0);
      L22: do {
       if ($82) {
        $$1433$ph$lcssa = $$0432;$$1438$ph$lcssa = $$0437;$$1461$ph$lcssa = $$0460;
       } else {
        $83 = ($$0422|0)!=(0);
        $84 = ($$0415|0)==(95);
        $85 = ($$0422|0)==(0);
        $86 = ($$0422|0)<(1);
        $87 = ($$0415|0)==(10);
        $or$cond3 = $69 & $87;
        $or$cond$not = $86 & $70;
        $$0427$ph533 = $79;$$1433$ph531 = $$0432;$$1438$ph529 = $$0437;$$1461$ph527 = $$0460;$399 = $80;
        while(1) {
         $$0427511 = $$0427$ph533;$153 = $399;
         L26: while(1) {
          $88 = ((($$0427511)) + 12|0);
          $89 = HEAP32[$88>>2]|0;
          $90 = (($45) + ($89<<3)|0);
          $91 = HEAP32[$90>>2]|0;
          $92 = ($91|0)<($$0422|0);
          if (!($92)) {
           $$2462 = $$1461$ph527;$$3435 = $$1433$ph531;$$3440 = $$1438$ph529;
           break;
          }
          $93 = ((($$0427511)) + 20|0);
          $94 = HEAP32[$93>>2]|0;
          $95 = ($94|0)==(0);
          if ($95) {
           label = 46;
           break;
          }
          $96 = $94 & 1;
          $97 = ($96|0)==(0);
          $brmerge = $97 | $or$cond$not;
          $brmerge590 = $brmerge | $or$cond3;
          L30: do {
           if ($brmerge590) {
            $98 = $94 & 2;
            $99 = ($98|0)==(0);
            if (!($99)) {
             $100 = HEAP32[$5>>2]|0;
             $101 = $100 | $7;
             $102 = ($101|0)==(0);
             $103 = ($100|0)==(10);
             $or$cond7 = $69 & $103;
             $or$cond592 = $102 | $or$cond7;
             if (!($or$cond592)) {
              break;
             }
            }
            $104 = $94 & 16;
            $105 = ($104|0)==(0);
            do {
             if (!($105)) {
              if ($84) {
               break L30;
              }
              $106 = (_iswalnum($$0415)|0);
              $107 = ($106|0)==(0);
              if (!($107)) {
               break L30;
              }
              $108 = HEAP32[$5>>2]|0;
              $109 = ($108|0)==(95);
              if ($109) {
               break;
              }
              $110 = (_iswalnum($108)|0);
              $111 = ($110|0)==(0);
              if ($111) {
               break L30;
              }
             }
            } while(0);
            $112 = HEAP32[$93>>2]|0;
            $113 = $112 & 32;
            $114 = ($113|0)==(0);
            if ($114) {
             $123 = $112;
            } else {
             if ($84) {
              $$old = HEAP32[$5>>2]|0;
              $$old8 = ($$old|0)==(95);
              if ($$old8) {
               break;
              } else {
               $119 = $$old;
              }
             } else {
              $115 = (_iswalnum($$0415)|0);
              $116 = ($115|0)==(0);
              $117 = HEAP32[$5>>2]|0;
              $118 = ($117|0)==(95);
              $or$cond9 = $116 | $118;
              if ($or$cond9) {
               break;
              } else {
               $119 = $117;
              }
             }
             $120 = (_iswalnum($119)|0);
             $121 = ($120|0)==(0);
             if (!($121)) {
              break;
             }
             $$pre = HEAP32[$93>>2]|0;
             $123 = $$pre;
            }
            $122 = $123 & 64;
            $124 = ($122|0)!=(0);
            $or$cond12 = $83 & $124;
            $125 = HEAP32[$5>>2]|0;
            $126 = ($125|0)!=(0);
            $or$cond15 = $126 & $or$cond12;
            do {
             if ($or$cond15) {
              if ($84) {
               $130 = $125;$134 = 1;
              } else {
               $127 = (_iswalnum($$0415)|0);
               $128 = ($127|0)!=(0);
               $$pr = HEAP32[$5>>2]|0;
               $130 = $$pr;$134 = $128;
              }
              $129 = ($130|0)==(95);
              if ($129) {
               if ($134) {
                break L30;
               } else {
                break;
               }
              } else {
               $131 = (_iswalnum($130)|0);
               $132 = ($131|0)!=(0);
               $133 = $134 ^ $132;
               if ($133) {
                break;
               } else {
                break L30;
               }
              }
             }
            } while(0);
            $135 = HEAP32[$93>>2]|0;
            $136 = $135 & 128;
            $137 = ($136|0)==(0);
            if ($137) {
             label = 46;
             break L26;
            }
            $138 = HEAP32[$5>>2]|0;
            $139 = ($138|0)==(0);
            $or$cond18 = $85 | $139;
            if ($or$cond18) {
             break;
            }
            if ($84) {
             $143 = $138;$147 = 1;
            } else {
             $140 = (_iswalnum($$0415)|0);
             $141 = ($140|0)!=(0);
             $$pr481 = HEAP32[$5>>2]|0;
             $143 = $$pr481;$147 = $141;
            }
            $142 = ($143|0)==(95);
            if ($142) {
             if ($147) {
              label = 46;
              break L26;
             } else {
              break;
             }
            } else {
             $144 = (_iswalnum($143)|0);
             $145 = ($144|0)!=(0);
             $146 = $147 ^ $145;
             if ($146) {
              break;
             } else {
              label = 46;
              break L26;
             }
            }
           }
          } while(0);
          $148 = ((($$0427511)) + 32|0);
          $149 = ((($$0427511)) + 40|0);
          $150 = HEAP32[$149>>2]|0;
          $151 = ($150|0)==(0|0);
          if ($151) {
           $$1433$ph$lcssa = $$1433$ph531;$$1438$ph$lcssa = $$1438$ph529;$$1461$ph$lcssa = $$1461$ph527;
           break L22;
          } else {
           $$0427511 = $148;$153 = $149;
          }
         }
         if ((label|0) == 46) {
          label = 0;
          $152 = HEAP32[$153>>2]|0;
          HEAP32[$$1461$ph527>>2] = $152;
          if ($71) {
           $154 = ((($$1461$ph527)) + 4|0);
           $155 = HEAP32[$154>>2]|0;
           _memset(($155|0),-1,($14|0))|0;
          }
          $156 = ((($$0427511)) + 16|0);
          $157 = HEAP32[$156>>2]|0;
          $158 = ($157|0)==(0|0);
          if (!($158)) {
           $159 = HEAP32[$157>>2]|0;
           $160 = ($159|0)>(-1);
           if ($160) {
            $161 = ((($$1461$ph527)) + 4|0);
            $$0457523 = $157;$163 = $159;
            while(1) {
             $162 = ($163|0)<($$0456|0);
             if ($162) {
              $164 = HEAP32[$161>>2]|0;
              $165 = (($164) + ($163<<2)|0);
              HEAP32[$165>>2] = $$0422;
             }
             $166 = ((($$0457523)) + 4|0);
             $167 = HEAP32[$166>>2]|0;
             $168 = ($167|0)>(-1);
             if ($168) {
              $$0457523 = $166;$163 = $167;
             } else {
              break;
             }
            }
           }
          }
          $169 = HEAP32[$$1461$ph527>>2]|0;
          $170 = HEAP32[$72>>2]|0;
          $171 = ($169|0)!=($170|0);
          $brmerge598 = $171 | $73;
          if ($brmerge598) {
           $$1433$ph532$mux = $171 ? $$1433$ph531 : 1;
           $$1438$ph530$mux = $171 ? $$1438$ph529 : $$0422;
           $$pre625 = ((($$1461$ph527)) + 4|0);
           $$2434 = $$1433$ph532$mux;$$2439 = $$1438$ph530$mux;$$pre$phi626Z2D = $$pre625;
          } else {
           $172 = ((($$1461$ph527)) + 4|0);
           $173 = HEAP32[$172>>2]|0;
           $$3451525 = 0;
           while(1) {
            $174 = (($173) + ($$3451525<<2)|0);
            $175 = HEAP32[$174>>2]|0;
            $176 = (($2) + ($$3451525<<2)|0);
            HEAP32[$176>>2] = $175;
            $177 = (($$3451525) + 1)|0;
            $exitcond = ($177|0)==($$0456|0);
            if ($exitcond) {
             $$2434 = 1;$$2439 = $$0422;$$pre$phi626Z2D = $172;
             break;
            } else {
             $$3451525 = $177;
            }
           }
          }
          $178 = HEAP32[$88>>2]|0;
          $179 = (($45) + ($178<<3)|0);
          HEAP32[$179>>2] = $$0422;
          $180 = (((($45) + ($178<<3)|0)) + 4|0);
          HEAP32[$180>>2] = $$pre$phi626Z2D;
          $181 = ((($$1461$ph527)) + 8|0);
          $$2462 = $181;$$3435 = $$2434;$$3440 = $$2439;
         }
         $182 = ((($$0427511)) + 32|0);
         $183 = ((($$0427511)) + 40|0);
         $184 = HEAP32[$183>>2]|0;
         $185 = ($184|0)==(0|0);
         if ($185) {
          $$1433$ph$lcssa = $$3435;$$1438$ph$lcssa = $$3440;$$1461$ph$lcssa = $$2462;
          break;
         } else {
          $$0427$ph533 = $182;$$1433$ph531 = $$3435;$$1438$ph529 = $$3440;$$1461$ph527 = $$2462;$399 = $183;
         }
        }
       }
      } while(0);
      HEAP32[$$1461$ph$lcssa>>2] = 0;
      $$old46 = HEAP32[$5>>2]|0;
      $$old47 = ($$old46|0)==(0);
      if ($$old47) {
       $$10447 = $$1438$ph$lcssa;
       break;
      } else {
       $$4436 = $$1433$ph$lcssa;$$4441 = $$1438$ph$lcssa;$236 = $$old46;
      }
     } else {
      if ($77) {
       $$10447 = $$0437;
       break;
      }
      $186 = ($$0460|0)!=($$1471|0);
      $187 = HEAP32[$5>>2]|0;
      $188 = ($187|0)!=(0);
      $or$cond48 = $186 & $188;
      if ($or$cond48) {
       $$4436 = $$0432;$$4441 = $$0437;$236 = $187;
      } else {
       $$10447 = $$0437;
       break;
      }
     }
     $189 = (($$0422) + ($$1424))|0;
     $190 = (_mbtowc($5,$$0421,4)|0);
     $191 = ($190|0)<(1);
     if ($191) {
      $192 = ($190|0)<(0);
      if ($192) {
       $$0426 = 1;
       break L16;
      } else {
       $$2425 = 1;
      }
     } else {
      $$2425 = $190;
     }
     $193 = (($$0421) + ($$2425)|0);
     $194 = HEAP32[$74>>2]|0;
     $195 = ($194|0)!=(0);
     $196 = ($$4436|0)!=(0);
     $or$cond21 = $196 & $195;
     if ($or$cond21) {
      $197 = HEAP32[$$1471>>2]|0;
      $198 = ($197|0)==(0|0);
      if ($198) {
       $$3463$lcssa = $$1474;
      } else {
       $199 = HEAP32[$76>>2]|0;
       $200 = HEAP32[$199>>2]|0;
       $201 = ($200|0)>(-1);
       $$0468540 = $$1471;$$3463542 = $$1474;
       while(1) {
        $202 = ((($$0468540)) + 4|0);
        L101: do {
         if ($201) {
          $$4452537 = 0;$207 = $200;
          while(1) {
           $203 = $$4452537 | 1;
           $204 = (($199) + ($203<<2)|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = ($207|0)<($$0456|0);
           if (!($206)) {
            $$4464 = $$3463542;
            break L101;
           }
           $208 = HEAP32[$202>>2]|0;
           $209 = (($208) + ($205<<2)|0);
           $210 = HEAP32[$209>>2]|0;
           $211 = (($2) + ($205<<2)|0);
           $212 = HEAP32[$211>>2]|0;
           $213 = ($210|0)==($212|0);
           if ($213) {
            $214 = (($208) + ($207<<2)|0);
            $215 = HEAP32[$214>>2]|0;
            $216 = (($2) + ($207<<2)|0);
            $217 = HEAP32[$216>>2]|0;
            $218 = ($215|0)<($217|0);
            if ($218) {
             $$4464 = $$3463542;
             break L101;
            }
           }
           $219 = (($$4452537) + 2)|0;
           $220 = (($199) + ($219<<2)|0);
           $221 = HEAP32[$220>>2]|0;
           $222 = ($221|0)>(-1);
           if ($222) {
            $$4452537 = $219;$207 = $221;
           } else {
            break;
           }
          }
          $223 = $208;
          $$pre$phi624Z2D = $202;$227 = $223;
          label = 75;
         } else {
          $$pre618 = HEAP32[$202>>2]|0;
          $$pre$phi624Z2D = $202;$227 = $$pre618;
          label = 75;
         }
        } while(0);
        if ((label|0) == 75) {
         label = 0;
         $224 = HEAP32[$$0468540>>2]|0;
         HEAP32[$$3463542>>2] = $224;
         $225 = ((($$3463542)) + 4|0);
         $226 = HEAP32[$225>>2]|0;
         HEAP32[$225>>2] = $227;
         HEAP32[$$pre$phi624Z2D>>2] = $226;
         $228 = ((($$3463542)) + 8|0);
         $$4464 = $228;
        }
        $229 = ((($$0468540)) + 8|0);
        $230 = HEAP32[$229>>2]|0;
        $231 = ($230|0)==(0|0);
        if ($231) {
         $$3463$lcssa = $$4464;
         break;
        } else {
         $$0468540 = $229;$$3463542 = $$4464;
        }
       }
      }
      HEAP32[$$3463$lcssa>>2] = 0;
      $$2472 = $$1471;$$2475 = $$1474;$$5 = 0;
     } else {
      $$2472 = $$1474;$$2475 = $$1471;$$5 = $$4436;
     }
     $232 = HEAP32[$$2475>>2]|0;
     $233 = ($232|0)==(0|0);
     if ($233) {
      $$2431$lcssa = $$1430;$$5442$lcssa = $$4441;$$5465$lcssa = $$2472;$$6$lcssa = $$5;
     } else {
      $234 = ($189|0)!=(0);
      $235 = ($236|0)==(95);
      $237 = ($189|0)==(0);
      $238 = ($189|0)<(1);
      $239 = ($236|0)==(10);
      $or$cond27 = $69 & $239;
      $or$cond24$not = $238 & $70;
      $$1469574 = $$2475;$$2431578 = $$1430;$$5442576 = $$4441;$$5465575 = $$2472;$$6577 = $$5;$241 = $232;
      while(1) {
       $240 = ((($241)) + 8|0);
       $242 = HEAP32[$240>>2]|0;
       $243 = ($242|0)==(0|0);
       if ($243) {
        $$3$lcssa = $$2431578;$$6443$lcssa = $$5442576;$$6466$lcssa = $$5465575;$$7$lcssa = $$6577;
       } else {
        $244 = ((($$1469574)) + 4|0);
        $$1428565 = $241;$$6443556 = $$5442576;$$6466555 = $$5465575;$$7559 = $$6577;$343 = $$2431578;$362 = $240;
        while(1) {
         $245 = HEAP32[$$1428565>>2]|0;
         $246 = ($245>>>0)>($236>>>0);
         L123: do {
          if ($246) {
           $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
          } else {
           $247 = ((($$1428565)) + 4|0);
           $248 = HEAP32[$247>>2]|0;
           $249 = ($248>>>0)<($236>>>0);
           if ($249) {
            $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
           } else {
            $250 = ((($$1428565)) + 20|0);
            $251 = HEAP32[$250>>2]|0;
            $252 = ($251|0)==(0);
            do {
             if (!($252)) {
              $253 = $251 & 1;
              $254 = ($253|0)==(0);
              $brmerge593 = $254 | $or$cond24$not;
              $brmerge594 = $brmerge593 | $or$cond27;
              if (!($brmerge594)) {
               $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
               break L123;
              }
              $255 = $251 & 2;
              $256 = ($255|0)==(0);
              if (!($256)) {
               $257 = HEAP32[$5>>2]|0;
               $258 = $257 | $7;
               $259 = ($258|0)==(0);
               $260 = ($257|0)==(10);
               $or$cond33 = $69 & $260;
               $or$cond596 = $259 | $or$cond33;
               if (!($or$cond596)) {
                $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                break L123;
               }
              }
              $261 = $251 & 16;
              $262 = ($261|0)==(0);
              do {
               if (!($262)) {
                if ($235) {
                 $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
                $263 = (_iswalnum($236)|0);
                $264 = ($263|0)==(0);
                if (!($264)) {
                 $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
                $265 = HEAP32[$5>>2]|0;
                $266 = ($265|0)==(95);
                if ($266) {
                 break;
                }
                $267 = (_iswalnum($265)|0);
                $268 = ($267|0)==(0);
                if ($268) {
                 $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
               }
              } while(0);
              $269 = HEAP32[$250>>2]|0;
              $270 = $269 & 32;
              $271 = ($270|0)==(0);
              if ($271) {
               $280 = $269;
              } else {
               if ($235) {
                $$old34 = HEAP32[$5>>2]|0;
                $$old35 = ($$old34|0)==(95);
                if ($$old35) {
                 $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                } else {
                 $276 = $$old34;
                }
               } else {
                $272 = (_iswalnum($236)|0);
                $273 = ($272|0)==(0);
                $274 = HEAP32[$5>>2]|0;
                $275 = ($274|0)==(95);
                $or$cond36 = $273 | $275;
                if ($or$cond36) {
                 $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                } else {
                 $276 = $274;
                }
               }
               $277 = (_iswalnum($276)|0);
               $278 = ($277|0)==(0);
               if (!($278)) {
                $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                break L123;
               }
               $$pre620 = HEAP32[$250>>2]|0;
               $280 = $$pre620;
              }
              $279 = $280 & 64;
              $281 = ($279|0)!=(0);
              $or$cond39 = $234 & $281;
              $282 = HEAP32[$5>>2]|0;
              $283 = ($282|0)!=(0);
              $or$cond42 = $283 & $or$cond39;
              do {
               if ($or$cond42) {
                if ($235) {
                 $287 = $282;$291 = 1;
                } else {
                 $284 = (_iswalnum($236)|0);
                 $285 = ($284|0)!=(0);
                 $$pr485 = HEAP32[$5>>2]|0;
                 $287 = $$pr485;$291 = $285;
                }
                $286 = ($287|0)==(95);
                if ($286) {
                 if ($291) {
                  $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                  break L123;
                 } else {
                  break;
                 }
                } else {
                 $288 = (_iswalnum($287)|0);
                 $289 = ($288|0)!=(0);
                 $290 = $291 ^ $289;
                 if ($290) {
                  break;
                 } else {
                  $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                  break L123;
                 }
                }
               }
              } while(0);
              $292 = HEAP32[$250>>2]|0;
              $293 = $292 & 128;
              $294 = ($293|0)==(0);
              do {
               if (!($294)) {
                $295 = HEAP32[$5>>2]|0;
                $296 = ($295|0)==(0);
                $or$cond45 = $237 | $296;
                if ($or$cond45) {
                 $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
                if ($235) {
                 $300 = $295;$304 = 1;
                } else {
                 $297 = (_iswalnum($236)|0);
                 $298 = ($297|0)!=(0);
                 $$pr487 = HEAP32[$5>>2]|0;
                 $300 = $$pr487;$304 = $298;
                }
                $299 = ($300|0)==(95);
                if ($299) {
                 if ($304) {
                  break;
                 } else {
                  $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                  break L123;
                 }
                } else {
                 $301 = (_iswalnum($300)|0);
                 $302 = ($301|0)!=(0);
                 $303 = $304 ^ $302;
                 if ($303) {
                  $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                  break L123;
                 } else {
                  break;
                 }
                }
               }
              } while(0);
              $305 = HEAP32[$250>>2]|0;
              $306 = $305 & 4;
              $307 = ($306|0)==(0);
              do {
               if ($307) {
                $316 = $305;
               } else {
                $308 = HEAP32[$8>>2]|0;
                $309 = $308 & 2;
                $310 = ($309|0)==(0);
                if (!($310)) {
                 $316 = $305;
                 break;
                }
                $311 = ((($$1428565)) + 24|0);
                $312 = HEAP32[$311>>2]|0;
                $313 = (_iswctype($236,$312)|0);
                $314 = ($313|0)==(0);
                if ($314) {
                 $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
                $$pre622 = HEAP32[$250>>2]|0;
                $316 = $$pre622;
               }
              } while(0);
              $315 = $316 & 4;
              $317 = ($315|0)==(0);
              do {
               if (!($317)) {
                $318 = HEAP32[$8>>2]|0;
                $319 = $318 & 2;
                $320 = ($319|0)==(0);
                if ($320) {
                 break;
                }
                $321 = (_towlower($236)|0);
                $322 = ((($$1428565)) + 24|0);
                $323 = HEAP32[$322>>2]|0;
                $324 = (_iswctype($321,$323)|0);
                $325 = ($324|0)==(0);
                if (!($325)) {
                 break;
                }
                $326 = (_towupper($236)|0);
                $327 = HEAP32[$322>>2]|0;
                $328 = (_iswctype($326,$327)|0);
                $329 = ($328|0)==(0);
                if ($329) {
                 $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
                 break L123;
                }
               }
              } while(0);
              $330 = HEAP32[$250>>2]|0;
              $331 = $330 & 8;
              $332 = ($331|0)==(0);
              if ($332) {
               break;
              }
              $333 = ((($$1428565)) + 28|0);
              $334 = HEAP32[$333>>2]|0;
              $335 = HEAP32[$8>>2]|0;
              $336 = $335 & 2;
              $337 = (_tre_neg_char_classes_match($334,$236,$336)|0);
              $338 = ($337|0)==(0);
              if (!($338)) {
               $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
               break L123;
              }
             }
            } while(0);
            if ($71) {
             $339 = HEAP32[$244>>2]|0;
             $$5453546 = 0;
             while(1) {
              $340 = (($339) + ($$5453546<<2)|0);
              $341 = HEAP32[$340>>2]|0;
              $342 = (($343) + ($$5453546<<2)|0);
              HEAP32[$342>>2] = $341;
              $344 = (($$5453546) + 1)|0;
              $exitcond613 = ($344|0)==($$0456|0);
              if ($exitcond613) {
               break;
              } else {
               $$5453546 = $344;
              }
             }
            }
            $345 = ((($$1428565)) + 16|0);
            $346 = HEAP32[$345>>2]|0;
            $347 = ($346|0)==(0|0);
            do {
             if (!($347)) {
              $348 = HEAP32[$346>>2]|0;
              $349 = ($348|0)>(-1);
              if ($349) {
               $$1458549 = $346;$351 = $348;
              } else {
               break;
              }
              while(1) {
               $350 = ($351|0)<($$0456|0);
               if ($350) {
                $352 = (($343) + ($351<<2)|0);
                HEAP32[$352>>2] = $189;
               }
               $353 = ((($$1458549)) + 4|0);
               $354 = HEAP32[$353>>2]|0;
               $355 = ($354|0)>(-1);
               if ($355) {
                $$1458549 = $353;$351 = $354;
               } else {
                break;
               }
              }
             }
            } while(0);
            $356 = ((($$1428565)) + 12|0);
            $357 = HEAP32[$356>>2]|0;
            $358 = (($45) + ($357<<3)|0);
            $359 = HEAP32[$358>>2]|0;
            $360 = ($359|0)<($189|0);
            if (!($360)) {
             $379 = HEAP32[$75>>2]|0;
             $380 = (((($45) + ($357<<3)|0)) + 4|0);
             $381 = HEAP32[$380>>2]|0;
             $382 = HEAP32[$381>>2]|0;
             $383 = (_tre_tag_order($$0456,$379,$343,$382)|0);
             $384 = ($383|0)==(0);
             if ($384) {
              $$10 = $$7559;$$4 = $343;$$7467 = $$6466555;$$9446 = $$6443556;
              break;
             }
             HEAP32[$381>>2] = $343;
             $385 = HEAP32[$362>>2]|0;
             $386 = HEAP32[$72>>2]|0;
             $387 = ($385|0)==($386|0);
             if (!($387)) {
              $$10 = $$7559;$$4 = $382;$$7467 = $$6466555;$$9446 = $$6443556;
              break;
             }
             if ($71) {
              $$7455551 = 0;
             } else {
              $$10 = 1;$$4 = $382;$$7467 = $$6466555;$$9446 = $189;
              break;
             }
             while(1) {
              $388 = (($343) + ($$7455551<<2)|0);
              $389 = HEAP32[$388>>2]|0;
              $390 = (($2) + ($$7455551<<2)|0);
              HEAP32[$390>>2] = $389;
              $391 = (($$7455551) + 1)|0;
              $exitcond615 = ($391|0)==($$0456|0);
              if ($exitcond615) {
               $$10 = 1;$$4 = $382;$$7467 = $$6466555;$$9446 = $189;
               break L123;
              } else {
               $$7455551 = $391;
              }
             }
            }
            $361 = HEAP32[$362>>2]|0;
            HEAP32[$$6466555>>2] = $361;
            $363 = ((($$6466555)) + 4|0);
            $364 = HEAP32[$363>>2]|0;
            HEAP32[$363>>2] = $343;
            HEAP32[$358>>2] = $189;
            $365 = (((($45) + ($357<<3)|0)) + 4|0);
            HEAP32[$365>>2] = $363;
            $366 = $361;
            $367 = HEAP32[$72>>2]|0;
            $368 = ($367|0)==($366|0);
            do {
             if ($368) {
              $369 = ($$6443556|0)==(-1);
              if ($369) {
               if ($71) {
                $$6454553 = 0;
               } else {
                $$7444 = $189;$$8 = 1;
                break;
               }
              } else {
               if (!($71)) {
                $$7444 = $$6443556;$$8 = $$7559;
                break;
               }
               $370 = HEAP32[$343>>2]|0;
               $371 = HEAP32[$2>>2]|0;
               $372 = ($370|0)>($371|0);
               if ($372) {
                $$7444 = $$6443556;$$8 = $$7559;
                break;
               } else {
                $$6454553 = 0;
               }
              }
              while(1) {
               $373 = (($343) + ($$6454553<<2)|0);
               $374 = HEAP32[$373>>2]|0;
               $375 = (($2) + ($$6454553<<2)|0);
               HEAP32[$375>>2] = $374;
               $376 = (($$6454553) + 1)|0;
               $377 = ($376|0)<($$0456|0);
               if ($377) {
                $$6454553 = $376;
               } else {
                $$7444 = $189;$$8 = 1;
                break;
               }
              }
             } else {
              $$7444 = $$6443556;$$8 = $$7559;
             }
            } while(0);
            $378 = ((($$6466555)) + 8|0);
            $$10 = $$8;$$4 = $364;$$7467 = $378;$$9446 = $$7444;
           }
          }
         } while(0);
         $392 = ((($$1428565)) + 32|0);
         $393 = ((($$1428565)) + 40|0);
         $394 = HEAP32[$393>>2]|0;
         $395 = ($394|0)==(0|0);
         if ($395) {
          $$3$lcssa = $$4;$$6443$lcssa = $$9446;$$6466$lcssa = $$7467;$$7$lcssa = $$10;
          break;
         } else {
          $$1428565 = $392;$$6443556 = $$9446;$$6466555 = $$7467;$$7559 = $$10;$343 = $$4;$362 = $393;
         }
        }
       }
       $396 = ((($$1469574)) + 8|0);
       $397 = HEAP32[$396>>2]|0;
       $398 = ($397|0)==(0|0);
       if ($398) {
        $$2431$lcssa = $$3$lcssa;$$5442$lcssa = $$6443$lcssa;$$5465$lcssa = $$6466$lcssa;$$6$lcssa = $$7$lcssa;
        break;
       } else {
        $$1469574 = $396;$$2431578 = $$3$lcssa;$$5442576 = $$6443$lcssa;$$5465575 = $$6466$lcssa;$$6577 = $$7$lcssa;$241 = $397;
       }
      }
     }
     HEAP32[$$5465$lcssa>>2] = 0;
     $$0415 = $236;$$0421 = $193;$$0422 = $189;$$0432 = $$6$lcssa;$$0437 = $$5442$lcssa;$$0460 = $$5465$lcssa;$$1424 = $$2425;$$1430 = $$2431$lcssa;$$1471 = $$2472;$$1474 = $$2475;
    }
    HEAP32[$4>>2] = $$10447;
    $$10447$lobit = $$10447 >>> 31;
    $$0426 = $$10447$lobit;
   }
  } while(0);
  _free($25);
  $$1 = $$0426;
 }
 STACKTOP = sp;return ($$1|0);
}
function _tre_fill_pmatch($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$08490 = 0, $$096 = 0, $$193 = 0, $$2$ph = 0, $$pre = 0, $$pre101 = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond86 = 0, $or$cond8695 = 0, $or$cond87 = 0, $or$cond88 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($5|0)>(-1);
 $7 = $2 & 8;
 $8 = ($7|0)==(0);
 $or$cond = $8 & $6;
 if ($or$cond) {
  $12 = ((($3)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($3)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  $17 = ($0|0)!=(0);
  $or$cond8695 = $17 & $16;
  if ($or$cond8695) {
   $18 = ((($3)) + 48|0);
   $$pre = HEAP32[$18>>2]|0;
   $$096 = 0;
   while(1) {
    $19 = (($13) + (($$096*12)|0)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($$pre|0);
    if ($21) {
     $25 = $5;
    } else {
     $22 = (($4) + ($20<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $25 = $23;
    }
    $24 = (($1) + ($$096<<3)|0);
    HEAP32[$24>>2] = $25;
    $26 = (((($13) + (($$096*12)|0)|0)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==($$pre|0);
    if ($28) {
     $$sink3 = $5;
    } else {
     $29 = (($4) + ($27<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $$sink3 = $30;
    }
    $31 = (((($1) + ($$096<<3)|0)) + 4|0);
    HEAP32[$31>>2] = $$sink3;
    $32 = ($25|0)==(-1);
    $33 = ($$sink3|0)==(-1);
    $or$cond88 = $33 | $32;
    if ($or$cond88) {
     HEAP32[$31>>2] = -1;
     HEAP32[$24>>2] = -1;
    }
    $34 = (($$096) + 1)|0;
    $35 = ($34>>>0)<($15>>>0);
    $36 = ($34>>>0)<($0>>>0);
    $or$cond86 = $36 & $35;
    if ($or$cond86) {
     $$096 = $34;
    } else {
     break;
    }
   }
   if ($or$cond8695) {
    $$193 = 0;
    while(1) {
     $37 = (((($1) + ($$193<<3)|0)) + 4|0);
     $38 = (((($13) + (($$193*12)|0)|0)) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if (!($40)) {
      $41 = HEAP32[$39>>2]|0;
      $42 = ($41|0)>(-1);
      if ($42) {
       $43 = (($1) + ($$193<<3)|0);
       $$pre101 = HEAP32[$43>>2]|0;
       $$08490 = 0;$45 = $41;$48 = $$pre101;
       while(1) {
        $44 = (($1) + ($45<<3)|0);
        $46 = HEAP32[$44>>2]|0;
        $47 = ($48|0)<($46|0);
        if ($47) {
         label = 19;
        } else {
         $49 = HEAP32[$37>>2]|0;
         $50 = (((($1) + ($45<<3)|0)) + 4|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($49|0)>($51|0);
         if ($52) {
          label = 19;
         } else {
          $60 = $48;
         }
        }
        if ((label|0) == 19) {
         label = 0;
         HEAP32[$37>>2] = -1;
         HEAP32[$43>>2] = -1;
         $60 = -1;
        }
        $53 = (($$08490) + 1)|0;
        $54 = (($39) + ($53<<2)|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = ($55|0)>(-1);
        if ($56) {
         $$08490 = $53;$45 = $55;$48 = $60;
        } else {
         break;
        }
       }
      }
     }
     $57 = (($$193) + 1)|0;
     $58 = ($57>>>0)<($15>>>0);
     $59 = ($57>>>0)<($0>>>0);
     $or$cond87 = $59 & $58;
     if ($or$cond87) {
      $$193 = $57;
     } else {
      $$2$ph = $57;
      break;
     }
    }
   } else {
    $$2$ph = 0;
   }
  } else {
   $$2$ph = 0;
  }
 } else {
  $$2$ph = 0;
 }
 $9 = ($$2$ph>>>0)<($0>>>0);
 if ($9) {
  $scevgep = (($1) + ($$2$ph<<3)|0);
  $10 = (($0) - ($$2$ph))|0;
  $11 = $10 << 3;
  _memset(($scevgep|0),-1,($11|0))|0;
 }
 return;
}
function _tre_neg_char_classes_match($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   $$01011 = $0;$6 = $3;
   while(1) {
    if ($5) {
     $7 = (_iswctype($1,$6)|0);
     $8 = ($7|0)==(0);
     if (!($8)) {
      $$0 = 1;
      break L1;
     }
    } else {
     $9 = (_towupper($1)|0);
     $10 = HEAP32[$$01011>>2]|0;
     $11 = (_iswctype($9,$10)|0);
     $12 = ($11|0)==(0);
     if (!($12)) {
      $$0 = 1;
      break L1;
     }
     $13 = (_towlower($1)|0);
     $14 = HEAP32[$$01011>>2]|0;
     $15 = (_iswctype($13,$14)|0);
     $16 = ($15|0)==(0);
     if (!($16)) {
      $$0 = 1;
      break L1;
     }
    }
    $17 = ((($$01011)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0);
    if ($19) {
     $$0 = 0;
     break;
    } else {
     $$01011 = $17;$6 = $18;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _tre_tag_order($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$018 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)>(0);
 L1: do {
  if ($4) {
   $$019 = 0;
   while(1) {
    $5 = (($1) + ($$019<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0);
    $8 = (($2) + ($$019<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($3) + ($$019<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    if ($7) {
     $12 = ($9|0)<($11|0);
     if ($12) {
      $$018 = 1;
      break L1;
     }
     $13 = ($9|0)>($11|0);
     if ($13) {
      $$018 = 0;
      break L1;
     }
    } else {
     $14 = ($9|0)>($11|0);
     if ($14) {
      $$018 = 1;
      break L1;
     }
     $15 = ($9|0)<($11|0);
     if ($15) {
      $$018 = 0;
      break L1;
     }
    }
    $16 = (($$019) + 1)|0;
    $17 = ($16|0)<($0|0);
    if ($17) {
     $$019 = $16;
    } else {
     $$018 = 0;
     break;
    }
   }
  } else {
   $$018 = 0;
  }
 } while(0);
 return ($$018|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[210]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _atof($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_strtod($0,0));
 return (+$1);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11214 = 0, $$neg13 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$9 = $6;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$9 = $$pre;
 }
 $8 = $9 << 24 >> 24;
 $10 = (_isdigit($8)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$11214 = $$112$ph;
  while(1) {
   $12 = ($$01015*10)|0;
   $13 = ((($$11214)) + 1|0);
   $14 = HEAP8[$$11214>>0]|0;
   $15 = $14 << 24 >> 24;
   $$neg13 = (($12) + 48)|0;
   $16 = (($$neg13) - ($15))|0;
   $17 = HEAP8[$13>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = (_isdigit($18)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $$010$lcssa = $16;
    break;
   } else {
    $$01015 = $16;$$11214 = $13;
   }
  }
 }
 $21 = ($$1$ph|0)!=(0);
 $22 = (0 - ($$010$lcssa))|0;
 $23 = $21 ? $$010$lcssa : $22;
 return ($23|0);
}
function _atol($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11214 = 0, $$neg13 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$9 = $6;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$9 = $$pre;
 }
 $8 = $9 << 24 >> 24;
 $10 = (_isdigit($8)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$11214 = $$112$ph;
  while(1) {
   $12 = ($$01015*10)|0;
   $13 = ((($$11214)) + 1|0);
   $14 = HEAP8[$$11214>>0]|0;
   $15 = $14 << 24 >> 24;
   $$neg13 = (($12) + 48)|0;
   $16 = (($$neg13) - ($15))|0;
   $17 = HEAP8[$13>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = (_isdigit($18)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $$010$lcssa = $16;
    break;
   } else {
    $$01015 = $16;$$11214 = $13;
   }
  }
 }
 $21 = ($$1$ph|0)!=(0);
 $22 = (0 - ($$010$lcssa))|0;
 $23 = $21 ? $$010$lcssa : $22;
 return ($23|0);
}
function _labs($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)>(0);
 $2 = (0 - ($0))|0;
 $3 = $1 ? $0 : $2;
 return ($3|0);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iii = [b1,b1,b1,b1,b1,b1,b1,b1,_ignore_err,_sort,_tre_compare_lit,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iiii = [b2,b2,___stdio_write,___stdio_seek,___stdout_write,_sn_write,_wrap_write,___stdio_read];

  return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



